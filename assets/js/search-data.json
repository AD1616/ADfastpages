{
  
    
        "post0": {
            "title": "Car API JS",
            "content": ". ID Car Brand Name .",
            "url": "https://ad1616.github.io/ADfastpages/carAPI",
            "relUrl": "/carAPI",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;lambo&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } double pixVal = 0; // Changing to go by blocks 2 times as wide as tall for (int i = 0; i &lt; img.getHeight(); i+=2) { for (int j = 0; j &lt; img.getWidth(); j++) { Color col = new Color(img.getRGB(j, i)); if (i == 0) { pixVal = (((col.getRed()) + (col.getBlue()) + (col.getGreen())))/3; } else if (i % 2 == 0) { try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } pixVal = (((col.getRed()) + (col.getBlue()) + (col.getGreen())))/3; } else { double pixVal2 = (((col.getRed()) + (col.getBlue()) + (col.getGreen())))/3; pixVal = (pixVal + pixVal2)/2; } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // Gray scale method public void GrayScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red+green+blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGray = new Color(avg, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGray.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;grayLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // Red scale method public void RedScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Getting an average red color int redAvg = red/3; // Creating a new color object which has G and B as average // Red is scaled so that it accounts for variations in intensity // Essentially making it gray and then adding red Color colorRed = new Color(red, redAvg, redAvg); // Setting the pixel&#39;s actual RGB content in the image to be the redscaled version. img.setRGB(j, i, colorRed.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // Green scale method public void GreenScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Getting an average green color int greenAvg = green/3; // Creating a new color object which has R and B as average // Green is scaled so that it accounts for variations in intensity // Essentially making it gray and then adding green Color colorGreen = new Color(greenAvg, green, greenAvg); // Setting the pixel&#39;s actual RGB content in the image to be the greenscaled version. img.setRGB(j, i, colorGreen.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greenLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // Blue scale method public void BlueScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Getting an average Blue color int blueAvg = blue/3; // Creating a new color object which has R and G as average // Blue is scaled so that it accounts for variations in intensity // Essentially making it gray and then adding blue Color colorBlue = new Color(blueAvg, blueAvg, blue); // Setting the pixel&#39;s actual RGB content in the image to be the bluescaled version. img.setRGB(j, i, colorBlue.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;blueLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics lambo = new Pics(&quot;lambo&quot;, &quot;png&quot;); Pics amog = new Pics(&quot;amongus&quot;, &quot;png&quot;); amog.resize(33); amog.convertToAscii(); lambo.GrayScale(); lambo.RedScale(); lambo.GreenScale(); lambo.BlueScale(); lambo.printStats(&quot;Original&quot;); lambo.resize(33); lambo.printStats(&quot;Scaled&quot;); lambo.convertToAscii(); } } Pics.main(null); . Original: 7768 352x143 images/lambo.png Scaled: 11941 116x47 images/tmp/lambo.png .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/10/02/images.html",
            "relUrl": "/java/2022/10/02/images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Covid API",
            "content": "Time All-time Cases Recorded Deaths Active Cases . | | | | Country All-time Cases Recorded Deaths Active Cases .",
            "url": "https://ad1616.github.io/ADfastpages/covidAPI",
            "relUrl": "/covidAPI",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Fibonacci Algorithms",
            "content": "Base class for displaying sequence, contains Stream Algorithm . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); // this.name = &quot;Stream&quot;; // Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) // .limit(this.size) // .forEach(f -&gt; this.setData(f[0]) ); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ // static public void main(String[] args) { // Fibo fib = new Fibo(); // fib.print(); // FiboFor fibofor = new FiboFor(); // fibofor.print(); // FiboWhile fibowhile = new FiboWhile(); // fibowhile.print(); // FiboRecur fiborecur = new FiboRecur(); // fiborecur.print(); // } } . Class with for loop . public class FiboFor extends Fibo{ // Overriding the init method so that a different method can be used // The printing and storing of data is preserved @Override public void init() { this.name = &quot;For Loop&quot;; // Hardcoding first two numbers, and initializing them in the sequence int first = 1; int second = 1; this.setData(0); this.setData(first); this.setData(second); int loopSize = this.size - 2; // Using a for loop to update the next term to be the sum of the previous two terms. // Also need to update the second to last term to become what used to be the last term. for(int i = 0;i&lt;loopSize;i++) { int temp = second; second = second + first; first = temp; this.setData(second); } } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Class with while loop . public class FiboWhile extends Fibo{ // Overriding the init method so that a different method can be used // The printing and storing of data is preserved @Override public void init() { this.name = &quot;While Loop&quot;; // Hardcoding first two numbers, and initializing them in the sequence int first = 1; int second = 1; this.setData(0); this.setData(first); this.setData(second); int loopSize = this.size - 2; // Using a while loop to update the next term to be the sum of the previous two terms. // Also need to update the second to last term to become what used to be the last term. int i = 0; while(i &lt; loopSize) { int temp = second; second = second + first; first = temp; this.setData(second); i++; } } static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Class with recursion . public class FiboRecur extends Fibo{ // Overriding the init method so that a different method can be used // The printing and storing of data is preserved @Override public void init() { this.name = &quot;Recursion&quot;; // Iterating to show the entire sequence for (int i=0; i&lt;this.size; i++){ this.setData(Recur(i)); } } // Recursion method public int Recur(int size) { // Each term is the sum of the two terms before it if (size &gt; 2) { // Each of these function calls again will start back at the if statement // It only has actual numbers to return once the else if statements are reached // EX, when it reaches size = 3, Recur(size-1) + Recur(size-2) = 1+1 = 2 return (Recur(size-1) + Recur(size-2)); } else if (size == 2) { return 1; } else if (size == 1) { return 1; } else { return 0; } } static public void main(String[] args) { FiboRecur fib = new FiboRecur(); fib.print(); } } FiboRecur.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . CB Standards . 1.B . Determined how to implement a while loop, for loop, and recursive function to accomplish fibonacci. . 4.C . Determined if all 3 algorithms returned the same result through the printed output being the same. . 5.A . For and while loops run in O(n) time since they run through the input size once and do a constant amount of operations for each loop. The recursive algorithm takes exponential time, however, since for each term of the sequence, the algorithm needs to recalculate all of the other terms as well due to the nature of recursion. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/23/Fibonacci.html",
            "relUrl": "/java/2022/09/23/Fibonacci.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Turtles",
            "content": "The below code makes use of a 2D Array and prints turtles horizontally. It is later refactored to be a One Dimensional Array of objects. . class TurtleLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] turtles; /** * Constructor initializes a 2D array of Turtles */ public TurtleLoop() { //Storing Data in 2D arrays turtles = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Turtle 0 { &quot; _____&quot;, //[0][0] &quot; oo/&gt;&lt;&gt;&lt;&gt; &quot;, //[0][1] &quot;( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;, //[0][2] &quot; L|_|L|_|` &quot; //[0][3] }, //Turtle 1 { &quot; _____&quot;, //[1][0] &quot; ^^/xxxxx &quot;, //[1][1] &quot;( O)xxxxxxx&quot;, //[1][2] &quot; L|_|L|_|` &quot; //[1][3] }, //Turtle 2 { &quot; _____&quot;, //[2][0] &quot; uu/wwwww &quot;, //[2][1] &quot;( U)wwwwwww&quot;, //[2][2] &quot; L|_|L|_|` &quot; //[2][3] }, //Turtle 3 { &quot; _____&quot;, //[3][0] &quot; rr/nnnnn &quot;, //[3][1] &quot;( W)nnnnnnn&quot;, //[3][2] &quot; L|_|L|_|` &quot; //[3][3] }, //Turtle 4 { &quot; _____&quot;, //[4][0] &quot; cc/ooooo &quot;, //[4][1] &quot;( Y)ooooooo&quot;, //[4][2] &quot; L|_|L|_|` &quot; //[4][3] }, }; } /** * Loop and print turtles in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;The Tragedy of the turtle squad&quot;); // turtles (non-primitive) defined in constructor knows its length int turtleCount = turtles.length; for (int i = turtleCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Turtles // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; turtle squad members left&quot;); //how many separate parts are there in a turtle turtle? for (int row = 0; row &lt; turtles[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each turtle part by part, will eventually print entire column*/ for (int col = 0; col &lt; turtleCount; col++) { // prints specific part of the turtle from the column System.out.print(turtles[col][row] + &quot; &quot;); } //this new line gives separation between each turtle System.out.println(); } //countdown for poem, decrementing turtleCount variable by 1 turtleCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;That was the tragedy of the turtle squad :(&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new TurtleLoop().printPoem(); //a new monkey list and output in one step } } TurtleLoop.main(null); . The Tragedy of the turtle squad 5 turtle squad members left _____ _____ _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww rr/nnnnn cc/ooooo ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww ( W)nnnnnnn ( Y)ooooooo L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` 4 turtle squad members left _____ _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww rr/nnnnn ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww ( W)nnnnnnn L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` 3 turtle squad members left _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww L|_|L|_|` L|_|L|_|` L|_|L|_|` 2 turtle squad members left _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx L|_|L|_|` L|_|L|_|` 1 turtle squad members left _____ oo/&gt;&lt;&gt;&lt;&gt; ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; L|_|L|_|` That was the tragedy of the turtle squad :( 0000000000000000000000000000000000 . Using Objects to represent turtles . class Turtle{ public Turtle(String turtleName, String[] turtleDraw){ this.name = turtleName; this.draw = turtleDraw; } String name; String[] draw; public void draw(){ for(int row = 0; row &lt; draw.length; row++){ System.out.println(draw[row]); } System.out.println(); } public static void main(String[] args){ String[] neutral = { &quot; _____&quot;, //[0][0] &quot; oo/&gt;&lt;&gt;&lt;&gt; &quot;, //[0][1] &quot;( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;, //[0][2] &quot; L|_|L|_|` &quot; //[0][3] }; String[] surprised = { &quot; _____&quot;, //[1][0] &quot; ^^/xxxxx &quot;, //[1][1] &quot;( O)xxxxxxx&quot;, //[1][2] &quot; L|_|L|_|` &quot; //[1][3] }; String[] happy = { &quot; _____&quot;, //[2][0] &quot; uu/wwwww &quot;, //[2][1] &quot;( U)wwwwwww&quot;, //[2][2] &quot; L|_|L|_|` &quot; //[2][3] }; String[] excited = { &quot; _____&quot;, //[3][0] &quot; rr/nnnnn &quot;, //[3][1] &quot;( W)nnnnnnn&quot;, //[3][2] &quot; L|_|L|_|` &quot; //[3][3] }; Turtle bob = new Turtle(&quot;bob&quot;, neutral); Turtle rick = new Turtle(&quot;rick&quot;, surprised); Turtle ted = new Turtle(&quot;ted&quot;, happy); Turtle john = new Turtle(&quot;john&quot;, excited); Turtle[] turtles = {bob, rick, ted, john}; for(int i = 0; i &lt; turtles.length; i++){ System.out.println(&quot;This is &quot; + turtles[i].name + &quot;: &quot;); turtles[i].draw(); } } } Turtle.main(null); . This is bob: _____ oo/&gt;&lt;&gt;&lt;&gt; ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; L|_|L|_|` This is rick: _____ ^^/xxxxx ( O)xxxxxxx L|_|L|_|` This is ted: _____ uu/wwwww ( U)wwwwwww L|_|L|_|` This is john: _____ rr/nnnnn ( W)nnnnnnn L|_|L|_|` .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/21/turtles.html",
            "relUrl": "/java/2022/09/21/turtles.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Javascript Demo",
            "content": "console.log(&quot;hello world&quot;); . hello world . var msg = &quot;hello&quot;; console.log(msg); . hello . function add(x1, x2) { var sum = x1 + x2; console.log(sum); } add(5, 6); . 11 . add(19, 37); . 56 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } logItType(&quot;hello&quot;); logItType(2020); logItType([1, 2, 3]); . string ; hello number ; 2020 object ; [ 1, 2, 3 ] . var testHTML = &quot;Hello World&quot;; $$.html(testHTML); . Hello World // define a function to hold data for a Person function Person(name, ghID) { this.name = name; this.ghID = ghID; this.group = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setGroup = function(group) { this.group = group; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, group: this.group}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } var me = new Person(&quot;Sahil&quot;, &quot;AD1616&quot;); me.setGroup(&quot;Bread&quot;); logItType(me); logItType(me.toJSON()); . object ; Person { name: &#39;Sahil&#39;, ghID: &#39;AD1616&#39;, group: &#39;Bread&#39; } string ; {&#34;name&#34;:&#34;Sahil&#34;,&#34;ghID&#34;:&#34;AD1616&#34;,&#34;group&#34;:&#34;Bread&#34;} . var group1 = [ new Person(&quot;Sahil&quot;, &quot;AD1616&quot;), new Person(&quot;Nathan&quot;, &quot;NathanShih04&quot;), new Person(&quot;Rohit&quot;, &quot;rohitd3&quot;), new Person(&quot;Kurtis&quot;, &quot;kkwan0&quot;) ]; function Group(members, groupName) { this.group = []; this.members = members; this.members.forEach(member =&gt; {member.setGroup(groupName); this.group.push(member); }); this.json = []; this.group.forEach(person =&gt; this.json.push(person.toJSON())); } bread = new Group(group1, &quot;Bread&quot;); logItType(bread.group); . object ; [ Person { name: &#39;Sahil&#39;, ghID: &#39;AD1616&#39;, group: &#39;Bread&#39; }, Person { name: &#39;Nathan&#39;, ghID: &#39;NathanShih04&#39;, group: &#39;Bread&#39; }, Person { name: &#39;Rohit&#39;, ghID: &#39;rohitd3&#39;, group: &#39;Bread&#39; }, Person { name: &#39;Kurtis&#39;, ghID: &#39;kkwan0&#39;, group: &#39;Bread&#39; } ] . // define an HTML conversion &quot;method&quot; associated with Classroom Group.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Group&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in bread.group) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + bread.group[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + bread.group[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + bread.group[row].group + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(bread._toHtml()); . NameGitHub IDGroup . Sahil | AD1616 | Bread | Nathan | NathanShih04 | Bread | Rohit | rohitd3 | Bread | Kurtis | kkwan0 | Bread | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://ad1616.github.io/ADfastpages/javascript/2022/09/20/javascriptDemo.html",
            "relUrl": "/javascript/2022/09/20/javascriptDemo.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "2018 FRQ1",
            "content": "This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . Part A . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. . The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. . The frog hops until one of the following conditions becomes true: . • The frog has reached or passed the goal. . • The frog has reached a negative position. . • The frog has taken the maximum number of hops without reaching the goal. . // Code Segment for Part A /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ int distanceCovered = 0; for (int i=0; i&lt;maxHops; i++) { int temp = this.hopDistance(); distanceCovered += temp; if (distanceCovered &gt;= goalDistance) { return true; } else if (distanceCovered &lt; 0) { return false; } } return false; } . Part B . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. . // Code Segment for Part B /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ double total = 0; for (int i = 0; i&lt;num; i++) { boolean currentSimulation = this.simulate(); if (currentSimulation) { total += 1; } } double proportion = total / num; return proportion; } . Completed Code . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops){ goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ // Place Holder so the code can run return 0; } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ int distanceCovered = 0; for (int i=0; i&lt;maxHops; i++) { int temp = this.hopDistance(); distanceCovered += temp; if (distanceCovered &gt;= goalDistance) { return true; } else if (distanceCovered &lt; 0) { return false; } } return false; } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ double total = 0; for (int i = 0; i&lt;num; i++) { boolean currentSimulation = this.simulate(); if (currentSimulation) { total += 1; } } double proportion = total / num; return proportion; } } .",
            "url": "https://ad1616.github.io/ADfastpages/frq/2022/09/18/2018FRQ1.html",
            "relUrl": "/frq/2022/09/18/2018FRQ1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Monkeys",
            "content": "The below code makes use of a 2D Array and prints monkeys horizontally. It is refactored to be a One Dimensional Array of objects. . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/&quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/&quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeys[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyCount; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[col][row] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Refactored Code . class Monkey { public Monkey(String monkeyName, String[] monkeyArt) { this.name = monkeyName; this.art = monkeyArt; } String name; String[] art; public void print() { for (int row = 0; row&lt;art.length; row++) { System.out.println(art[row]); } System.out.println(); } public static void main(String[] args) { String[] kurtisArt = { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; _⏄_/ &quot;, &quot; --0-- &quot;, &quot; ⎛ ⎞ &quot; }; String[] nathanArt = { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }; String[] rohitArt = { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; _⍾_/&quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }; Monkey kurtis = new Monkey(&quot;Kurtis&quot;, kurtisArt); Monkey nathan = new Monkey(&quot;Nathan&quot;, nathanArt); Monkey rohit = new Monkey(&quot;Rohit&quot;, rohitArt); Monkey[] monkeys = {kurtis, nathan, rohit}; for (int i = 0; i&lt;monkeys.length; i++) { System.out.println(monkeys[i].name + &quot;: &quot;); monkeys[i].print(); } } } Monkey.main(null); . Kurtis: ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Nathan: ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Rohit: ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ . The first version of the code was an Imperative programming style. The second version was object oriented so I could have properties like monkey name along with the art. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/16/monkeys.html",
            "relUrl": "/java/2022/09/16/monkeys.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Vector Fields",
            "content": "Purpose . In other notebooks, I explore the use of 2D arrays. It was discussed that a 2D array could sometimes be replaced with a 1D array of objects. This is a use case where a 2D array is necessary, since I use a 2D array where each entry is an object. . Description . The 2D array here represents the cartesian coordinate system. Going across a column is like the x axis and going down a row is like the y axis. At each point, we have an object which represents a vector. The name for a configuration where each point in the plane is assigned a vector is called a vector field. . import java.lang.Math; // Defining the vector class. // Each entry of the 2D array is associated with an object of this class. public class VC { // Constructor for the 3 components of the vector public VC (float x, float y, float z) { this.i = x; this.j = y; this.k = z; } // Constructor if only 2 components are provided public VC (float x, float y) { this.i = x; this.j = y; this.k = 0f; } // floats representing each component of the vector public float i; public float j; public float k; // method which returns the magnitude of the vector public double Magnitude() { return Math.sqrt(Math.pow(this.i, 2) + Math.pow(this.j, 2) + Math.pow(this.k, 2)); } // method to print the components of the vector public void print() { System.out.println(&quot;Vector Components: &quot;); System.out.print(this.i + &quot; &quot;); System.out.print(this.j + &quot; &quot;); System.out.print(this.k + &quot; &quot;); } } . public class VectorField { // defining a 2D array // the type of the array is the VC class defined above VC[][] Cartesian2D; public static void main(String[] args) { // Calling the print method on the field created by the CreateField method VectorField field1 = new VectorField(); field1.print(field1.CreateField()); } // Tester method to create a vector field public VC[][] CreateField() { // Outside dimension is columns, or x. // Inside dimension is rows, or y return Cartesian2D = new VC[][] { {new VC(0,0), new VC(0,1), new VC(0,2)}, {new VC(1,0), new VC(1,1), new VC(1,2)}, {new VC(2,0), new VC(2,1), new VC(2,2)} }; } // method to print data in 2D array public void print(VC[][] field) { // Iterating through all the rows and columns for (int row = 0; row &lt; field.length; row ++) { for (int col = 0; col &lt; field[row].length; col++) { // Displaying the location, magnitude, and components of each vector. System.out.println(&quot;The Magnitude of the vector at &quot; + &quot;(&quot; + row + &quot;, &quot; + col + &quot;) is: &quot; + field[row][col].Magnitude()); field[row][col].print(); System.out.println(); System.out.println(); } } } } VectorField.main(null); . The Magnitude of the vector at (0, 0) is: 0.0 Vector Components: 0.0 0.0 0.0 The Magnitude of the vector at (0, 1) is: 1.0 Vector Components: 0.0 1.0 0.0 The Magnitude of the vector at (0, 2) is: 2.0 Vector Components: 0.0 2.0 0.0 The Magnitude of the vector at (1, 0) is: 1.0 Vector Components: 1.0 0.0 0.0 The Magnitude of the vector at (1, 1) is: 1.4142135623730951 Vector Components: 1.0 1.0 0.0 The Magnitude of the vector at (1, 2) is: 2.23606797749979 Vector Components: 1.0 2.0 0.0 The Magnitude of the vector at (2, 0) is: 2.0 Vector Components: 2.0 0.0 0.0 The Magnitude of the vector at (2, 1) is: 2.23606797749979 Vector Components: 2.0 1.0 0.0 The Magnitude of the vector at (2, 2) is: 2.8284271247461903 Vector Components: 2.0 2.0 0.0 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/14/VectorFields.html",
            "relUrl": "/java/2022/09/14/VectorFields.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "A Reflection on Computer Science",
            "content": "Sahil: Starting Out . Hey, I&#39;m Sahil Samar. I&#39;m currently a senior at Del Norte, in the graduating class of 2023. . My computer science journey started out in around 8th grade when I got interested in game development. But game development was a super hard thing to start with! Unity uses a language called C#, and I didn&#39;t have any idea how to use it. I didn&#39;t really understand the architecture of Unity or C# at first; I just kind of dove in and started making projects. I would look up what I didn&#39;t know, and just copy paste in code to get things working. Even this was hard, because when something went wrong I had no idea how to fix it. But with way too many hours, I was able to make some projects. It isn&#39;t easy to get started getting into coding! By the time I got to AP CSP, I still had a lot to learn about the coding mindset. . My very first game, 3D Pong . Sahil: AP CSP . When I got to AP CSP, I still didn&#39;t really have an idea of how coding worked. I just knew how to find code and paste it into my project. But slowly, I began moving away from this. I met Anthony Vo, who you just read a little bit about, in my first trimester. Whenever I didn&#39;t understand something, he would always help me out. He wouldn&#39;t give me code to copy paste though. He would actually explain the code to me, so I could do it myself. This was huge for me, since I actually began to think about my code and be able to develop things on my own. Mr. Mortensen guided me through countless problems, but everytime I asked him for help I walked away with some new understanding of how to debug my code. At the start of the trimester, I would go up to Mr. Mortensen or Anthony as soon as I had a problem. But by the end of the year, I only used them as a last resort, after I had truly tried everything. At that point, I just needed a pair of fresh eyes, and not someone to guide me through the whole process. Moral of the story: you aren&#39;t expected to come in an expert at coding! But, if you use your resources properly, you can use this year to grow. You can develop the mindset of a programmer and learn how to create cool projects and debug your issues when things don&#39;t work out. . Sahil: After AP CSP . AP CSP shaped me to be the coder I am today; but you only get out of it what you put into it. If you work hard, then it can completely change your mindset (if you are a new coder), and teach you plenty of skills. After AP CSP, I was able to land a summer internship working in CS at the San Diego Supercomputer Center. During this internship, I worked with huge supercomputers and began to understand what servers really were and how they worked. Our project was called ICICLE. If you want to learn more about it, you could watch this short video: https://www.youtube.com/watch?v=gNFk5tDTtoU. I developed sophisticated authentication methods, and did a lot of &quot;firsts&quot; in the project. I went from having to be guided through basic code in CSP to creating things that had never been done before. It&#39;s possible! After doing a lot of stuff behind the scenes, we got to test our system on massive knowledge graphs and run some machine learning algorithms. . Picture of one of the computers I worked with, called Expanse: . Knowledge Graph of Asteroids, classified using a neural network on being hazarous or not: . I also never gave up on making games! But now, I don&#39;t really need to follow tutorials anymore. I can architect a solution on my own, and when I do need to look something up I learn from it and implement it rather than just copying it. When something goes wrong, I&#39;m not stuck; I know what to do, and I have confidence because I know that every problem has a solution. Here&#39;s a peek at one of the games I&#39;m working on now: .",
            "url": "https://ad1616.github.io/ADfastpages/markdown/2022/09/11/CSreflecions.html",
            "relUrl": "/markdown/2022/09/11/CSreflecions.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Control Structures",
            "content": "What are control structures? . Control Structures control the flow of a program. They determine what and when segments of code are executed. . There are two types of control structures: conditionals and iteratatives. Conditionals consist of if/else statements, which execute a code segment based on if a condition has been met. In iteration, we mainly use for loops and while loops, which repeat the code segment inside of the loop until a certain condition has been met. . All control structures make heavy use of booleans and boolean expressions. . Using If, Else if, and Else with Boolean Expressions . An if statement will execute if a certain condition is true. If the condition is false, then the else if statement is executed. The point of an else if statement is to test out if a new condition is true, if the previous condition was false. An else statement is executed if all of the above the conditions were false. . import java.util.Scanner; public class GuessingGame { // Constructor for the class, assigining the target number to a value. public GuessingGame(int chosenTarget) { this.target = chosenTarget; } public int target; public static void main(String[] args) { // Creating a new game, where the target is 15. GuessingGame game = new GuessingGame(15); // 5 is too low. So when we guess 5, we expect the else if segment to be executed. game.guess(5); // 20 is too high. So when we guess 20, we expect the if segment to be executed. game.guess(20); // 15 is the right number. So, this should execute the else segment. game.guess(15); } // Method is called to perform a guess. public boolean guess(int guessedNumber) { // The statement inside of the parenthesis is called a boolean expression. // guessNumber &gt; target returns true if guessedNumber is bigger than the target, and false otherwise. if (guessedNumber &gt; target) { System.out.println(&quot;Your number is too high. &quot;); return false; } // If guessedNumber &gt; target was false, then the second condition is executed. // If guessedNumber is smaller than the target, the else if condition will be true, and the code segment will run. else if (guessedNumber &lt; target) { System.out.println(&quot;Your number is too low. &quot;); return false; } // If both of the above conditions were false, then that means that the guessedNumber and the target are the same. // We execute the below segment if that happens. else { System.out.println(&quot;Good job! You guessed the number. &quot;); return true; } } } GuessingGame.main(null); . Your number is too low. Your number is too high. Good job! You guessed the number. . Using Many Conditions and the Switch Case . Sometimes, there can be a long string of if/elseif/else statements. In general, these can often be simplified, but sometimes they are needed. One way to make that kind of code more readable is to use a switch case, which selects a code segment to be executed based on a certain input of case. This is useful when you have predefined cases, rather than boolean expressions. . public class HomeworkCategory { public int statsAssignments = 0; public int civicsAssignments = 0; public int linalgAssignments = 0; public int csaAssignments = 0; public int enmAssignments = 0; public void AddAssignment(int assignment) { // Based on an arbitary choice, each assignment corresponds to a number. // Based on the chosen number, an assignment is added. // Note that this could be much better represented with a dictionary, list, or hash map. // Use case would be in a Database, linking assignment category to ID. // For instructional purposes, this is largely hardcoded. The goal is to show how if statements work with multiple conditions. if (assignment == 0) { System.out.println(&quot;Added stats assignment. &quot;); statsAssignments += 1; } else if (assignment == 1) { System.out.println(&quot;Added civics assignment. &quot;); civicsAssignments += 1; } else if (assignment == 2) { System.out.println(&quot;Added linalg assignment. &quot;); linalgAssignments += 1; } else if (assignment == 3) { System.out.println(&quot;Added csa assignment. &quot;); csaAssignments += 1; } else { System.out.println(&quot;Added enm assignment. &quot;); enmAssignments += 1; } } public static void main(String[] args) { HomeworkCategory sahilHw = new HomeworkCategory(); // Adding assignments for different assignment ID&#39;s. sahilHw.AddAssignment(0); sahilHw.AddAssignment(0); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(3); sahilHw.AddAssignment(3); sahilHw.AddAssignment(4); // Displaying the assignments that I have. System.out.println(&quot;Final assignments tally: &quot;); System.out.println(&quot;Stats Assignments: &quot; + sahilHw.statsAssignments); System.out.println(&quot;Civics Assignments: &quot; + sahilHw.civicsAssignments); System.out.println(&quot;Linear Algebra Assignments: &quot; + sahilHw.linalgAssignments); System.out.println(&quot;CSA Assignments: &quot; + sahilHw.csaAssignments); System.out.println(&quot;ENM Assignments: &quot; + sahilHw.enmAssignments); } } HomeworkCategory.main(null); . Added stats assignment. Added stats assignment. Added linalg assignment. Added linalg assignment. Added linalg assignment. Added csa assignment. Added csa assignment. Added enm assignment. Final assignments tally: Stats Assignments: 2 Civics Assignments: 0 Linear Algebra Assignments: 3 CSA Assignments: 2 ENM Assignments: 1 . The above code definitely looks like it could use a better organizational pattern than a string of if/elseif/else. Below, I demonstrate how this can be refactored into a switch case. . Another note is that the switch-case has more value when the cases need to have completely different functionality associated with them. In my example, the switch-case makes the code more readable, but does not take advantage of this key tenet. However, to make the understanding of switch case as understandable as possible, a very simple example is used to show how it works. . public class HomeworkCategorySwitch { public int statsAssignments = 0; public int civicsAssignments = 0; public int linalgAssignments = 0; public int csaAssignments = 0; public int enmAssignments = 0; public void AddAssignment(int assignment) { // The switch statement takes an argument of what case to use. // Here, we pass in the integer assignment, so the cases will be different integers. switch(assignment) { // Based on the values of the integer assignment, different code segments are executed. case 0: // For the case the assignment is 0, this code segment is executed. System.out.println(&quot;Added stats assignment. &quot;); statsAssignments += 1; break; case 1: System.out.println(&quot;Added stats assignment. &quot;); statsAssignments += 1; break; case 2: System.out.println(&quot;Added linalg assignment. &quot;); linalgAssignments += 1; break; case 3: System.out.println(&quot;Added csa assignment. &quot;); csaAssignments += 1; break; case 4: System.out.println(&quot;Added enm assignment. &quot;); enmAssignments += 1; break; default: System.out.println(&quot;Not a valid assignment number.&quot;); break; } } public static void main(String[] args) { // Note that the output is exactly the same as the code when used without switch cases. HomeworkCategorySwitch sahilHw = new HomeworkCategorySwitch(); // Adding assignments for different assignment ID&#39;s. sahilHw.AddAssignment(0); sahilHw.AddAssignment(0); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(3); sahilHw.AddAssignment(3); sahilHw.AddAssignment(4); sahilHw.AddAssignment(10); // Displaying the assignments that I have. System.out.println(&quot;Final assignments tally: &quot;); System.out.println(&quot;Stats Assignments: &quot; + sahilHw.statsAssignments); System.out.println(&quot;Civics Assignments: &quot; + sahilHw.civicsAssignments); System.out.println(&quot;Linear Algebra Assignments: &quot; + sahilHw.linalgAssignments); System.out.println(&quot;CSA Assignments: &quot; + sahilHw.csaAssignments); System.out.println(&quot;ENM Assignments: &quot; + sahilHw.enmAssignments); } } HomeworkCategorySwitch.main(null); . Added stats assignment. Added stats assignment. Added linalg assignment. Added linalg assignment. Added linalg assignment. Added csa assignment. Added csa assignment. Added enm assignment. Not a valid assignment number. Final assignments tally: Stats Assignments: 2 Civics Assignments: 0 Linear Algebra Assignments: 3 CSA Assignments: 2 ENM Assignments: 1 . De Morgan&#39;s Law . De Morgan&#39;s Law deals with expressions in boolean algebra. This basically means using a bunch of boolean operators together. This can usually be simplified, and is only truely useful in very complex scenarios that depend on various boolean parameters. . public class DeMorganGeneric { public DeMorganGeneric (boolean bool1, boolean bool2, boolean bool3, boolean bool4) { this.firstParam = bool1; this.secondParam = bool2; this.thirdParam = bool3; this.fourthParam = bool4; } public boolean firstParam; public boolean secondParam; public boolean thirdParam; public boolean fourthParam; public void DeMorgan(DeMorganGeneric test) { // Example of De Morgan&#39;s Law. // Logic needs all of the following conditions to be true: // First and Second must both be different (ie false and true or true and false) // One of Third and Fourth must be true. // First must be true. if (!(test.firstParam &amp;&amp; test.secondParam) &amp;&amp; (test.thirdParam || test.fourthParam) &amp;&amp; test.firstParam == true) { System.out.println(&quot;Executed.&quot;); } else { System.out.println(&quot;Not executed. &quot;); } } public static void main(String[] args) { DeMorganGeneric testExecSuccess = new DeMorganGeneric(true, false, false, true); testExecSuccess.DeMorgan(testExecSuccess); // This breaks the first condition, as First and Second are both true. DeMorganGeneric testExecFail = new DeMorganGeneric(true, true, false, true); testExecFail.DeMorgan(testExecFail); } } DeMorganGeneric.main(null); . Executed. Not executed. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/07/ControlStructures.html",
            "relUrl": "/java/2022/09/07/ControlStructures.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Java Vectors",
            "content": "import java.util.ArrayList; public class Vectors { public Vectors() { } ArrayList&lt;Integer&gt; vector1 = new ArrayList&lt;Integer&gt;(); ArrayList&lt;Integer&gt; vector2 = new ArrayList&lt;Integer&gt;(); public ArrayList default1() { vector1.add(1); vector1.add(2); vector1.add(3); return vector1; } public ArrayList default2() { vector2.add(4); vector2.add(5); vector2.add(6); return vector2; } public void printVectorContent(ArrayList&lt;Integer&gt; v1) { for (int i : v1) { System.out.println(i); } } public int dot(ArrayList&lt;Integer&gt; v1, ArrayList&lt;Integer&gt; v2) { int product = 0; for (int i = 0; i &lt; v1.size(); i++) { product += v1.get(i) * v2.get(i); } return product; } public static void main(String[] args) { Vectors test = new Vectors(); System.out.println(&quot;Vector 1: &quot;); test.printVectorContent(test.default1()); System.out.println(&quot;Vector 2: &quot;); test.printVectorContent(test.default2()); System.out.println(&quot;Dot Product: &quot;); System.out.println(test.dot(test.vector1, test.vector2)); } } Vectors.main(null); . Vector 1: 1 2 3 Vector 2: 4 5 6 Dot Product: 32 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/05/Vectors.html",
            "relUrl": "/java/2022/09/05/Vectors.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Java Menu",
            "content": "Introduction . This is a java console menu containing a variety of applications. Some applications have dependencies upon other classes, which means that you should run the cell containing the class before running the menu. . import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Constructor on this Object takes control of menu events and actions public Menu() { this.print(); // print Menu Scanner sc = new Scanner(System.in); // using Java Scanner Object boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Coulomb Calculator&quot;); System.out.println(&quot;3 - Vectors Demo&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: System.out.println(&quot;Welcome to the Coulomb Calculator&quot;); Coulomb calc = new Coulomb(); break; case 3: Vectors vectorObject = new Vectors(); vectorObject.demo(vectorObject); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(&quot;&quot;); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Coulomb Calculator 3 - Vectors Demo 0 - Quit - 2 2: Welcome to the Coulomb Calculator Enter the first charge: 10 Enter the second charge: 8 Enter the distance between the charges: 7 The force between the two charges, by Coulomb&#39;s Law, is 1.4693877551020409E10 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. Yes Enter the first charge: 1 Enter the second charge: 9 Enter the distance between the charges: 2 The force between the two charges, by Coulomb&#39;s Law, is 2.025E10 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. No 3 3: Vector Class Demo: Vector 1: 1 2 3 Vector 2: 4 5 6 Dot Product: 32 0 0: Goodbye, World! . import java.util.ArrayList; public class Vectors { public Vectors() { } ArrayList&lt;Integer&gt; vector1 = new ArrayList&lt;Integer&gt;(); ArrayList&lt;Integer&gt; vector2 = new ArrayList&lt;Integer&gt;(); public ArrayList default1() { vector1.add(1); vector1.add(2); vector1.add(3); return vector1; } public ArrayList default2() { vector2.add(4); vector2.add(5); vector2.add(6); return vector2; } public void printVectorContent(ArrayList&lt;Integer&gt; v1) { for (int i : v1) { System.out.println(i); } } public int dot(ArrayList&lt;Integer&gt; v1, ArrayList&lt;Integer&gt; v2) { int product = 0; for (int i = 0; i &lt; v1.size(); i++) { product += v1.get(i) * v2.get(i); } return product; } public void demo(Vectors test) { System.out.println(&quot;Vector Class Demo: &quot;); System.out.println(&quot;Vector 1: &quot;); test.printVectorContent(test.default1()); System.out.println(&quot;Vector 2: &quot;); test.printVectorContent(test.default2()); System.out.println(&quot;Dot Product: &quot;); System.out.println(test.dot(test.vector1, test.vector2)); } public static void main(String[] args) { Vectors test = new Vectors(); test.demo(test); } } . import java.util.Scanner; import java.lang.Math; public class Coulomb { // Constructor with the enterValues method. public Coulomb () { this.enterValues(); } // Generally, charge values can be integers, since charge is quantized. // The distance can be a float, since it is often a decimal. // The force is a double due to the size of k. private double force; private int q1; private int q2; private float r; private static double k = 9 * Math.pow(10, 9); public static void main(String[] args) { } private void enterValues() { Scanner input; // 3 while loops with try-catch statements to make sure the correct datatype is inputted. while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the first charge: &quot;); try { q1 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } System.out.println(&quot;&quot;); while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the second charge: &quot;); try { q2 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } System.out.println(&quot;&quot;); while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the distance between the charges: &quot;); try { r = input.nextFloat(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not a float&quot; + e); } input.close(); } CalculateCoulomb(); System.out.println(&quot;The force between the two charges, by Coulomb&#39;s Law, is &quot; + force + &quot; Coulombs&quot;); // If the user wishes to continue, they can enter new values. If not, the program exits. if (moreCalc()) { enterValues(); } else { return; } } // The actual calculator. A simple formula called Coulomb&#39;s Law is employed. // The method itself is of type double, and outputs the force which is of double datatype. public double CalculateCoulomb() { force = (k * q1 * q2 / (Math.pow(r, 2))); return force; } // This method checks if the user wishes to do a new calculation. // The method is of type boolean, and outputs true if the user wants to enter new values, and false otherwise. public boolean moreCalc() { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Do you wish to continue? Type Yes to continue, or anything else to exit. &quot;); String chosen = input.nextLine(); // String is a class. Therefore, the object of the String class, chosen, has methods. // The .equals method is used to check if two strings are equivalent. if (chosen.equals(&quot;Yes&quot;)) { return true; } else { return false; } } } .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/05/JavaMenu.html",
            "relUrl": "/java/2022/09/05/JavaMenu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Java Objects and Inheritance",
            "content": "Introduction . This notebook goes over Objects and Inheritance. . The Superclass . Also called the parent class, this is the base class that child classes inherit properties from. The superclass in this example is a Person class. It has the properties of name and age. It has two methods, which are both getters, and one template method which is a CustomNumber method. . public class Person { public String name; public int age; public Person (String name, int age) { this.name = name; this.age = age; } public Person () { this.name = &quot;-1&quot;; this.age = -1; } public String GetName () { return this.name; } public int GetAge() { return this.age; } public int CustomNumber() { return 0; } } . The child class . Now we have a student class. A student is also a person, and therefore the student &quot;inherits&quot; from the person class. This concept is called inheritance, and is implemented in java through the &quot;extends&quot; keyword. What this means is that the student class, by default, will have the same properties as the Person class and the same methods. . But the student will have some more properties than a default person. So, we can add the proerties of grade and id. We can also give the template method, CustomNumber, functionality now. We do this by using the &quot;@Override&quot; keyword. This means that we can essentially redefine this method to do something different. Here, we return the id with this method. . As shown, all of the methods and properties of the Person class are still present. But there&#39;s now more methods and properties! . public class Student extends Person { public int grade; public int id; public Student (String name, int age, int grade, int id) { this.name = name; this.age = age; this.grade = grade; this.id = id; } public Student () { this.name = &quot;-1&quot;; this.age = -1; this.grade = -1; this.id = 0; } public int GetGrade() { return this.grade; } // Overriding the template method, CustomNumber @Override public int CustomNumber () { return this.id; } public static void main(String[] args) { // Creating an object of the Student class and assigning it properties. Student student1 = new Student(&quot;Sahil&quot;, 16, 12, 1234567); // Printing out values to show that all properties and methods are preserved from base class, and new ones are there from child class. System.out.println(student1.GetName()); System.out.println(student1.GetAge()); System.out.println(student1.GetGrade()); System.out.println(student1.CustomNumber()); } } Student.main(null); . Sahil 16 12 1234567 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/04/Objects+Inheritance.html",
            "relUrl": "/java/2022/09/04/Objects+Inheritance.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Java API",
            "content": "KPOP . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://k-pop.p.rapidapi.com/idols?q=Jungkook&amp;by=Stage%20Name&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;df17610e35msh51d75ac58fb44f9p14c5f0jsn7d95a150e08b&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;k-pop.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;status&#34;:&#34;success&#34;,&#34;message&#34;:&#34;Data fetched successfully&#34;,&#34;data&#34;:[{&#34;Profile&#34;:&#34;https://dbkpop.com/idol/jungkook-bts/&#34;,&#34;Stage Name&#34;:&#34;Jungkook&#34;,&#34;Full Name&#34;:&#34;Jeon Jungkook&#34;,&#34;Korean Name&#34;:&#34;전정국&#34;,&#34;K. Stage Name&#34;:&#34;정국&#34;,&#34;Date of Birth&#34;:&#34;1997-09-01&#34;,&#34;Group&#34;:&#34;BTS&#34;,&#34;Country&#34;:&#34;South Korea&#34;,&#34;Second Country&#34;:null,&#34;Height&#34;:&#34;178&#34;,&#34;Weight&#34;:&#34;66&#34;,&#34;Birthplace&#34;:&#34;Busan&#34;,&#34;Other Group&#34;:null,&#34;Former Group&#34;:null,&#34;Gender&#34;:&#34;M&#34;,&#34;Position&#34;:null,&#34;Instagram&#34;:null,&#34;Twitter&#34;:null}],&#34;count&#34;:1} . Cars . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://car-api2.p.rapidapi.com/api/models?sort=id&amp;direction=asc&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;df17610e35msh51d75ac58fb44f9p14c5f0jsn7d95a150e08b&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;car-api2.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;collection&#34;:{&#34;url&#34;:&#34; /api /models?sort=id u0026direction=asc&#34;,&#34;count&#34;:20,&#34;total&#34;:1158,&#34;pages&#34;:58,&#34;next&#34;:&#34; /api /models?page=2 u0026amp;sort=id u0026amp;direction=asc&#34;,&#34;prev&#34;:&#34;&#34;,&#34;first&#34;:&#34; /api /models?sort=id u0026direction=asc&#34;,&#34;last&#34;:&#34; /api /models?page=58 u0026amp;sort=id u0026amp;direction=asc&#34;},&#34;data&#34;:[{&#34;id&#34;:1,&#34;make_id&#34;:1,&#34;name&#34;:&#34;******* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:2,&#34;make_id&#34;:1,&#34;name&#34;:&#34;*** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:3,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:4,&#34;make_id&#34;:2,&#34;name&#34;:&#34;****** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:5,&#34;make_id&#34;:2,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:6,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:7,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:8,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:9,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:10,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:11,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******************* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:12,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:13,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******************* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:14,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******************** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:15,&#34;make_id&#34;:3,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:16,&#34;make_id&#34;:3,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:17,&#34;make_id&#34;:4,&#34;name&#34;:&#34;******* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:18,&#34;make_id&#34;:4,&#34;name&#34;:&#34;********* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:19,&#34;make_id&#34;:4,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:20,&#34;make_id&#34;:5,&#34;name&#34;:&#34;*** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;}]} . Purpose of API . An API allows for a website to make use of the data already out there on the internet. This can enrich a website without having to put together all of the data from scratch. . Backend Implementation . To be able to smoothly integrate an API with a nice frontend display of data, a backend is needed to interpret the JSON. . Additionally, many APIs, especially on sources like RAPIDAPI, limit the number of calls. A backend allows for a workaround of this, so data can be stored and refreshed once per day (instead of once per page load). .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/04/JavaAPI.html",
            "relUrl": "/java/2022/09/04/JavaAPI.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "Java Game",
            "content": "This blog shows up how to set up a basic game in Java! . Tools . Here we only use the built in Java libraries AWT and Swing. . Overview . We create 4 classes. One class contains the game loop, and manages the game. A game loop essentially runs every couple of miliseconds to update the game state. Another class contains the player controller, which is how you can move around and jump. One class draws the ground, and the other class is for the obstacle. . Setup . Create a new directory for all of the java files, so that they can be part of the same package. The reason that this isn&#39;t done in a Notebook is because the classes depend on each other, so individual cells containing classes won&#39;t be able to run. . Playing/Testing . Run the Game.java file. . The Game Class . // My package is called JavaCode package JavaCode; // Necessary imports import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.RenderingHints; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JOptionPane; // Inheriting from JPanel using extends JPanel // This way we can override the paint method. This is important so that the screen is cleared before it is repainted. Otherwise, we can&#39;t see movement! public class Game extends JPanel { // Instantiating the player (ball) Controller controller = new Controller(this); // Instantiating the ground Ground ground = new Ground(this); public Game() { // Adding key listener to constructor. // This allows for user input. addKeyListener(new KeyListener() { @Override public void keyTyped(KeyEvent e) { } @Override public void keyReleased(KeyEvent e) { controller.keyReleased(e); } @Override public void keyPressed(KeyEvent e) { controller.keyPressed(e); } }); setFocusable(true); } // Game loop, simply calling the method for the player to move. private void move() { controller.move(); } // Overriding the paint method. // Super.paint is needed since we repaint every 10 miliseconds. @Override public void paint(Graphics g) { super.paint(g); Graphics2D g2d = (Graphics2D) g; g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); // Painting the ground and the player. controller.paint(g2d); ground.paint(g2d); } // Simple Game Over screen public void gameOver() { JOptionPane.showMessageDialog(this, &quot;Game Over&quot;, &quot;Game Over&quot;, JOptionPane.YES_NO_OPTION); System.exit(ABORT); } // Creating the JFrame public static void main(String[] args) throws InterruptedException { JFrame frame = new JFrame(&quot;ADfastpages Game&quot;); // New Game Object Game game = new Game(); frame.add(game); frame.setSize(300, 400); frame.setVisible(true); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // The game loop. Causes the progression of things in the game. while (true) { game.move(); game.repaint(); // Things aren&#39;t updated every frame. They are updated every 10 ms. Thread.sleep(10); } } } . The Controller Class . package JavaCode; import java.awt.Graphics2D; import java.awt.event.KeyEvent; import java.awt.Rectangle; public class Controller { // x and y are used to locate the player in 2D space int x = 0; int y = 300; // vx and vy are used to move the player around in certain increments. int vx = 0; int vy = 1; // The dimensions of the player. These remain constant. // We need this for a hitbox. private static final int WIDTH = 30; private static final int HEIGHT = 30; private Game game; // Creating an obstacle object here. // We do it in this class since obstacles should spawn relative to the player. Obstacle obstacle = new Obstacle(game); public Controller(Game game) { // This object is instantiated in the game class, so that the controller can contain a reference to the game state. this.game= game; } // Method to move the player public void move() { // Making sure we move within the boundaries. if (x + vx &gt; 0 &amp;&amp; x + vx &lt; game.getWidth()-60) x = x + vx; if (y + vy &gt; 0 &amp;&amp; x + vy &lt; game.getHeight()-60) y = y + vy; // Detecting collision so that the game can end. // References the Game Over method contained in the game class. if (collisionObstacle()) { game.gameOver(); } // Implementing realistic ground. if (y &lt; game.getHeight() / 2) { if (collisionGround()) { vy = -1; } } else { // Stopping player if it hits the ground. if (collisionGround()) { vy = 0; } else { vy = 1; } } } // The paint method needs to paint both the player, as well as call the obstacle paint method to paint the obstacle. public void paint(Graphics2D g) { g.fillOval(x, y, WIDTH, HEIGHT); obstacle.paint(g, 100); } // Creating a hitbox for the player. public Rectangle getBounds() { return new Rectangle(x, y, WIDTH, HEIGHT); } // Making sure the player doesn&#39;t move without key being pressed. public void keyReleased(KeyEvent e) { vx = 0; } // Input movement public void keyPressed(KeyEvent e) { // A and D move the player side to side. if (e.getKeyCode() == KeyEvent.VK_A) vx = -2; if (e.getKeyCode() == KeyEvent.VK_D) vx = 2; // Jump functionality. if (vy == 0) { if (e.getKeyCode() == KeyEvent.VK_SPACE) do { y = y - 1; } while (y &gt; 250); vy = -1; } } // Method to detect collision with the ground. private boolean collisionGround() { return game.ground.getBounds().intersects(getBounds()); } // Separate method to detect collision with an obstacle. // Needed since collision with different things should cause different results. private boolean collisionObstacle() { return this.obstacle.getBounds().intersects(getBounds()); } } . The Obstacle Class . package JavaCode; import java.awt.Graphics2D; import java.awt.Rectangle; public class Obstacle { // Rererence to the game object. private Game game; // Dimensions for obstacle hitbox. private static final int WIDTH = 20; private static final int HEIGHT = 20; // Updating x position to spawn at. private int localx = 60; public Obstacle(Game game) { this.game= game; } // Paint method used to displat the ground. // Needs an input for the x position as well, since the obstacle shouldn&#39;t always spawn in the same place. public void paint(Graphics2D g, int x) { localx = x; g.fillRect(localx, 325, WIDTH, HEIGHT); } // Setting up a collider to detect collision. public Rectangle getBounds() { return new Rectangle(localx, 325, WIDTH, HEIGHT); } } . The Ground Class . package JavaCode; import java.awt.Graphics2D; import java.awt.Rectangle; public class Ground { // Rererence to the game object. private Game game; private static final int HEIGHT = 30; public Ground(Game game) { this.game= game; } // Paint method used to displat the ground. public void paint(Graphics2D g) { g.fillRect(0, game.getHeight() - 30, game.getWidth(), 30); } // Setting up a collider to detect collision. public Rectangle getBounds() { return new Rectangle(0, game.getHeight() - 30, game.getWidth(), HEIGHT); } } .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/03/JavaGame.html",
            "relUrl": "/java/2022/09/03/JavaGame.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Python Verify Environment",
            "content": "Introduction . In a bash jupyter kernel, you cannot take in input from the user. So, to verify installation of user inputted packages, this notebook utilizes os.system. . import os . package = input(&quot;Enter conda package: &quot;) command = &quot;conda list &quot; + str(package) os.system(command) . Enter conda package: jupyter # packages in environment at /Users/sahilsamar/opt/anaconda3/envs/myenv: # # Name Version Build Channel jupyter 1.0.0 py310hca03da5_8 jupyter_client 7.2.2 py310hca03da5_0 jupyter_console 6.4.3 pyhd3eb1b0_0 jupyter_core 4.10.0 py310hca03da5_0 jupyter_server 1.18.1 py310hca03da5_0 jupyterlab 3.4.4 py310hca03da5_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.12.0 py310hca03da5_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . 0 .",
            "url": "https://ad1616.github.io/ADfastpages/python/2022/08/25/pyVerifyEnvironment.html",
            "relUrl": "/python/2022/08/25/pyVerifyEnvironment.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Verify Environment",
            "content": "Introduction . This is a simple bash notebook to verify installations and versions of proper tools for development. . Taking in user input does not work in a bash notebook. As a result, the last cell of this notebook was replaced by another notebook that instead used python magic to verify installation of a user inputted conda package. . jupyter kernelspec list . Available kernels: bash /Users/sahilsamar/Library/Jupyter/kernels/bash java /Users/sahilsamar/Library/Jupyter/kernels/java javascript /Users/sahilsamar/Library/Jupyter/kernels/javascript python3 /Users/sahilsamar/opt/anaconda3/envs/myenv/share/jupyter/kernels/python3 . python --version python2 --version java --version conda --version . Python 3.10.5 Python 2.7.18 java 18.0.2 2022-07-19 Java(TM) SE Runtime Environment (build 18.0.2+9-61) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2+9-61, mixed mode, sharing) conda 4.13.0 . # cd ~/GithubRepositories/ADfastpages # bash searchConda.sh .",
            "url": "https://ad1616.github.io/ADfastpages/bash/2022/08/25/VerifyEnvironment.html",
            "relUrl": "/bash/2022/08/25/VerifyEnvironment.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Coulomb Calculator",
            "content": "Introduction . I used this notebook to make a Coulomb Law calculator using Java. The main goal of this was to gain an understanding of primitives. . I used integers, doubles, floats, and booleans, all of which were primitive data types. I also used strings, which are not primitive data types, and used one of the methods to demonstrate that the string was an object of the nonprimitive String class. . import java.util.Scanner; import java.lang.Math; System.out.println(&quot;Import Successful&quot;); . Import Successful . public class Coulomb { // Constructor with the enterValues method. public Coulomb () { this.enterValues(); } // Generally, charge values can be integers, since charge is quantized. // The distance can be a float, since it is often a decimal. // The force is a double due to the size of k. private double force; private int q1; private int q2; private float r; private static double k = 9 * Math.pow(10, 9); public static void main(String[] args) { // Creating an object of the Coulomb class. The constructor calls the enterValues method. Coulomb calc = new Coulomb(); } private void enterValues() { Scanner input; // 3 while loops with try-catch statements to make sure the correct datatype is inputted. while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the first charge: &quot;); try { q1 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the second charge: &quot;); try { q2 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the distance between the charges: &quot;); try { r = input.nextFloat(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not a float&quot; + e); } input.close(); } CalculateCoulomb(); System.out.println(&quot;The force between the two charges, by Coulomb&#39;s Law, is &quot; + force + &quot; Coulombs&quot;); // If the user wishes to continue, they can enter new values. If not, the program exits. if (moreCalc()) { enterValues(); } else { System.out.println(&quot;Exited.&quot;); return; } } // The actual calculator. A simple formula called Coulomb&#39;s Law is employed. // The method itself is of type double, and outputs the force which is of double datatype. public double CalculateCoulomb() { force = (k * q1 * q2 / (Math.pow(r, 2))); return force; } // This method checks if the user wishes to do a new calculation. // The method is of type boolean, and outputs true if the user wants to enter new values, and false otherwise. public boolean moreCalc() { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Do you wish to continue? Type Yes to continue, or anything else to exit. &quot;); String chosen = input.nextLine(); // String is a class. Therefore, the object of the String class, chosen, has methods. // The .equals method is used to check if two strings are equivalent. if (chosen.equals(&quot;Yes&quot;)) { return true; } else { return false; } } } Coulomb.main(null); . Enter the first charge: 5 Enter the second charge: 10 Enter the distance between the charges: 15 The force between the two charges, by Coulomb&#39;s Law, is 2.0E9 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. Yes Enter the first charge: 20 Enter the second charge: 25 Enter the distance between the charges: 30 The force between the two charges, by Coulomb&#39;s Law, is 5.0E9 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. no Exited. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/24/CoulombLaw.html",
            "relUrl": "/java/2022/08/24/CoulombLaw.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Java House",
            "content": "Description . This notebook contains a class which describes houses. . // Definition of class public class house { private int bedrooms; private int bathrooms; private int sqft; private float age; private String location; // Constructor called with no parameters. Different from class definition because it&#39;s missing the &quot;class&quot; keyword. public house() { // Constructor uses a non static setter method to assign the variable values of the class. this.setHouse(0, 0, 0, 0, &quot;-1&quot;); } // Constructor called when parameters are given in creation of the object. public house(int bedrooms, int bathrooms, int sqft, float age, String location) { this.setHouse(bedrooms, bathrooms, sqft, age, location); } // Non static setter method sets the values of the variables in the object. public void setHouse(int bedrooms, int bathrooms, int sqft, float age, String location) { this.bedrooms = bedrooms; this.bathrooms = bathrooms; this.sqft = sqft; this.age = age; this.location = location; } // Non static getter method returns the number of bedrooms in the house object. public int getter() { return this.bedrooms; } public static void main(String[] args) { // Creating two instances of the house class. house house1 = new house(); house house2 = new house(4, 4, 3000, 5, &quot;Zimbabwe&quot;); System.out.println(&quot;House 1 bedrooms: &quot; + house1.getter()); System.out.println(&quot;House 2 bedrooms: &quot; + house2.getter()); } } house.main(null); . House 1 bedrooms: 0 House 2 bedrooms: 4 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/21/JavaHouse.html",
            "relUrl": "/java/2022/08/21/JavaHouse.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Hello Bash Jupyter Kernel",
            "content": "ls . 2020-02-20-test.ipynb 2022-08-24-CoulombLaw.ipynb 2022-07-21-neo4j_intro.ipynb 2022-08-25-VerifyEnvironment.ipynb 2022-07-28-java_test.ipynb README.md 2022-08-19-JavaAnatomy.ipynb ghtop_images 2022-08-19-bash_test.ipynb my_icons 2022-08-21-JavaHouse.ipynb . cd ~ . ls . Applications JupyterNotebooks UnityProjects CustomApps Library miniforge3 Desktop Movies opt Documents Music tensorflow-env Downloads Pictures GithubRepositories Public .",
            "url": "https://ad1616.github.io/ADfastpages/bash/2022/08/19/bash_test.html",
            "relUrl": "/bash/2022/08/19/bash_test.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Java Anatomy",
            "content": "How does it work? . First, you need to create a class. The name of the class is sometimes called the definition or the header. The keyword at the start determines its access level. Inside of the class, you can create methods, which are like functions. A static method ensures that there is only one of them. The public keyword determines the access level of the method. Void just means that the method doesn&#39;t return anything. . We can then call this method without first instantiating the object, because the method was static. . // Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! . Constructors . A class can have a constructor. This is basically created with the syntax of excluding the &quot;class&quot; keyword. Inside the constructor, you can define and assign variables. Make sure that the variable is defined with an access level and a datatype before it is included in the constructor. . A getter is basically so that you can access variables with the private keyword from outside of the class. It is simply a public method that returns the value of a particular private variable. Note that this is not static, so an object of the class must be created to call this method. . // Define Class with Constructor returning Object public class HelloObject { private String hello; // instance attribute or variable public HelloObject() { // constructor hello = &quot;Hello, World!&quot;; } public String getHello() { // getter, returns value from inside the object return this.hello; // return String from object } public static void main(String[] args) { HelloObject ho = new HelloObject(); // Instance of Class (ho) is an Object via &quot;new HelloObject()&quot; System.out.println(ho.getHello()); // Object allows reference to public methods and data } } // IJava activation HelloObject.main(null); . Hello, World! . Multiple Objects and Constructors . The below class has two constructors. When a class object is created with no parameters, the first constructor is called. When a class object is created with a parameter, the second constructor is called. This allows for a user to access different functionalities of the program based not only on what the values are of the parameters they type but also on what parameters they actually choose to type. . This method also has a getter and a setter for the private hello string. . // Define Class public class HelloDynamic { // name the first letter of class as capitalized, note camel case // instance variable have access modifier (private is most common), data type, and name private String hello; // constructor signature 1, public and zero arguments, constructors do not have return type public HelloDynamic() { // 0 argument constructor this.setHello(&quot;Hello, World!&quot;); // using setter with static string } // constructor signature, public and one argument public HelloDynamic(String hello) { // 1 argument constructor this.setHello(hello); // using setter with local variable passed into constructor } // setter/mutator, setter have void return type and a parameter public void setHello(String hello) { // setter this.hello = hello; // instance variable on the left, local variable on the right } // getter/accessor, getter used to return private instance variable (encapsulated), return type is String public String getHello() { // getter return this.hello; } // public static void main(String[] args) is signature for main/drivers/tester method // a driver/tester method is singular or called a class method, it is never part of an object public static void main(String[] args) { HelloDynamic hd1 = new HelloDynamic(); // no argument constructor HelloDynamic hd2 = new HelloDynamic(&quot;Hello, Nighthawk Coding Society!&quot;); // one argument constructor System.out.println(hd1.getHello()); // accessing getter System.out.println(hd2.getHello()); } } // IJava activation HelloDynamic.main(null); . Hello, World! Hello, Nighthawk Coding Society! .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/19/JavaAnatomy.html",
            "relUrl": "/java/2022/08/19/JavaAnatomy.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Hello Java Jupyter Kernel",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! . System.out.println(&quot;hello&quot;) . hello .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/07/28/java_test.html",
            "relUrl": "/java/2022/07/28/java_test.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "First Post to ADfastpages",
            "content": "Welcome to this website! There will be many more posts in the future. . What is this? . This is a website that makes use of a tool called fastpages. This tool allows for easy creation of a website through the use of jupyter notebooks and markdown files. Everything is hosted using github pages. . There are two main things I will be using this website for: . Notebooks Posts . Code Snippets with descriptions | Simple markdown/html blogging | .",
            "url": "https://ad1616.github.io/ADfastpages/markdown/2022/07/28/first-post.html",
            "relUrl": "/markdown/2022/07/28/first-post.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "Neo4J Graph Database Introduction",
            "content": "Introduction . CS-Students is a sample knowledge graph that can be used to model any classroom that is relation based (a classroom that has lots of different people, pairs, groups, periods; things like that). This notebook is meant to demonstrate how to query this knowledge graph based on the preset things that are currently in the sample data. . Data . Currently, the data consists of the following categories (which are labels in Neo4J): . Period (most teachers would find it useful to have their data divided into class periods) . Scrum Team (basically, the largest overarching groups of students, under period) . Pairs (pairs of students within scrum teams) . Person (object that represents each student) . The data also has the following relationships . IN_PERIOD (to relate teams to the period they are in) . CROSSOVER (a relationship that exists to connect pairs of teams which work together) . PAIR_SHARE (relationship defining students who are paired together) . IN_GROUP (to relate people to the group they are in) . Setup in Anaconda . 1: Install Anaconda . 2: On windows, open the Anaconda command prompt. On mac, open the normal terminal. . 3: Run the following commands: . conda install jupyter . conda install py2neo . conda install pandas . conda install neo4jupyter . 4: If you haven&#39;t already, then clone this repository to a location that you can navigate to easily in your files. . 5: The commands above have configured your conda environment. Now, simply run the command . jupyter notebook . 6: This should open up something in the browser. You will see all of your files. Navigate to the directory which has the github repository clone. . 7: Then, navigate to this notebook. You should be able to run this notebook and experience all of its features now! . Setup in an IDE like VSCode . 1: In the IDE terminal, run the following commands: . pip install jupyter . pip install py2neo . pip install pandas . pip install neo4jupyter . 2: You&#39;re all set to run the notebook! . import pandas as pd import getpass from py2neo import Graph, Node, Relationship from py2neo import GraphService import neo4jupyter neo4jupyter.init_notebook_mode() . # The password is made private. password = getpass.getpass(prompt=&#39;Password: &#39;, stream=None) graph = Graph(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) # database gs = GraphService(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) . neo4jupyter.draw(graph, {&quot;PERSON&quot;: &quot;name&quot;}) . query = &quot;MATCH(n:SCRUM_TEAM) RETURN n.name AS TeamName, n.runtimelink AS RuntimeLink&quot; graph.run(query).to_data_frame() . TeamName RuntimeLink . 0 Team 1 | www.team1.com | . 1 Team 2 | www.team2.com | . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 1 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . Person Job . 0 Doug | Deployment Manager | . 1 Carl | Technical Officer | . 2 Bob | Design Manager | . 3 Alice | Scrum Master | . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 2 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . Person Job . 0 Henry | Design Manager | . 1 George | Technical Officer | . 2 Ferb | Deployment Manager | . 3 Eve | Scrum Master | . The following cells show how to do CRUD operations . You can do more than just query! To see your changes in effect, rerun the visualization in the third cell. . def CreatePerson(personName): tx = graph.begin() createdPerson = Node(&quot;PERSON&quot;, name = personName) tx.create(createdPerson) graph.commit(tx) def CreatePersonTester(): n = input(&quot;Enter a person name: &quot;) CreatePerson(n) # Run the CreatePersonTester function to try creating a node. You should be able to find your new node! CreatePersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. # In a real application, you need to have a way to query by unique ID def UpdateAPerson(personName, newName): graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; SET n.name= &quot;&quot; + str(newName) + &quot; &quot;&quot;) def UpdateAPersonTester(): o = str(input(&quot;Enter the name you want to change: &quot;)) n = str(input(&quot;Enter the new name: &quot;)) UpdateAPerson(o, n) # Try updating the node that you created in the last code block! UpdateAPersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. def DeleteAPerson(personName): node = graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; RETURN n&quot;) try: graph.delete(node) except: return def DeleteAPersonTester(): x = str(input(&quot;Enter a person name: &quot;)) DeleteAPerson(x) # You can try deleting the node that you created by simply entering the person name DeleteAPersonTester() .",
            "url": "https://ad1616.github.io/ADfastpages/python/2022/07/21/neo4j_intro.html",
            "relUrl": "/python/2022/07/21/neo4j_intro.html",
            "date": " • Jul 21, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ad1616.github.io/ADfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Helpful CB Things",
          "content": "Stuff for cb . docker docker docker . Unit 1: Primitive Types . Example Notebook with implementation of primitives . Unit 2: Using Objects . Linked below are notebooks demonstrating use of and explaining objects in Java. . Basic anatomy of java . Using objects through Coulomb Calculator code example . Many examples of objects in this basic Game example using Swing and AWT . Explaining objects and inheritance with basic code example .",
          "url": "https://ad1616.github.io/ADfastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "At the time of creating this site, I’m a senior at Del Norte High School. . What’s this for? . This site is part of my Computer Science A curriculum. But I might use it for something like a personal blog. .",
          "url": "https://ad1616.github.io/ADfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Focus and Habits",
          "content": "Reducing Stress . I believe that stress can be reduced by thinking about the goal of learning. By not worrying about points, automatically almost all of the stress is gone. Instead, I like to focus on what I take away from a class, rather than the points I earn in it. This way I am more motivated to learn, but I am less stressed. . Recounting things I’m grateful for . I’m grateful to be able to have the resources to learn CS. This includes a computer, a great teacher, a fun group, and opportunities to pursue CS outside of school. . My goals . My goal in Computer Science is just to build something that is useful to the world. Something that ends up being important to people, and helps people. That’s long term though. In the short term, I want to take as many opportunities as I can to advance my CS knowledge and to create cool things! . Collaboration . My group is a great example of collaboration, IMO. We work hard and have fun! .",
          "url": "https://ad1616.github.io/ADfastpages/focus/",
          "relUrl": "/focus/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "",
          "content": "Sahil’s (AD1616) Fastpages Site . . Hey, this is Sahil. Welcome to my website! . . Posts .",
          "url": "https://ad1616.github.io/ADfastpages/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sahil’s (AD1616) Fastpages Site . . Hey, this is Sahil. Welcome to my website! . . Posts .",
          "url": "https://ad1616.github.io/ADfastpages/page2/",
          "relUrl": "/page2/",
          "date": ""
      }
      
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ad1616.github.io/ADfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}