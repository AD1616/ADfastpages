{
  
    
        "post0": {
            "title": "Python Verify Environment",
            "content": "Introduction . In a bash jupyter kernel, you cannot take in input from the user. So, to verify installation of user inputted packages, this notebook utilizes os.system. . import os . package = input(&quot;Enter conda package: &quot;) command = &quot;conda list &quot; + str(package) os.system(command) . Enter conda package: jupyter # packages in environment at /Users/sahilsamar/opt/anaconda3/envs/myenv: # # Name Version Build Channel jupyter 1.0.0 py310hca03da5_8 jupyter_client 7.2.2 py310hca03da5_0 jupyter_console 6.4.3 pyhd3eb1b0_0 jupyter_core 4.10.0 py310hca03da5_0 jupyter_server 1.18.1 py310hca03da5_0 jupyterlab 3.4.4 py310hca03da5_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.12.0 py310hca03da5_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . 0 .",
            "url": "https://ad1616.github.io/ADfastpages/python/2022/08/29/pyVerifyEnvironment.html",
            "relUrl": "/python/2022/08/29/pyVerifyEnvironment.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Verify Environment",
            "content": "Introduction . This is a simple bash notebook to verify installations and versions of proper tools for development. . Taking in user input does not work in a bash notebook. As a result, the last cell of this notebook was replaced by another notebook that instead used python magic to verify installation of a user inputted conda package. . jupyter kernelspec list . Available kernels: bash /Users/sahilsamar/Library/Jupyter/kernels/bash java /Users/sahilsamar/Library/Jupyter/kernels/java javascript /Users/sahilsamar/Library/Jupyter/kernels/javascript python3 /Users/sahilsamar/opt/anaconda3/envs/myenv/share/jupyter/kernels/python3 . python --version python2 --version java --version conda --version . Python 3.10.5 Python 2.7.18 java 18.0.2 2022-07-19 Java(TM) SE Runtime Environment (build 18.0.2+9-61) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2+9-61, mixed mode, sharing) conda 4.13.0 . # cd ~/GithubRepositories/ADfastpages # bash searchConda.sh .",
            "url": "https://ad1616.github.io/ADfastpages/bash/2022/08/25/VerifyEnvironment.html",
            "relUrl": "/bash/2022/08/25/VerifyEnvironment.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Coulomb Calculator",
            "content": "Introduction . I used this notebook to make a Coulomb Law calculator using Java. The main goal of this was to gain an understanding of primitives. . I used integers, doubles, floats, and booleans, all of which were primitive data types. I also used strings, which are not primitive data types, and used one of the methods to demonstrate that the string was an object of the nonprimitive String class. . import java.util.Scanner; import java.lang.Math; System.out.println(&quot;Import Successful&quot;); . Import Successful . public class Coulomb { // Constructor with the enterValues method. public Coulomb () { this.enterValues(); } // Generally, charge values can be integers, since charge is quantized. // The distance can be a float, since it is often a decimal. // The force is a double due to the size of k. private double force; private int q1; private int q2; private float r; private static double k = 9 * Math.pow(10, 9); public static void main(String[] args) { // Creating an object of the Coulomb class. The constructor calls the enterValues method. Coulomb calc = new Coulomb(); } private void enterValues() { Scanner input; // 3 while loops with try-catch statements to make sure the correct datatype is inputted. while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the first charge: &quot;); try { q1 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the second charge: &quot;); try { q2 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the distance between the charges: &quot;); try { r = input.nextFloat(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not a float&quot; + e); } input.close(); } CalculateCoulomb(); System.out.println(&quot;The force between the two charges, by Coulomb&#39;s Law, is &quot; + force + &quot; Coulombs&quot;); // If the user wishes to continue, they can enter new values. If not, the program exits. if (moreCalc()) { enterValues(); } else { System.out.println(&quot;Exited.&quot;); return; } } // The actual calculator. A simple formula called Coulomb&#39;s Law is employed. // The method itself is of type double, and outputs the force which is of double datatype. public double CalculateCoulomb() { force = (k * q1 * q2 / (Math.pow(r, 2))); return force; } // This method checks if the user wishes to do a new calculation. // The method is of type boolean, and outputs true if the user wants to enter new values, and false otherwise. public boolean moreCalc() { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Do you wish to continue? Type Yes to continue, or anything else to exit. &quot;); String chosen = input.nextLine(); // String is a class. Therefore, the object of the String class, chosen, has methods. // The .equals method is used to check if two strings are equivalent. if (chosen.equals(&quot;Yes&quot;)) { return true; } else { return false; } } } Coulomb.main(null); . Enter the first charge: 5 Enter the second charge: 10 Enter the distance between the charges: 15 The force between the two charges, by Coulomb&#39;s Law, is 2.0E9 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. Yes Enter the first charge: 20 Enter the second charge: 25 Enter the distance between the charges: 30 The force between the two charges, by Coulomb&#39;s Law, is 5.0E9 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. no Exited. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/24/CoulombLaw.html",
            "relUrl": "/java/2022/08/24/CoulombLaw.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Java House",
            "content": "Description . This notebook contains a class which describes houses. . // Definition of class public class house { private int bedrooms; private int bathrooms; private int sqft; private float age; private String location; // Constructor called with no parameters. Different from class definition because it&#39;s missing the &quot;class&quot; keyword. public house() { // Constructor uses a non static setter method to assign the variable values of the class. this.setHouse(0, 0, 0, 0, &quot;-1&quot;); } // Constructor called when parameters are given in creation of the object. public house(int bedrooms, int bathrooms, int sqft, float age, String location) { this.setHouse(bedrooms, bathrooms, sqft, age, location); } // Non static setter method sets the values of the variables in the object. public void setHouse(int bedrooms, int bathrooms, int sqft, float age, String location) { this.bedrooms = bedrooms; this.bathrooms = bathrooms; this.sqft = sqft; this.age = age; this.location = location; } // Non static getter method returns the number of bedrooms in the house object. public int getter() { return this.bedrooms; } public static void main(String[] args) { // Creating two instances of the house class. house house1 = new house(); house house2 = new house(4, 4, 3000, 5, &quot;Zimbabwe&quot;); System.out.println(&quot;House 1 bedrooms: &quot; + house1.getter()); System.out.println(&quot;House 2 bedrooms: &quot; + house2.getter()); } } house.main(null); . House 1 bedrooms: 0 House 2 bedrooms: 4 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/21/JavaHouse.html",
            "relUrl": "/java/2022/08/21/JavaHouse.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Hello Bash Jupyter Kernel",
            "content": "ls . 2020-02-20-test.ipynb 2022-08-24-CoulombLaw.ipynb 2022-07-21-neo4j_intro.ipynb 2022-08-25-VerifyEnvironment.ipynb 2022-07-28-java_test.ipynb README.md 2022-08-19-JavaAnatomy.ipynb ghtop_images 2022-08-19-bash_test.ipynb my_icons 2022-08-21-JavaHouse.ipynb . cd ~ . ls . Applications JupyterNotebooks UnityProjects CustomApps Library miniforge3 Desktop Movies opt Documents Music tensorflow-env Downloads Pictures GithubRepositories Public .",
            "url": "https://ad1616.github.io/ADfastpages/bash/2022/08/19/bash_test.html",
            "relUrl": "/bash/2022/08/19/bash_test.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Java Anatomy",
            "content": "How does it work? . First, you need to create a class. The name of the class is sometimes called the definition or the header. The keyword at the start determines its access level. Inside of the class, you can create methods, which are like functions. A static method ensures that there is only one of them. The public keyword determines the access level of the method. Void just means that the method doesn&#39;t return anything. . We can then call this method without first instantiating the object, because the method was static. . // Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! . Constructors . A class can have a constructor. This is basically created with the syntax of excluding the &quot;class&quot; keyword. Inside the constructor, you can define and assign variables. Make sure that the variable is defined with an access level and a datatype before it is included in the constructor. . A getter is basically so that you can access variables with the private keyword from outside of the class. It is simply a public method that returns the value of a particular private variable. Note that this is not static, so an object of the class must be created to call this method. . // Define Class with Constructor returning Object public class HelloObject { private String hello; // instance attribute or variable public HelloObject() { // constructor hello = &quot;Hello, World!&quot;; } public String getHello() { // getter, returns value from inside the object return this.hello; // return String from object } public static void main(String[] args) { HelloObject ho = new HelloObject(); // Instance of Class (ho) is an Object via &quot;new HelloObject()&quot; System.out.println(ho.getHello()); // Object allows reference to public methods and data } } // IJava activation HelloObject.main(null); . Hello, World! . Multiple Objects and Constructors . The below class has two constructors. When a class object is created with no parameters, the first constructor is called. When a class object is created with a parameter, the second constructor is called. This allows for a user to access different functionalities of the program based not only on what the values are of the parameters they type but also on what parameters they actually choose to type. . This method also has a getter and a setter for the private hello string. . // Define Class public class HelloDynamic { // name the first letter of class as capitalized, note camel case // instance variable have access modifier (private is most common), data type, and name private String hello; // constructor signature 1, public and zero arguments, constructors do not have return type public HelloDynamic() { // 0 argument constructor this.setHello(&quot;Hello, World!&quot;); // using setter with static string } // constructor signature, public and one argument public HelloDynamic(String hello) { // 1 argument constructor this.setHello(hello); // using setter with local variable passed into constructor } // setter/mutator, setter have void return type and a parameter public void setHello(String hello) { // setter this.hello = hello; // instance variable on the left, local variable on the right } // getter/accessor, getter used to return private instance variable (encapsulated), return type is String public String getHello() { // getter return this.hello; } // public static void main(String[] args) is signature for main/drivers/tester method // a driver/tester method is singular or called a class method, it is never part of an object public static void main(String[] args) { HelloDynamic hd1 = new HelloDynamic(); // no argument constructor HelloDynamic hd2 = new HelloDynamic(&quot;Hello, Nighthawk Coding Society!&quot;); // one argument constructor System.out.println(hd1.getHello()); // accessing getter System.out.println(hd2.getHello()); } } // IJava activation HelloDynamic.main(null); . Hello, World! Hello, Nighthawk Coding Society! .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/19/JavaAnatomy.html",
            "relUrl": "/java/2022/08/19/JavaAnatomy.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Hello Java Jupyter Kernel",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! . System.out.println(&quot;hello&quot;) . hello .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/07/28/java_test.html",
            "relUrl": "/java/2022/07/28/java_test.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "First Post to ADfastpages",
            "content": "Welcome to this website! There will be many more posts in the future. . What is this? . This is a website that makes use of a tool called fastpages. This tool allows for easy creation of a website through the use of jupyter notebooks and markdown files. Everything is hosted using github pages. . There are two main things I will be using this website for: . Notebooks Posts . Code Snippets with descriptions | Simple markdown/html blogging | .",
            "url": "https://ad1616.github.io/ADfastpages/markdown/2022/07/28/first-post.html",
            "relUrl": "/markdown/2022/07/28/first-post.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post8": {
            "title": "Neo4J Graph Database Introduction",
            "content": "Introduction . CS-Students is a sample knowledge graph that can be used to model any classroom that is relation based (a classroom that has lots of different people, pairs, groups, periods; things like that). This notebook is meant to demonstrate how to query this knowledge graph based on the preset things that are currently in the sample data. . Data . Currently, the data consists of the following categories (which are labels in Neo4J): . Period (most teachers would find it useful to have their data divided into class periods) . Scrum Team (basically, the largest overarching groups of students, under period) . Pairs (pairs of students within scrum teams) . Person (object that represents each student) . The data also has the following relationships . IN_PERIOD (to relate teams to the period they are in) . CROSSOVER (a relationship that exists to connect pairs of teams which work together) . PAIR_SHARE (relationship defining students who are paired together) . IN_GROUP (to relate people to the group they are in) . Setup in Anaconda . 1: Install Anaconda . 2: On windows, open the Anaconda command prompt. On mac, open the normal terminal. . 3: Run the following commands: . conda install jupyter . conda install py2neo . conda install pandas . conda install neo4jupyter . 4: If you haven&#39;t already, then clone this repository to a location that you can navigate to easily in your files. . 5: The commands above have configured your conda environment. Now, simply run the command . jupyter notebook . 6: This should open up something in the browser. You will see all of your files. Navigate to the directory which has the github repository clone. . 7: Then, navigate to this notebook. You should be able to run this notebook and experience all of its features now! . Setup in an IDE like VSCode . 1: In the IDE terminal, run the following commands: . pip install jupyter . pip install py2neo . pip install pandas . pip install neo4jupyter . 2: You&#39;re all set to run the notebook! . import pandas as pd import getpass from py2neo import Graph, Node, Relationship from py2neo import GraphService import neo4jupyter neo4jupyter.init_notebook_mode() . # The password is made private. password = getpass.getpass(prompt=&#39;Password: &#39;, stream=None) graph = Graph(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) # database gs = GraphService(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) . neo4jupyter.draw(graph, {&quot;PERSON&quot;: &quot;name&quot;}) . query = &quot;MATCH(n:SCRUM_TEAM) RETURN n.name AS TeamName, n.runtimelink AS RuntimeLink&quot; graph.run(query).to_data_frame() . TeamName RuntimeLink . 0 Team 1 | www.team1.com | . 1 Team 2 | www.team2.com | . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 1 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . Person Job . 0 Doug | Deployment Manager | . 1 Carl | Technical Officer | . 2 Bob | Design Manager | . 3 Alice | Scrum Master | . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 2 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . Person Job . 0 Henry | Design Manager | . 1 George | Technical Officer | . 2 Ferb | Deployment Manager | . 3 Eve | Scrum Master | . The following cells show how to do CRUD operations . You can do more than just query! To see your changes in effect, rerun the visualization in the third cell. . def CreatePerson(personName): tx = graph.begin() createdPerson = Node(&quot;PERSON&quot;, name = personName) tx.create(createdPerson) graph.commit(tx) def CreatePersonTester(): n = input(&quot;Enter a person name: &quot;) CreatePerson(n) # Run the CreatePersonTester function to try creating a node. You should be able to find your new node! CreatePersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. # In a real application, you need to have a way to query by unique ID def UpdateAPerson(personName, newName): graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; SET n.name= &quot;&quot; + str(newName) + &quot; &quot;&quot;) def UpdateAPersonTester(): o = str(input(&quot;Enter the name you want to change: &quot;)) n = str(input(&quot;Enter the new name: &quot;)) UpdateAPerson(o, n) # Try updating the node that you created in the last code block! UpdateAPersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. def DeleteAPerson(personName): node = graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; RETURN n&quot;) try: graph.delete(node) except: return def DeleteAPersonTester(): x = str(input(&quot;Enter a person name: &quot;)) DeleteAPerson(x) # You can try deleting the node that you created by simply entering the person name DeleteAPersonTester() .",
            "url": "https://ad1616.github.io/ADfastpages/python/2022/07/21/neo4j_intro.html",
            "relUrl": "/python/2022/07/21/neo4j_intro.html",
            "date": " • Jul 21, 2022"
        }
        
    
  
    
        ,"post9": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ad1616.github.io/ADfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Helpful CB Things",
          "content": "Stuff for cb . Unit 1: Primitive Types . Example Notebook .",
          "url": "https://ad1616.github.io/ADfastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "At the time of creating this site, I’m a senior at Del Norte High School. . What’s this for? . This site is part of my Computer Science A curriculum. But I might use it for something like a personal blog. .",
          "url": "https://ad1616.github.io/ADfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "",
          "content": "Sahil’s (AD1616) Fastpages Site . . Hey, this is Sahil. Welcome to my website! . . Posts .",
          "url": "https://ad1616.github.io/ADfastpages/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ad1616.github.io/ADfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}