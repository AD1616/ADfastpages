{
  
    
        "post0": {
            "title": "Graphs",
            "content": "Definitions . Graph - A set of vertices connected pairwise by edges. A vertex is a point on a graph where multiple edges meet | There has to be a vertice on either end of the edge | . | Loop - An edge that starts and ends at same vertex | . . Path - A sequence of vertices connected by edges. Two vertices are called connected if there is a path between them. | Cycle - A path that starts and ends at the same vertex. | . Types of graphs . Undirected graphs are graphs whose edges don’t have direction, and can to both ways | Directed graphs are graphs whose edges have a direction | . . Ex. social media (who follows who; directed), road networks (which roads connect to which other roads; undirected), etc. . Unweighted graphs are graphs whose edges have no value attached to them. Weighted graphs are graphs whose edges have a value. The value on each edge is called its weight. | . . Ex. cost of a flight ticket, distance between two cities, etc. . Graph API . We will explore how to actually model a graph using Java. . Bag . First, we must define a Bag class. This is a simple data structure where items can be added and you can iterate through the items. The syntax is not as important as the concept. . // from https://algs4.cs.princeton.edu/13stacks/Bag.java.html import java.util.Iterator; import java.util.NoSuchElementException; public class Bag&lt;Item&gt; implements Iterable&lt;Item&gt; { private Node&lt;Item&gt; first; private int n; private static class Node&lt;Item&gt; { private Item item; private Node&lt;Item&gt; next; } public Bag() { first = null; n = 0; } public boolean isEmpty() { return first == null; } public int size() { return n; } public void add(Item item) { Node&lt;Item&gt; oldfirst = first; first = new Node&lt;Item&gt;(); first.item = item; first.next = oldfirst; n++; } public Iterator&lt;Item&gt; iterator() { return new LinkedIterator(first); } private class LinkedIterator implements Iterator&lt;Item&gt; { private Node&lt;Item&gt; current; public LinkedIterator(Node&lt;Item&gt; first) { current = first; } public boolean hasNext() { return current != null; } public Item next() { if (!hasNext()) throw new NoSuchElementException(); Item item = current.item; current = current.next; return item; } } } . Graph . This is the class containing the necessary properties and methods to implement a graph. . How can you represent a graph using code? Instead of purely trying to visualize it, it&#39;s easier to think of what a graph is at its core: a collection of vertices and edges. Furthermore, an edge can be defined by the 2 vertices that it connects. . There are a few ways to represent a graph. We will be using the adjacency list representation. First, we create a simple list of length V, where V is the number of vertices in the graph. This list represents all of the vertices in the graph: the index of 0 represents vertex 0, for example. . How do we account for edges? The way we do this in this representation is that each index of the list of vertices contains a bag of integers. This bag contains all of the vertices that the vertex at that index is connected to. . . import java.util.NoSuchElementException; public class Graph { private static final String NEWLINE = System.getProperty(&quot;line.separator&quot;); // The total number of vertices private final int V; // The total number of edges private int E; // declaring an array of bags private Bag&lt;Integer&gt;[] adj; // Graph constructor must include number of vertices public Graph(int V) { if (V &lt; 0) throw new IllegalArgumentException(&quot;Number of vertices must be non-negative&quot;); this.V = V; // must add all edges after the vertices are initialized this.E = 0; // casting is required here. We initialize the array of bags. adj = (Bag&lt;Integer&gt;[]) new Bag[V]; // next, we initialize the bag at each index of the array for (int v = 0; v &lt; V; v++) { adj[v] = new Bag&lt;Integer&gt;(); } } // get # of vertices public int V() { return V; } // get # of edges public int E() { return E; } // error checking method private void validateVertex(int v) { if (v &lt; 0 || v &gt;= V) throw new IllegalArgumentException(&quot;vertex &quot; + v + &quot; is not between 0 and &quot; + (V-1)); } // method to add an edge. // To define an edge we need two vertices. // To implement it, we need to make sure v and w both know they are connected. // Index v of the adjacency list represents vertex v. The bag at this index contains // all of the vertices that index v shares an edge with. Therefore, we just have to add // vertex w to this bag. We must also do the same for vertex w; meaning, we add v to // the bag at vertex w public void addEdge(int v, int w) { validateVertex(v); validateVertex(w); E++; adj[v].add(w); adj[w].add(v); } public Iterable&lt;Integer&gt; adj(int v) { validateVertex(v); return adj[v]; } public int degree(int v) { validateVertex(v); return adj[v].size(); } public String toString() { StringBuilder s = new StringBuilder(); s.append(V + &quot; vertices, &quot; + E + &quot; edges &quot; + NEWLINE); for (int v = 0; v &lt; V; v++) { s.append(v + &quot;: &quot;); for (int w : adj[v]) { s.append(w + &quot; &quot;); } s.append(NEWLINE); } return s.toString(); } public static void main(String[] args) { // Example of how to initialize a graph. Graph G = new Graph(7); G.addEdge(0, 1); G.addEdge(0, 2); G.addEdge(0, 6); G.addEdge(0, 5); G.addEdge(6, 4); G.addEdge(4, 3); G.addEdge(4, 5); G.addEdge(3, 5); System.out.println(G); } } Graph.main(null); . 7 vertices, 8 edges 0: 5 6 2 1 1: 0 2: 0 3: 5 4 4: 5 3 6 5: 3 4 0 6: 4 0 . Note that the output from the above tester method initializes the graph pictured above the class. . Depth First Search . One method to search all of the vertices and edges in a connected graph. Start at a random vertex and mark it. Then, go to any vertex connected to the starting vertex and mark it. Continue to do this until you have explored all vertices along this path. Then, retrace back one step, and see if you can explore any other vertices. Continue to do this until you get back to the root. Then do the same thing again. It is called depth first search because you fully explore the entire root of a node first, before moving on. . public class DepthFirstSearch { private boolean[] marked; private int count; public DepthFirstSearch(Graph G, int s) { marked = new boolean[G.V()]; validateVertex(s); dfs(G, s); } private void dfs(Graph G, int v) { count++; marked[v] = true; for (int w : G.adj(v)) { if (!marked[w]) { dfs(G, w); } } } public boolean marked(int v) { validateVertex(v); return marked[v]; } public int count() { return count; } private void validateVertex(int v) { int V = marked.length; if (v &lt; 0 || v &gt;= V) throw new IllegalArgumentException(&quot;vertex &quot; + v + &quot; is not between 0 and &quot; + (V-1)); } public static void main(String[] args) { Graph G = new Graph(7); G.addEdge(0, 1); G.addEdge(0, 2); G.addEdge(0, 6); G.addEdge(0, 5); G.addEdge(6, 4); G.addEdge(4, 3); G.addEdge(4, 5); G.addEdge(3, 5); int s = 0; DepthFirstSearch search = new DepthFirstSearch(G, s); for (int v = 0; v &lt; G.V(); v++) { if (search.marked(v)) System.out.print(v + &quot; &quot;); } System.out.println(); if (search.count() != G.V()) { System.out.println(&quot;NOT connected&quot;); } else { System.out.println(&quot;connected&quot;); } } } DepthFirstSearch.main(null); . 0 1 2 3 4 5 6 connected . Breadth First Search . BFS can be implemented using Queues. We start at a random vertex and mark it. Then, we add all of the vertices connected to it to the queue. Then, we dequeue the first vertex in the queue and mark it. Then, we add all of the vertices connected to it to the queue. We continue to do this until the queue is empty. . import java.util.*; public class BFS { static final int N = 100000 + 1; // define max nodes static List&lt;Integer&gt; adjList[] = new ArrayList[N]; // adj list is array of lists static boolean visited[] = new boolean[N]; static Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;(); static void bfs(int node) { visited[node] = true; q.add(node); while (!q.isEmpty()) { node = q.poll(); System.out.print(node + &quot; &quot;); // process node for (int next : adjList[node]) { if (!visited[next]) { visited[next] = true; q.add(next); } } } } public static void main(String[] args) { for (int i = 0; i &lt; N; i++) { adjList[i] = new ArrayList&lt;&gt;(); } adjList[0].add(1); adjList[0].add(2); adjList[1].add(2); adjList[2].add(0); adjList[2].add(3); bfs(2); // start from node 2 } } BFS.main(null); . 2 0 3 1 . Databases using graphs . One popular database that utilizes graphs is called Neo4j. I used this while working at the San Diego Supercomputer Center for various kinds of data that could be represented well using graphs. . Here&#39;s an example of how this could be used in relation to something simple like forming CSA groups: . . As you can see, we have a great visualization of nodes and edges(relationships) using this. Also, we can store as many properties as we want within each node and edge. Additionally, we can give nodes and edges labels, which we can then query against using the Cypher query language. The simplest cypher query is pictured, where MATCH(n) RETURN n returns all nodes and edges in the database. . Another example is using graphs to represent molecules: . .",
            "url": "https://ad1616.github.io/ADfastpages/tri3/2023/05/19/Graphs.html",
            "relUrl": "/tri3/2023/05/19/Graphs.html",
            "date": " • May 19, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "Arrays, 2D Arrays, and ArrayLists",
            "content": "If you&#39;d like, you can follow along with the lessons at this link. . 2D arrays and Arrays | ArrayLists | . Clone this repo (git clone https://github.com/Rebecca-123/rmr-tri3) and work on the hacks below. You can transfer these hacks to your personal fastpages once you&#39;re finished. . ArrayList Hacks . Hack 1 . public class Turtle { private String name; public Turtle(String name) { this.name = name; } public static void main(String[] args) { ArrayList&lt;Boolean&gt; boolArr = new ArrayList&lt;Boolean&gt;(); ArrayList&lt;Turtle&gt; turtles = new ArrayList&lt;Turtle&gt;(); ArrayList&lt;String&gt; strings = new ArrayList&lt;String&gt;(); for (int i = 0; i&lt;10; i++) { strings.add(&quot;xdd&quot;); } System.out.println(strings.toString()); } } Turtle.main(null); . [xdd, xdd, xdd, xdd, xdd, xdd, xdd, xdd, xdd, xdd] . Hack 2 . Choose 3 different methods from above to change around this sample ArrayList: . import java.util.ArrayList; public class Hack2 { public static void main(Integer[] args) { ArrayList&lt;Integer&gt; randomNumbers = new ArrayList&lt;Integer&gt;(); randomNumbers.add(1); randomNumbers.add(4); randomNumbers.add(7); randomNumbers.add(12); randomNumbers.add(23); System.out.println(&quot;ArrayList: &quot; + randomNumbers); randomNumbers.remove(0); randomNumbers.add(10); randomNumbers.set(0, 7); System.out.println(&quot;ArrayList: &quot; + randomNumbers); } } Hack2.main(null); . ArrayList: [1, 4, 7, 12, 23] ArrayList: [7, 7, 12, 23, 10] . Hack 3 . Here is some sample code for the total sum of integers. Finish the loop! . public class Hack3 { public static void main(String[] args) { ArrayList&lt;Integer&gt; values = new ArrayList&lt;Integer&gt;(); values.add(1); values.add(4); values.add(7); values.add(12); values.add(23); System.out.println(&quot;ArrayList: &quot; + values); int total = 0; for (int i=0; i &lt; values.size(); i++) { total += values.get(i); } System.out.println(&quot;total: &quot; + total); } } Hack3.main(null); . ArrayList: [1, 4, 7, 12, 23] total: 47 . Hack 4 . Complete the Selection sort sample code by writing code for a swap of elements. . int[] arr = {1, 5, 3, 4, 2}; for (int i = 0; i &lt; arr.length; i++) { // nested loop 1 index ahead for (int j = i + 1; j &lt; arr.length; j++) { // comparing elements int temp = 0; if (arr[j] &lt; arr[i]) { temp = arr[j]; arr[j] = arr[i]; arr[i] = temp; } } // Printing sorted array System.out.print(arr[i] + &quot; &quot;); } . 1 2 3 4 5 . Array and 2D Array Hacks . Hack 5 . Make an array and iterate through it to only print the elements with even indexes (this includes 0). Then iterate through it again to only print the odd indexes. . int[] arr = {1, 2, 3, 4, 5}; for (int i = 0; i &lt; arr.length; i++) { if (i % 2 == 0) { System.out.print(arr[i] + &quot; &quot;); } } System.out.println(); for (int i = 0; i &lt; arr.length; i++) { if (i % 2 != 0) { System.out.print(arr[i] + &quot; &quot;); } } . 1 3 5 2 4 . Hack 6 . Create a 2D array and iterate through it to print all of its elements. . int[][] arr = {{1, 2, 3}, {4, 5, 6}}; for (int row = 0; row &lt; arr.length; row++) { for (int col = 0; col &lt; arr[0].length; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(); } . 1 2 3 4 5 6 . Homework! . Write a seating chart program for your group. Meet the following requirements: . A 2D array, array, or ArrayList | A minimum of 3 methods to manipulate the seating chart (ex. alphabetize, shuffle seats, add/replace/delete people) | Print results | . You will be graded on: . Completion of at least 5 of the above hacks (you can complete these during the in-class activity) | Completion of the homework | Extra credit if you complete a College Board FRQ involving arrays/ArrayLists | . Complete the hacks/homework on your personal fastpages. . import java.util.ArrayList; public class Seating { public ArrayList&lt;String&gt; chart; public Seating() { chart = new ArrayList&lt;String&gt;(); } public void add (String name) { chart.add(name); } public void replace (int index, String newName) { chart.set(index, newName); } public void alphabetize() { int length = chart.size(); for (int i = 0; i&lt;length - 1; i++) { for (int j = i + 1; j &lt; length; j++) { if (chart.get(i).compareTo(chart.get(j)) &gt; 0) { String temp = chart.get(j); chart.set(j, chart.get(i)); chart.set(i, temp); } } } } public void print() { int length = chart.size(); for (int i = 0; i &lt; length; i++) { System.out.println(chart.get(i) + &quot; &quot;); } } public static void main (String[] args) { Seating seating = new Seating(); seating.add(&quot;Sahil&quot;); seating.add(&quot;Samuel&quot;); seating.add(&quot;Everitt&quot;); seating.print(); seating.replace(0, &quot;Nathan&quot;); System.out.println(); seating.print(); seating.alphabetize(); System.out.println(); seating.print(); } } Seating.main(null); . Sahil Samuel Everitt Nathan Samuel Everitt Everitt Nathan Samuel .",
            "url": "https://ad1616.github.io/ADfastpages/jupyter/2023/04/18/lesson.html",
            "relUrl": "/jupyter/2023/04/18/lesson.html",
            "date": " • Apr 18, 2023"
        }
        
    
  
    
        ,"post2": {
            "title": "Stack Implementation",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class ConsoleMethods { //Method to make sure no database is available in the //input stream private static void inputFlush() { try { while (System.in.available() != 0) { } } catch (java.io.IOException e) { System.out.println(&quot;Input error&quot;); } } public static void printChar(char txt) { System.out.print(txt); } public static void clearScreen() { printChar(&#39; u000C&#39;); } public static void print(String txt) { System.out.print(txt); } public static void println() { System.out.println(&quot; n&quot;); } public static void println(String txt) { System.out.println(txt); } public static void println(Object obj) { System.out.println(obj); } public static void printPrompt(String prompt) { print(prompt + &quot; &quot;); System.out.flush(); } public static String inputString(String prompt) { //inputFlush(); printPrompt(prompt); return inString(); } private static String inString() { int aChar; StringBuilder s = new StringBuilder(); boolean finished = false; while (!finished) { try { aChar = System.in.read(); if (aChar &lt; 0 || (char) aChar == &#39; n&#39;) finished = true; else if ((char) aChar != &#39; r&#39;) s.append((char) aChar); // Enter into string } catch (java.io.IOException e) { System.out.println(&quot;Input error&quot;); finished = true; } } return s.toString(); } public static int inputInt(String prompt) { while (true) { inputFlush(); printPrompt(prompt); try { return Integer.parseInt(inString().trim()); } catch (NumberFormatException e) { System.out.println(&quot;Invalid input. Not an integer&quot;); } } } public static char inputChar(String prompt) { int aChar = 0; inputFlush(); printPrompt(prompt); try { aChar = System.in.read(); } catch (java.io.IOException e) { println(&quot;Input error&quot;); } inputFlush(); return (char) aChar; } } . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Stack&lt;T&gt; { LinkedList&lt;T&gt; head = null; public T peek() { if (head == null) return null; else return head.getData(); } public void push(T data) { head = new LinkedList&lt;&gt;(data, head); } public T pop() { T data = null; // empty condition if (head != null) { data = head.getData(); head = head.getPrevious(); // stack is overwritten with next item } return data; // pop always returns data of element popped } public String toString() { StringBuilder stackToString = new StringBuilder(&quot;[&quot;); LinkedList&lt;T&gt; node = head; // start from the back while (node != null) { stackToString.append(node.getData()); // append the database to output string node = node.getPrevious(); // go to previous node if (node != null) stackToString.append(&quot;, &quot;); } // loop &#39;till you reach the beginning stackToString.append(&quot;]&quot;); return stackToString.toString(); } } . class StackDriver&lt;T&gt; { static public boolean DEBUG = false; private String title; public final Stack&lt;T&gt; stack = new Stack&lt;&gt;(); // stack object public int count; /** * Stack constructor * * @param title name associated with stack * @param seriesOfObjects data to be inserted into stack */ @SafeVarargs public StackDriver(String title, T[]... seriesOfObjects) { this.title = title; this.addList(seriesOfObjects); } /** * Add a series of data object to the Stack * * @param seriesOfObjects data to be inserted into stack */ @SafeVarargs public final void addList(T[]... seriesOfObjects) { if (DEBUG) ConsoleMethods.println(&quot;Add &quot; + title); for (T[] objects: seriesOfObjects) for (T data : objects) { this.stack.push(data); this.count++; if (DEBUG) ConsoleMethods.println(&quot;Push: &quot; + this.stack.peek() + &quot; &quot; + this.stack); } if (DEBUG) ConsoleMethods.println(); } /** * Empty or remove all data objects from the Stack * */ public void emptyStack() { if (DEBUG) ConsoleMethods.println(&quot;Delete &quot; + title); while (this.stack.peek() != null) { T data = this.stack.pop(); if (DEBUG) ConsoleMethods.println(&quot;Pop: &quot; + data + &quot; &quot; + stack); } if (DEBUG) ConsoleMethods.println(); } /** * Print analytics from the Stack * */ public void printStack() { ConsoleMethods.println(&quot;Size: &quot; + count); ConsoleMethods.println(&quot;Top Element: &quot; + stack.peek()); ConsoleMethods.println(&quot;Full Stack: &quot; + stack); ConsoleMethods.println(); } } . class Main { /** * Test Stack functionality using different types of Objects * */ public static void main(String[] args) { // Create Stack of Integers StackDriver.DEBUG = false; Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; StackDriver&lt;Object&gt; sNums = new StackDriver&lt;&gt;(&quot;Integers&quot;, numbers ); sNums.printStack(); sNums.stack.push(11); sNums.printStack(); sNums.stack.pop(); sNums.printStack(); } } Main.main(null); . Size: 10 Top Element: 9 Full Stack: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] Size: 10 Top Element: 11 Full Stack: [11, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0] Size: 10 Top Element: 9 Full Stack: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } public boolean isEmpty() { if ((this.getHead() == null) &amp;&amp; (this.getTail() == null)) { return true; } else { return false; } } public int getSize() { int size = 0; for (T data : this) size += 1; return size; } /** * Returns the iterator object. * * @return this, instance of object */ public LinkedList&lt;T&gt; next() { LinkedList&lt;T&gt; next = this.head.getNext(); this.head = next; return next; } public static &lt;T extends Comparable&lt;T&gt;&gt; int compare(T x, T y) { return x.compareTo(y); } public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . class StackReverse { public static void main(String[] args) { // Initializing the queue int[] primitiveArr = new int[] {5, 1, 4, 3, 7, 2}; int len = primitiveArr.length; Integer[] objectArr = new Integer[len]; for(int i = 0; i &lt; len; i++) { objectArr[i] = Integer.valueOf(primitiveArr[i]); } StackDriver&lt;Object&gt; sNums = new StackDriver&lt;&gt;(&quot;Integers&quot;, objectArr); Integer[] numbers = new Integer[] {}; QueueManager sorted = new QueueManager(&quot;Sorted&quot;, numbers); for (int i = 0; i &lt; len; i++) { sorted.queue.add((Integer) sNums.stack.pop()); } sorted.printQueue(); } } StackReverse.main(null); . Sorted count: 0 Sorted data: 2 7 3 4 1 5 .",
            "url": "https://ad1616.github.io/ADfastpages/tri3/2023/03/26/StackImplementation.html",
            "relUrl": "/tri3/2023/03/26/StackImplementation.html",
            "date": " • Mar 26, 2023"
        }
        
    
  
    
        ,"post3": {
            "title": "CB Sorts",
            "content": "Selection Sort . public class SelectionSort { public int countCompare = 0; public int countSwap = 0; public void sort(int[] nums) { for(int i=0; i&lt;nums.length; i++) { int min = nums[i]; int minIndex = i; for (int j=i+1; j&lt;nums.length; j++) { countCompare = countCompare + 1; if (nums[j] &lt; min) { min = nums[j]; minIndex = j; } } countSwap = countSwap + 1; int temp = nums[i]; nums[i] = min; nums[minIndex] = temp; } } public int getCountCompares() { return this.countCompare; } public int getCountSwaps() { return this.countSwap; } public void setCountCompare(int count) { this.countCompare = count; } public void setCountSwap(int count) { this.countSwap = count; } public static void main(String[] args) { int[] test = new int[] { 5, 1, 4, 3, 7, 2}; System.out.println(&quot;**** Original Array ****&quot;); for (int i=0; i&lt;test.length; i++) { System.out.print(test[i] + &quot; &quot;); } System.out.println(); System.out.println(); SelectionSort ss = new SelectionSort(); ss.sort(test); System.out.println(&quot;**** Sorted Array ****&quot;); for (int i=0; i&lt;test.length; i++) { System.out.print(test[i] + &quot; &quot;); } } } SelectionSort.main(null); . **** Original Array **** 5 1 4 3 7 2 **** Sorted Array **** 1 2 3 4 5 7 . Insertion Sort . public class InsertionSort { public int countCompare = 0; public int countSwap = 0; public void sort(int[] nums) { for(int i=0; i&lt;nums.length-1; i++) { for (int j=i+1; j&gt;0; j--) { countCompare = countCompare + 1; if (nums[j] &lt; nums[j-1]) { countSwap = countSwap + 1; int temp = nums[j-1]; nums[j-1] = nums[j]; nums[j] = temp; } } } } public int getCountCompares() { return this.countCompare; } public int getCountSwaps() { return this.countSwap; } public void setCountCompare(int count) { this.countCompare = count; } public void setCountSwap(int count) { this.countSwap = count; } public static void main(String[] args) { int[] test = new int[] { 5, 1, 4, 3, 7, 2}; System.out.println(&quot;**** Original Array ****&quot;); for (int i=0; i&lt;test.length; i++) { System.out.print(test[i] + &quot; &quot;); } System.out.println(); System.out.println(); InsertionSort is = new InsertionSort(); is.sort(test); System.out.println(&quot;**** Sorted Array ****&quot;); for (int i=0; i&lt;test.length; i++) { System.out.print(test[i] + &quot; &quot;); } } } InsertionSort.main(null); . **** Original Array **** 5 1 4 3 7 2 **** Sorted Array **** 1 2 3 4 5 7 . Bubble Sort . public class BubbleSort{ public int countCompare = 0; public int countSwap = 0; public void bubbleSort(int arr[]){ for (int i = 0; i &lt; arr.length - 1; i++){ for (int j = 0; j &lt; arr.length - i - 1; j++){ countCompare += 1; if (arr[j] &gt; arr[j + 1]) { countSwap += 1; int temp = arr[j]; arr[j] = arr[j + 1]; arr[j + 1] = temp; } } } } public int getCountCompares() { return this.countCompare; } public int getCountSwaps() { return this.countSwap; } public void setCountCompare(int count) { this.countCompare = count; } public void setCountSwap(int count) { this.countSwap = count; } public void toString(int arr[]){ for(int i = 0; i &lt; arr.length; i++){ System.out.print(arr[i] + &quot; &quot;); } System.out.println(); } public static void main(String[] args){ int[] ll = { 5, 1, 4, 3, 9, 7}; BubbleSort b = new BubbleSort(); b.bubbleSort(ll); b.toString(ll); } } BubbleSort.main(null); . 1 3 4 5 7 9 . Merge Sort . public class MergeSort { public int countCompare = 0; public int countSwap = 0; public void sort(int[] arr) { if (arr.length &lt;= 1) { return; } // Divide the array in half int mid = arr.length / 2; int[] left = Arrays.copyOfRange(arr, 0, mid); int[] right = Arrays.copyOfRange(arr, mid, arr.length); // Recursively sort each half mergeSort(left); mergeSort(right); // Merge the sorted halves int i = 0, j = 0, k = 0; while (i &lt; left.length &amp;&amp; j &lt; right.length) { countCompare += 1; if (left[i] &lt;= right[j]) { countSwap += 1; arr[k++] = left[i++]; } else { arr[k++] = right[j++]; } } // Copy remaining elements from left or right subarray while (i &lt; left.length) { arr[k++] = left[i++]; } while (j &lt; right.length) { arr[k++] = right[j++]; } } public int getCountCompares() { return this.countCompare; } public int getCountSwaps() { return this.countSwap; } public void setCountCompare(int count) { this.countCompare = count; } public void setCountSwap(int count) { this.countSwap = count; } public static void main(String[] args) { int[] arr = {5, 2, 8, 3, 1, 9, 4}; MergeSort mg = new MergeSort(); mg.sort(arr); System.out.println(Arrays.toString(arr)); // prints [1, 2, 3, 4, 5, 8, 9] } } MergeSort.main(null); . [1, 2, 3, 4, 5, 8, 9] . Testing . public class Stats { public int compares; public int swaps; public Stats(int compare, int swap) { this.compares = compare; this.swaps = swap; } public int getCompares() { return this.compares; } public int getSwaps() { return this.swaps; } } . import java.util.Random; import java.util.HashMap; public class TestSorts { public void print(HashMap&lt;Integer, Stats&gt; map, int averageCompares, int averageSwaps) { for (int index: map.keySet()) { Stats stat = map.get(index); System.out.println(index + &quot; has &quot; + stat.getCompares() + &quot; compares and &quot; + stat.getSwaps() + &quot; swaps.&quot;); } System.out.println(&quot;Average Compares: &quot; + averageCompares); System.out.println(&quot;Average Swaps: &quot; + averageSwaps); } public static void main(String[] args) { HashMap&lt;Integer, Stats&gt; statsInsertion = new HashMap&lt;&gt;(); HashMap&lt;Integer, Stats&gt; statsSelection = new HashMap&lt;&gt;(); HashMap&lt;Integer, Stats&gt; statsBubble = new HashMap&lt;&gt;(); HashMap&lt;Integer, Stats&gt; statsMerge = new HashMap&lt;&gt;(); InsertionSort is = new InsertionSort(); SelectionSort ss = new SelectionSort(); BubbleSort bb = new BubbleSort(); MergeSort mg = new MergeSort(); TestSorts ts = new TestSorts(); Random rd = new Random(); int[] arr = new int[5000]; int averageComparesInsertion = 0; int averageSwapsInsertion = 0; long startTime = System.currentTimeMillis(); for (int j = 0; j &lt; 12; j++) { for (int i = 0; i &lt; arr.length; i++) { arr[i] = rd.nextInt(); } is.sort(arr); Stats stats = new Stats(is.getCountCompares(), is.getCountSwaps()); averageComparesInsertion += is.getCountCompares(); averageSwapsInsertion += is.getCountSwaps(); is.setCountCompare(0); is.setCountSwap(0); statsInsertion.put(j, stats); } long endTime = System.currentTimeMillis(); long elapsedTime = endTime - startTime; averageComparesInsertion = averageComparesInsertion / 12; averageSwapsInsertion = averageSwapsInsertion / 12; System.out.println(&quot;Insertion Sort&quot;); System.out.println(&quot;Elapsed time: &quot; + elapsedTime + &quot; milliseconds&quot;); ts.print(statsInsertion, averageComparesInsertion, averageSwapsInsertion); System.out.println(&quot;***************************************&quot;); int averageComparesSelection = 0; int averageSwapsSelection = 0; startTime = System.currentTimeMillis(); for (int j = 0; j &lt; 12; j++) { for (int i = 0; i &lt; arr.length; i++) { arr[i] = rd.nextInt(); } ss.sort(arr); Stats stats = new Stats(ss.getCountCompares(), ss.getCountSwaps()); averageComparesSelection += ss.getCountCompares(); averageSwapsSelection += ss.getCountSwaps(); ss.setCountCompare(0); ss.setCountSwap(0); statsSelection.put(j, stats); } endTime = System.currentTimeMillis(); elapsedTime = endTime - startTime; averageComparesSelection = averageComparesSelection / 12; averageSwapsSelection = averageSwapsSelection / 12; System.out.println(&quot;Selection Sort&quot;); System.out.println(&quot;Elapsed time: &quot; + elapsedTime + &quot; milliseconds&quot;); ts.print(statsSelection, averageComparesSelection, averageSwapsSelection); System.out.println(&quot;***************************************&quot;); int averageComparesBubble = 0; int averageSwapsBubble = 0; startTime = System.currentTimeMillis(); for (int j = 0; j &lt; 12; j++) { for (int i = 0; i &lt; arr.length; i++) { arr[i] = rd.nextInt(); } bb.bubbleSort(arr); Stats stats = new Stats(bb.getCountCompares(), bb.getCountSwaps()); averageComparesBubble += bb.getCountCompares(); averageSwapsBubble += bb.getCountSwaps(); bb.setCountCompare(0); bb.setCountSwap(0); statsBubble.put(j, stats); } endTime = System.currentTimeMillis(); elapsedTime = endTime - startTime; averageComparesBubble = averageComparesBubble / 12; averageSwapsBubble = averageSwapsBubble / 12; System.out.println(&quot;Bubble Sort&quot;); System.out.println(&quot;Elapsed time: &quot; + elapsedTime + &quot; milliseconds&quot;); ts.print(statsBubble, averageComparesBubble, averageSwapsBubble); System.out.println(&quot;***************************************&quot;); int averageComparesMerge = 0; int averageSwapsMerge = 0; startTime = System.currentTimeMillis(); for (int j = 0; j &lt; 12; j++) { for (int i = 0; i &lt; arr.length; i++) { arr[i] = rd.nextInt(); } mg.sort(arr); Stats stats = new Stats(mg.getCountCompares(), mg.getCountSwaps()); averageComparesMerge += mg.getCountCompares(); averageSwapsMerge += mg.getCountSwaps(); mg.setCountCompare(0); mg.setCountSwap(0); statsMerge.put(j, stats); } endTime = System.currentTimeMillis(); elapsedTime = endTime - startTime; averageComparesMerge = averageComparesMerge / 12; averageSwapsMerge = averageSwapsMerge / 12; System.out.println(&quot;Merge Sort&quot;); System.out.println(&quot;Elapsed time: &quot; + elapsedTime + &quot; milliseconds&quot;); ts.print(statsMerge, averageComparesMerge, averageSwapsMerge); } } TestSorts.main(null); . Insertion Sort Elapsed time: 155 milliseconds 0 has 12497500 compares and 6206805 swaps. 1 has 12497500 compares and 6236564 swaps. 2 has 12497500 compares and 6250704 swaps. 3 has 12497500 compares and 6236236 swaps. 4 has 12497500 compares and 6276981 swaps. 5 has 12497500 compares and 6317527 swaps. 6 has 12497500 compares and 6263781 swaps. 7 has 12497500 compares and 6214894 swaps. 8 has 12497500 compares and 6345953 swaps. 9 has 12497500 compares and 6155256 swaps. 10 has 12497500 compares and 6245356 swaps. 11 has 12497500 compares and 6218631 swaps. Average Compares: 12497500 Average Swaps: 6247390 *************************************** Selection Sort Elapsed time: 162 milliseconds 0 has 12497500 compares and 5000 swaps. 1 has 12497500 compares and 5000 swaps. 2 has 12497500 compares and 5000 swaps. 3 has 12497500 compares and 5000 swaps. 4 has 12497500 compares and 5000 swaps. 5 has 12497500 compares and 5000 swaps. 6 has 12497500 compares and 5000 swaps. 7 has 12497500 compares and 5000 swaps. 8 has 12497500 compares and 5000 swaps. 9 has 12497500 compares and 5000 swaps. 10 has 12497500 compares and 5000 swaps. 11 has 12497500 compares and 5000 swaps. Average Compares: 12497500 Average Swaps: 5000 *************************************** Bubble Sort Elapsed time: 135 milliseconds 0 has 12497500 compares and 6268564 swaps. 1 has 12497500 compares and 6240659 swaps. 2 has 12497500 compares and 6248550 swaps. 3 has 12497500 compares and 6313582 swaps. 4 has 12497500 compares and 6178836 swaps. 5 has 12497500 compares and 6171029 swaps. 6 has 12497500 compares and 6258972 swaps. 7 has 12497500 compares and 6261182 swaps. 8 has 12497500 compares and 6240862 swaps. 9 has 12497500 compares and 6275318 swaps. 10 has 12497500 compares and 6262692 swaps. 11 has 12497500 compares and 6181084 swaps. Average Compares: 12497500 Average Swaps: 6241777 *************************************** Merge Sort Elapsed time: 7 milliseconds 0 has 4998 compares and 2498 swaps. 1 has 4999 compares and 2500 swaps. 2 has 4998 compares and 2498 swaps. 3 has 4999 compares and 2500 swaps. 4 has 4999 compares and 2499 swaps. 5 has 4997 compares and 2497 swaps. 6 has 4996 compares and 2500 swaps. 7 has 4998 compares and 2500 swaps. 8 has 4999 compares and 2499 swaps. 9 has 4999 compares and 2499 swaps. 10 has 4999 compares and 2500 swaps. 11 has 4999 compares and 2499 swaps. Average Compares: 4998 Average Swaps: 2499 . Big O . For the two sorts above, we will analyze the worst case scenarios for Big O. . Selection Sort . In Selection Sort, the worst case scenario is when the entire unsorted sub array has to be iterated through every time. This means that for n elements, we first iterate through n, then n-1, then n-2, and so on. Since each iteration has only constant time operations, we can simply add these up to get n^2/2 + n/2. In Big O terms, this is O(n^2). . Insertion Sort . For Insertion Sort, it is a very similar scenario, except the worst case involved iterating through the sorted subarray. In other words, we first iterate through 1, then 2, then 3 terms, up to n. This yields the same sum of n^2/2 + n/2, and again this is O(n^2). . Merge Sort . O(nlog(n)); logarithmic makes sense as it repeatedly divides in 2. . Bubble Sort . O(n^2) as it has to do two iterations, and puts the largest value at the end every time. It is less efficient due to having to do more swaps. . Overall . Based on Big O notation and number of compares and swaps, both of these sorting methods are similar in performance. More swaps have to be done with Insertion sort however. .",
            "url": "https://ad1616.github.io/ADfastpages/tri3/2023/03/22/CBSorts.html",
            "relUrl": "/tri3/2023/03/22/CBSorts.html",
            "date": " • Mar 22, 2023"
        }
        
    
  
    
        ,"post4": {
            "title": "Generics and Collections",
            "content": "/* This is wrapper class... Objective would be to push more functionality into this Class to enforce consistent definition */ public abstract class Generics { public final String masterType = &quot;Generic&quot;; private String type; // extender should define their data type // generic enumerated interface public interface KeyTypes { String name(); } protected abstract KeyTypes getKey(); // this method helps force usage of KeyTypes // getter public String getMasterType() { return masterType; } // getter public String getType() { return type; } // setter public void setType(String type) { this.type = type; } // this method is used to establish key order public abstract String toString(); // static print method used by extended classes public static void print(Generics[] objs) { // print &#39;Object&#39; properties System.out.println(objs.getClass() + &quot; &quot; + objs.length); // print &#39;Generics&#39; properties if (objs.length &gt; 0) { Generics obj = objs[0]; // Look at properties of 1st element System.out.println( obj.getMasterType() + &quot;: &quot; + obj.getType() + &quot; listed by &quot; + obj.getKey()); } // print &quot;Generics: Objects&#39; for(Object o : objs) // observe that type is Opaque System.out.println(o); System.out.println(); } } . public class Car extends Generics { public static KeyTypes key = KeyType.title; public static void setOrder(KeyTypes key) { Car.key = key; } public enum KeyType implements KeyTypes {title, name, year, mpg, used} private final String name; private final int year; private final double mpg; // True if used, false if new private final boolean used; public Car(String name, int year, double mpg, boolean used) { super.setType(&quot;Car&quot;); this.name = name; this.year = year; this.mpg = mpg; this.used = used; } @Override protected KeyTypes getKey() { return Car.key; } @Override public String toString() { String output=&quot;&quot;; if (KeyType.name.equals(this.getKey())) { output += this.name; } else if (KeyType.year.equals(this.getKey())) { output += &quot;00&quot; + this.year; output = output.substring(output.length() - 2); } else if (KeyType.mpg.equals(this.getKey())) { output += this.mpg; } else if (KeyType.used.equals(this.getKey())) { output += this.used; } else { output += super.getType() + &quot;: &quot; + this.name + &quot;, &quot; + this.used + &quot;, &quot; + this.year + &quot;, &quot; + this.mpg; } return output; } // Test data initializer public static Car[] cars() { return new Car[]{ new Car(&quot;Tesla Model 3&quot;, 2023, 0, false), new Car(&quot;Toyota Corolla&quot;, 2004, 33, true), new Car(&quot;Honda Odyssey&quot;, 2010, 22, true) }; } public static void main(String[] args) { // Inheritance Hierarchy Car[] objs = cars(); // print with title Car.setOrder(KeyType.title); Car.print(objs); // print name only Car.setOrder(KeyType.name); Car.print(objs); } } Car.main(null); . class [LREPL.$JShell$15$Car; 3 Generic: Car listed by title Car: Tesla Model 3, false, 2023, 0.0 Car: Toyota Corolla, true, 2004, 33.0 Car: Honda Odyssey, true, 2010, 22.0 class [LREPL.$JShell$15$Car; 3 Generic: Car listed by name Tesla Model 3 Toyota Corolla Honda Odyssey . /** * Implementation of a Double Linked List; forward and backward links point to adjacent Nodes. * */ public class LinkedList&lt;T&gt; { private T data; private LinkedList&lt;T&gt; prevNode, nextNode; /** * Constructs a new element * * @param data, data of object * @param node, previous node */ public LinkedList(T data, LinkedList&lt;T&gt; node) { this.setData(data); this.setPrevNode(node); this.setNextNode(null); } /** * Clone an object, * * @param node object to clone */ public LinkedList(LinkedList&lt;T&gt; node) { this.setData(node.data); this.setPrevNode(node.prevNode); this.setNextNode(node.nextNode); } /** * Setter for T data in DoubleLinkedNode object * * @param data, update data of object */ public void setData(T data) { this.data = data; } /** * Returns T data for this element * * @return data associated with object */ public T getData() { return this.data; } /** * Setter for prevNode in DoubleLinkedNode object * * @param node, prevNode to current Object */ public void setPrevNode(LinkedList&lt;T&gt; node) { this.prevNode = node; } /** * Setter for nextNode in DoubleLinkedNode object * * @param node, nextNode to current Object */ public void setNextNode(LinkedList&lt;T&gt; node) { this.nextNode = node; } /** * Returns reference to previous object in list * * @return the previous object in the list */ public LinkedList&lt;T&gt; getPrevious() { return this.prevNode; } /** * Returns reference to next object in list * * @return the next object in the list */ public LinkedList&lt;T&gt; getNext() { return this.nextNode; } } . import java.util.Iterator; /** * Queue Iterator * * 1. &quot;has a&quot; current reference in Queue * 2. supports iterable required methods for next that returns a generic T Object */ class QueueIterator&lt;T&gt; implements Iterator&lt;T&gt; { LinkedList&lt;T&gt; current; // current element in iteration // QueueIterator is pointed to the head of the list for iteration public QueueIterator(LinkedList&lt;T&gt; head) { current = head; } // hasNext informs if next element exists public boolean hasNext() { return current != null; } // next returns data object and advances to next position in queue public T next() { T data = current.getData(); current = current.getNext(); return data; } } /** * Queue: custom implementation * @author John Mortensen * * 1. Uses custom LinkedList of Generic type T * 2. Implements Iterable * 3. &quot;has a&quot; LinkedList for head and tail */ public class Queue&lt;T&gt; implements Iterable&lt;T&gt; { LinkedList&lt;T&gt; head = null, tail = null; /** * Add a new object at the end of the Queue, * * @param data, is the data to be inserted in the Queue. */ public void add(T data) { // add new object to end of Queue LinkedList&lt;T&gt; tail = new LinkedList&lt;&gt;(data, null); if (this.head == null) // initial condition this.head = this.tail = tail; else { // nodes in queue this.tail.setNextNode(tail); // current tail points to new tail this.tail = tail; // update tail } } /** * Returns the data of head. * * @return data, the dequeued data */ public T delete() { T data = this.peek(); if (this.tail != null) { // initial condition this.head = this.head.getNext(); // current tail points to new tail if (this.head != null) { this.head.setPrevNode(tail); } } return data; } /** * Returns the data of head. * * @return this.head.getData(), the head data in Queue. */ public T peek() { return this.head.getData(); } /** * Returns the head object. * * @return this.head, the head object in Queue. */ public LinkedList&lt;T&gt; getHead() { return this.head; } /** * Returns the tail object. * * @return this.tail, the last object in Queue */ public LinkedList&lt;T&gt; getTail() { return this.tail; } public boolean isEmpty() { if ((this.getHead() == null) &amp;&amp; (this.getTail() == null)) { return true; } else { return false; } } public int getSize() { int size = 0; for (T data : this) size += 1; return size; } /** * Returns the iterator object. * * @return this, instance of object */ public LinkedList&lt;T&gt; next() { LinkedList&lt;T&gt; next = this.head.getNext(); this.head = next; return next; } public static &lt;T extends Comparable&lt;T&gt;&gt; int compare(T x, T y) { return x.compareTo(y); } public Iterator&lt;T&gt; iterator() { return new QueueIterator&lt;&gt;(this.head); } } . /** * Queue Manager * 1. &quot;has a&quot; Queue * 2. support management of Queue tasks (aka: titling, adding a list, printing) */ class QueueManager&lt;T&gt; { // queue data private final String name; // name of queue private int count = 0; // number of objects in queue public final Queue&lt;T&gt; queue = new Queue&lt;&gt;(); // queue object /** * Queue constructor * Title with empty queue */ public QueueManager(String name) { this.name = name; } /** * Queue constructor * Title with series of Arrays of Objects */ public QueueManager(String name, T[]... seriesOfObjects) { this.name = name; this.addList(seriesOfObjects); } /** * Add a list of objects to queue */ public void addList(T[]... seriesOfObjects) { //accepts multiple generic T lists for (T[] objects: seriesOfObjects) for (T data : objects) { this.queue.add(data); this.count++; } } /** * Print any array objects from queue */ public void printQueue() { System.out.println(this.name + &quot; count: &quot; + count); System.out.print(this.name + &quot; data: &quot;); for (T data : queue) System.out.print(data + &quot; &quot;); System.out.println(); } } . /** * Driver Class * Tests queue with string, integers, and mixes of Classes and types */ class QueueCarTester { public static void main(String[] args) { // Create iterable Queue of NCS Generics Car.setOrder(Car.KeyType.name); // Illustrates use of a series of repeating arguments QueueManager qGenerics = new QueueManager(&quot;My Generics&quot;, Car.cars()); qGenerics.printQueue(); qGenerics.queue.add(new Car(&quot;Tesla Model X&quot;, 2022, 0, false)); qGenerics.printQueue(); qGenerics.queue.delete(); qGenerics.printQueue(); qGenerics.queue.delete(); qGenerics.printQueue(); qGenerics.queue.delete(); qGenerics.printQueue(); qGenerics.queue.delete(); qGenerics.printQueue(); } } QueueCarTester.main(null); . My Generics count: 3 My Generics data: Tesla Model 3 Toyota Corolla Honda Odyssey My Generics count: 3 My Generics data: Tesla Model 3 Toyota Corolla Honda Odyssey Tesla Model X My Generics count: 3 My Generics data: Toyota Corolla Honda Odyssey Tesla Model X My Generics count: 3 My Generics data: Honda Odyssey Tesla Model X My Generics count: 3 My Generics data: Tesla Model X My Generics count: 3 My Generics data: . Merge Sort Implementation using Queues . In the below algorithm, the first element in a queue is used as the pivot. From there, the elements greater than the pivot form a &quot;right&quot; queue, and the elements less than the pivot form a &quot;left&quot; queue. The &quot;left&quot; and &quot;right&quot; queues are both recursively split into subsequent left and right queues, until there is only one element. From there, each left and right queue is combined with the pivot added back in the middle, which creates mini sorted queues. Once everything is combined, the final queue is sorted. . class QueueSort { public static Queue sort(Queue q) { // Base case for recursion if (q.getSize() &lt; 2) { return q; } // Setting the pivot Integer mid = (Integer) q.peek(); // Creating two sides of the pivot Queue left = new Queue&lt;&gt;(); Queue right = new Queue&lt;&gt;(); q.delete(); // Populating each side of the pivot while (q.getSize() &gt; 0) { Integer element = (Integer) q.delete(); if (element &lt; mid) { left.add(element); } else { right.add(element); } } // Recursively sorting each side of the pivot Queue sortedLeft = sort(left); Queue sortedRight = sort(right); // Putting each side of the pivot together with the pivot itself to form a sorted queue Queue sortedComplete = new Queue&lt;&gt;(); while (sortedLeft.getSize() &gt; 0) { sortedComplete.add(sortedLeft.delete()); } sortedComplete.add(mid); while (sortedRight.getSize() &gt; 0) { sortedComplete.add(sortedRight.delete()); } return sortedComplete; } public static void main(String[] args) { // Initializing the queue to be sorted int[] primitiveArr = new int[] {5, 1, 4, 3, 7, 2}; Integer[] objectArr = new Integer[primitiveArr.length]; for(int i = 0; i &lt; primitiveArr.length; i++) { objectArr[i] = Integer.valueOf(primitiveArr[i]); } QueueManager original = new QueueManager(&quot;Original&quot;, objectArr); original.printQueue(); Queue sortedQ = QueueSort.sort(original.queue); // Parsing the sorted queue to be input into the QueueManager int length = sortedQ.getSize(); Integer[] sortedArr = new Integer[sortedQ.getSize()]; for (int i = 0; i &lt; length; i++) { if (i == 0) { sortedArr[i] = (Integer) sortedQ.getHead().getData(); } else { sortedArr[i] = (Integer) sortedQ.next().getData(); } } QueueManager sorted = new QueueManager(&quot;Sorted&quot;, sortedArr); sorted.printQueue(); } } QueueSort.main(null); . Original count: 6 Original data: 5 1 4 3 7 2 Sorted count: 6 Sorted data: 1 2 3 4 5 7 . Shuffling a Queue . Incomplete, as when I tried to find a solution, I found that it defeated the purpose of using a Queue data structure instead of an array.... . import java.lang.Math; class QueueShuffle { public static void main(String[] args) { // Initializing the queue int[] primitiveArr = new int[] {5, 1, 4, 3, 7, 2}; Integer[] objectArr = new Integer[primitiveArr.length]; for(int i = 0; i &lt; primitiveArr.length; i++) { objectArr[i] = Integer.valueOf(primitiveArr[i]); } QueueManager original = new QueueManager(&quot;Original&quot;, objectArr); original.printQueue(); } } QueueShuffle.main(null); . Original count: 6 Original data: 5 1 4 3 7 2 . Stack . public class ConsoleMethods { //Method to make sure no database is available in the //input stream private static void inputFlush() { try { while (System.in.available() != 0) { } } catch (java.io.IOException e) { System.out.println(&quot;Input error&quot;); } } public static void printChar(char txt) { System.out.print(txt); } public static void clearScreen() { printChar(&#39; u000C&#39;); } public static void print(String txt) { System.out.print(txt); } public static void println() { System.out.println(&quot; n&quot;); } public static void println(String txt) { System.out.println(txt); } public static void println(Object obj) { System.out.println(obj); } public static void printPrompt(String prompt) { print(prompt + &quot; &quot;); System.out.flush(); } public static String inputString(String prompt) { //inputFlush(); printPrompt(prompt); return inString(); } private static String inString() { int aChar; StringBuilder s = new StringBuilder(); boolean finished = false; while (!finished) { try { aChar = System.in.read(); if (aChar &lt; 0 || (char) aChar == &#39; n&#39;) finished = true; else if ((char) aChar != &#39; r&#39;) s.append((char) aChar); // Enter into string } catch (java.io.IOException e) { System.out.println(&quot;Input error&quot;); finished = true; } } return s.toString(); } public static int inputInt(String prompt) { while (true) { inputFlush(); printPrompt(prompt); try { return Integer.parseInt(inString().trim()); } catch (NumberFormatException e) { System.out.println(&quot;Invalid input. Not an integer&quot;); } } } public static char inputChar(String prompt) { int aChar = 0; inputFlush(); printPrompt(prompt); try { aChar = System.in.read(); } catch (java.io.IOException e) { println(&quot;Input error&quot;); } inputFlush(); return (char) aChar; } } . public class Stack&lt;T&gt; { private LinkedList&lt;T&gt; lifo = null; // last in first out Object of stack /** * Returns the current (LIFO) objects data. * * @return the current data in Stack. */ public T peek() { if (lifo == null) return null; else return lifo.getData(); } /** * Inserts a new data object at the top of this Stack, * * @param data to be inserted at the top of the Stack. */ public void push(T data) { // note the order that things happen: // the new object becomes current and gets a value // current lifo is parameter, it is assigned as previous node in lifo lifo = new LinkedList&lt;&gt;(data, lifo); } /** * Removes the top element in the Stack. * * @return the popped data from the Stack. */ public T pop() { T data = null; // empty condition if (lifo != null) { data = lifo.getData(); lifo = lifo.getPrevious(); // stack is overwritten with next item } return data; // pop always returns data of element popped } public boolean isEmpty() { if (lifo == null) { return true; } else { return false; } } /** * Returns a string representation of this Stack, * polymorphic nature of toString overrides of standard System.out.print behavior * * @return string representation of data within Stack */ public String toString() { StringBuilder stackToString = new StringBuilder(&quot;[&quot;); LinkedList&lt;T&gt; node = lifo; // start from the back while (node != null) { stackToString.append(node.getData()); // append the database to output string node = node.getPrevious(); // go to previous node if (node != null) stackToString.append(&quot;, &quot;); } // loop &#39;till you reach the beginning stackToString.append(&quot;]&quot;); return stackToString.toString(); } } . class StackDriver&lt;T&gt; { static public boolean DEBUG = false; private String title; public final Stack&lt;T&gt; stack = new Stack&lt;&gt;(); // stack object public int count; /** * Stack constructor * * @param title name associated with stack * @param seriesOfObjects data to be inserted into stack */ @SafeVarargs public StackDriver(String title, T[]... seriesOfObjects) { this.title = title; this.addList(seriesOfObjects); } /** * Add a series of data object to the Stack * * @param seriesOfObjects data to be inserted into stack */ @SafeVarargs public final void addList(T[]... seriesOfObjects) { if (DEBUG) ConsoleMethods.println(&quot;Add &quot; + title); for (T[] objects: seriesOfObjects) for (T data : objects) { this.stack.push(data); this.count++; if (DEBUG) ConsoleMethods.println(&quot;Push: &quot; + this.stack.peek() + &quot; &quot; + this.stack); } if (DEBUG) ConsoleMethods.println(); } /** * Empty or remove all data objects from the Stack * */ public void emptyStack() { if (DEBUG) ConsoleMethods.println(&quot;Delete &quot; + title); while (this.stack.peek() != null) { T data = this.stack.pop(); if (DEBUG) ConsoleMethods.println(&quot;Pop: &quot; + data + &quot; &quot; + stack); } if (DEBUG) ConsoleMethods.println(); } /** * Print analytics from the Stack * */ public void printStack() { ConsoleMethods.println(&quot;Size: &quot; + count); ConsoleMethods.println(&quot;Top Element: &quot; + stack.peek()); ConsoleMethods.println(&quot;Full Stack: &quot; + stack); ConsoleMethods.println(); } } . class Main { /** * Test Stack functionality using different types of Objects * */ public static void main(String[] args) { // Create Stack of Integers StackDriver.DEBUG = false; Object[] numbers = new Integer[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9}; StackDriver&lt;Object&gt; sNums = new StackDriver&lt;&gt;(&quot;Integers&quot;, numbers ); sNums.printStack(); sNums.emptyStack(); // Create iterable Queue of NCS Generics StackDriver.DEBUG = false; Car.setOrder(Car.KeyType.name); // Illustrates use of a series of arrays StackDriver&lt;Generics&gt; sGenerics = new StackDriver&lt;&gt;(&quot;My Generics&quot;, Car.cars()); sGenerics.printStack(); sGenerics.emptyStack(); } } Main.main(null); . Size: 10 Top Element: 9 Full Stack: [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] Size: 3 Top Element: Honda Odyssey Full Stack: [Honda Odyssey, Toyota Corolla, Tesla Model 3] . Reversing Queue with Stack . class QueueReverse { public static void main(String[] args) { // Initializing the queue int[] primitiveArr = new int[] {5, 1, 4, 3, 7, 2}; Integer[] objectArr = new Integer[primitiveArr.length]; for(int i = 0; i &lt; primitiveArr.length; i++) { objectArr[i] = Integer.valueOf(primitiveArr[i]); } QueueManager original = new QueueManager(&quot;Original&quot;, objectArr); original.printQueue(); Object[] numbers = new Integer[] {}; StackDriver&lt;Object&gt; sNums = new StackDriver&lt;&gt;(&quot;Integers&quot;, numbers ); int length = original.queue.getSize(); for (int i = 0; i &lt; length; i++) { sNums.stack.push((Integer) original.queue.delete()); } sNums.printStack(); } } QueueReverse.main(null); . Original count: 6 Original data: 5 1 4 3 7 2 Size: 0 Top Element: 2 Full Stack: [2, 7, 3, 4, 1, 5] . Stack Hack .",
            "url": "https://ad1616.github.io/ADfastpages/tri3/2023/03/14/GenericsAndCollections.html",
            "relUrl": "/tri3/2023/03/14/GenericsAndCollections.html",
            "date": " • Mar 14, 2023"
        }
        
    
  
    
        ,"post5": {
            "title": "Data Types",
            "content": "Java Binary Addition . public static String addBinary(){ String num1 = &quot;1&quot;; String num2 = &quot;1&quot;; int num1Binary = Integer.parseInt(num1, 2); int num2Binary = Integer.parseInt(num2, 2); int sum = + num1Binary + num1Binary; return Integer.toBinaryString(sum); } addBinary(); . 10 . Primitive Types and Pass by Value . public class PrimitiveTypes { public int a; public double b; public boolean c; public char d; public PrimitiveTypes(int a, double b, boolean c, char d) { this.a = a; this.b = b; this.c = c; this.d = d; } public void ChangePrimitiveTypes(int newInt, double newDouble, boolean newBool, char newChar) { this.a = newInt + 1; this.b = newDouble + 1; this.c = !newBool; this.d = &#39;z&#39;; } public static void main(String[] args) { PrimitiveTypes PT = new PrimitiveTypes(5, 10.5, false, &#39;d&#39;); int aDuplicate = PT.a; double bDuplicate = PT.b; boolean cDuplicate = PT.c; char dDuplicate = PT.d; System.out.println(&quot;Integer is: &quot; + PT.a); System.out.println(&quot;Double is: &quot; + PT.b); System.out.println(&quot;Boolean is: &quot; + PT.c); System.out.println(&quot;Char is: &quot; + PT.d); System.out.println(); PT.ChangePrimitiveTypes(PT.a, PT.b, PT.c, PT.d); System.out.println(&quot;Changed Integer is: &quot; + PT.a); System.out.println(&quot;Changed Double is: &quot; + PT.b); System.out.println(&quot;Changed Boolean is: &quot; + PT.c); System.out.println(&quot;Changed Char is: &quot; + PT.d); System.out.println(); System.out.println(&quot;Duplicated Integer is: &quot; + aDuplicate); System.out.println(&quot;Duplicated Double is: &quot; + bDuplicate); System.out.println(&quot;Duplicated Boolean is: &quot; + cDuplicate); System.out.println(&quot;Duplicated Char is: &quot; + dDuplicate); } } PrimitiveTypes.main(null); . Integer is: 5 Double is: 10.5 Boolean is: false Char is: d Changed Integer is: 6 Changed Double is: 11.5 Changed Boolean is: true Changed Char is: z Duplicated Integer is: 5 Duplicated Double is: 10.5 Duplicated Boolean is: false Duplicated Char is: d . Above, we see an integer, double, boolean, and char all being defined in a Java class and assigned values through the constructor. We pass in these values to the ChangePrimitiveTypes function, which modifies each value. In Java, primitive types are passed by value, which means that the variable stores an actual value. We can visualize this through the above class. After we assign initial values to the variables in the class, we create 4 new variables and assign their values to be the same as the values of the variables in the class. Now, we print the original values of the 4 variables in the class. Then, we change all of the values of the variables in the class, and print the variables again. We see that the new values are printed. However, when we print the 4 new variables we created at the start, they still contain the original values we assigned. This is because these 4 variables contained actual values, and since we never modified those variables the values never changed. . import java.util.ArrayList; public class ReferenceTypes { public static void main(String[] args) { int[] arr1 = {1, 2, 3, 4}; int[] arr2 = arr1; System.out.print(&quot;Arr1 original: &quot;); System.out.println(Arrays.toString(arr1)); System.out.print(&quot;Arr2 original: &quot;); System.out.println(Arrays.toString(arr2)); arr1[0] = 5; System.out.println(); System.out.print(&quot;Arr1 Changed: &quot;); System.out.println(Arrays.toString(arr1)); System.out.print(&quot;Arr2 Changed: &quot;); System.out.println(Arrays.toString(arr2)); ArrayList&lt;Integer&gt; list = new ArrayList&lt;&gt;(); for (int i : arr1) { list.add(i); } System.out.println(); System.out.print(&quot;ArrayList: &quot;); System.out.print(list.toString()); } } ReferenceTypes.main(null); . Arr1 original: [1, 2, 3, 4] Arr2 original: [1, 2, 3, 4] Arr1 Changed: [5, 2, 3, 4] Arr2 Changed: [5, 2, 3, 4] ArrayList: [5, 2, 3, 4] . While int is a primitive type, Integer is a wrapper class for integer and is a reference type. In the above class, we see this wrapper class being necessary to pass in primitive type values to an array list. . We also visualize the behavior of reference types in the above class. Arr1 is assigned to a value, and Arr2 is assigned to Arr1. Both Arr1 and Arr2 are different variables, but they both point to the same address in memory for the value of the array. Therefore, when Arr1 is changed, Arr2 also appears to change, because they reference the same value. . Note: For Strings, although they are considered reference types, this behavior is not seen. The reason for this is that Strings are immutable in Java. . Methods and Control Structures . Methods in overall coding are blocks of code that can be called upon and reused when needed within anywhere of the code. | When defining methods, one should be aware of the variable type that the method would return, parameters it takes in, of course the code, and then its implementation in calling. | . Looking at the Diverse Arrays/Matrix . 2D Arrays are slightly tricky - the outer int[][] array is considered a non-primitive data type, meaning that values like null can be stored. However, within each array only primitive data types of the respective variable type can be stored. . | Within Mort&#39;s code he defines various methods within the Diverse array class, beginning with the arraySum method. It takes in an array, and finds the sum of the integers in the array. . | . public class DiverseArray { public static int arraySum(int[] arr) { int sum = 0; . for (int num : arr) { sum += num; System.out.print(num + &quot; t&quot;); } return sum; . } . Next, he creates the sum of 2d arrays. Within the method he uses the other method defined previously to return a list of the sums of each row of the 2d array. | . public static int[] rowSums(int[][] arr2D) { int rows = arr2D.length; int[] sumList = new int[rows]; . for (int i = 0; i &lt; rows; i++) { sumList[i] = arraySum(arr2D[i]); System.out.println(&quot;= t&quot; + sumList[i]); // debug } return sumList; . } z . The final method simply checks if the rows are similar to each other | . Math.random . Math.random generates a random value from 0 to 1. When multiplied by a range it generates a value in that range. | In Number.java, it is used like so | . public Number() { . int SIZE = 36; int MIN = 3; int RANGE = SIZE - MIN + 1; // constants for initialization this.number = (int)(Math.random()*RANGE) + MIN; // observe RANGE calculation and MIN offset this.index = Number.COUNT++; // observe use of Class variable COUNT and post increment . } . Here a range is set with variables so that it could be easily altered. Also be sure to cast the number as an integer so that a decimal value doesn&#39;t occur. | . DoNothingByValue.java . Overall, the DoNothingByValue demonstrates several methods of passing arguments. . | The DoNothings method does nothing, it just shows how to pass in arguments . | Within the changeIt method, functions are done locally to the variables, however in the end, the arr outside the method is not altered, and thus is not changed. . | . public static void changeIt(int [] arr, int val, String word) { . arr = new int[5]; val = 0; word = word.substring(0, 5); System.out.print(&quot;changeIt: &quot;); // added for (int k = 0; k &lt; arr.length; k++) { arr[k] = 0; System.out.print(arr[k] + &quot; &quot;); // added . } System.out.println(word); // added . } . The changeIt2 demonstrates the creation of non primitive data type, even though the data type has the same name, they can be referred differently with different alterations to the array while still keeping its original values in a seperate one. If you print &#39;arr&#39; it will be the original list. | . public static void changeIt2(int [] nums, int value, String name) { . nums = new int[5]; // new creates new memory address value = 0; // primitives are pass by value name = name.substring(0, 5); // all wrapper classes have automatic &quot;new&quot;, same as word = new String(word.substring(0, 5)); // this loop changes nums locally System.out.print(&quot;changeIt2: &quot;); for (int k = 0; k &lt; nums.length; k++) { nums[k] = 0; System.out.print(nums[k] + &quot; &quot;); } System.out.println(name); . } . In changeIt3 &#39;arr&#39; is actually modified, and the original is modified. However, since a new string object for word was created, the original &#39;word&#39; will not be modified because now it is a localized variable to the method. | . public static String changeIt3(int [] arr, String word) { . word = new String(word.substring(0, 5)); // wrapper class does a &quot;new&quot; on any assignment System.out.print(&quot;changeIt3: &quot;); for (int k = 0; k &lt; arr.length; k++) { arr[k] = 0; // int array is initialized to 0&#39;s, not needed System.out.print(arr[k] + &quot; &quot;); } System.out.println(word); return word; . } . For changeIt4, first the Triple type should be explained. Simply put, Triple can store three values within the data structure, each can be with a different data type. They are referred by left, middle, and right. | This simply shows how to modify an object passed by parameter. | . public static Triple&lt;int[], Integer, String&gt; changeIt4(Triple&lt;int[], Integer, String&gt; T) { . T.setOne(new int[5]); T.setTwo(0); // primitives are pass by value T.setThree(T.getThree().substring(0, 5)); // all wrapper classes have automatic &quot;new&quot;, same as word = new String(word.substring(0, 5)); // this loop changes nums locally System.out.print(&quot;changeIt4: &quot;); for (int i : T.getOne()) { System.out.print(i + &quot; &quot;); } System.out.println(T.getThree()); return T; . } . Java Methods . a method is a block of code that performs a specific task and can be called by other parts of the program . | a method consists of a method signature, which includes the method name, return type, and parameter list, and a method body, which contains the code that is executed when the method is called . | . public int addNumbers(int num1, int num2) { int sum = num1 + num2; return sum; } System.out.println(addNumbers(10, 20)); . 30 . Java Control Structures . control structures are constructs that allow you to control the flow of execution in a program . | they let you execute specific statements or blocks of code based on certain conditions . | some examples: if-else, for loop, while loop, switch case . | . IntByReference . The IntByReference class uses the integer primitive and its function is swapping the two inputted numbers, if the first is greater than the second . | A wrapper class is used to change a primitive int into an Integer object . | the Integer object is turned back into a primitive type &quot;tmp&quot; to switch values . | . public class IntByReference { // sets primitive private int value; //wrapper class public IntByReference(Integer value) { this.value = value; } public String toString() { return (String.format(&quot;%d&quot;, this.value)); } // function to swap the values public void swapToLowHighOrder(IntByReference i) { // if first value larger than second, then swap if (this.value &gt; i.value) { //sets the first value back to a primitive type int tmp = this.value; this.value = i.value; i.value = tmp; } } public static void swapper(int n0, int n1) { IntByReference a = new IntByReference(n0); // creates objects with wrapper class using primitive int IntByReference b = new IntByReference(n1); System.out.println(&quot;Before: &quot; + a + &quot; &quot; + b); a.swapToLowHighOrder(b); //calls method System.out.println(&quot;After: &quot; + a + &quot; &quot; + b); System.out.println(); } public static void main(String[] ags) { IntByReference.swapper(21, 16); IntByReference.swapper(16, 21); IntByReference.swapper(16, -1); } } IntByReference.main(null); . Before: 21 16 After: 16 21 Before: 16 21 After: 16 21 Before: 16 -1 After: -1 16 .",
            "url": "https://ad1616.github.io/ADfastpages/tri3/2023/03/06/datatypes.html",
            "relUrl": "/tri3/2023/03/06/datatypes.html",
            "date": " • Mar 6, 2023"
        }
        
    
  
    
        ,"post6": {
            "title": "52 Question Practice MC",
            "content": "Final Score . I scored a 40/52. . Corrections . Q1 2D array bounds error . Should be after 8, since it would try to access 10 elements of the first column when there are only 8. . Q3 2D array with multi-way selection . I picked the wrong answer choice. . Q7 combine method . Too hasty. Last number should have been 0. . Q11 concat one two zee . Integers can concatenate with strings, but if it is int + int + str, then the integers actually get added before being concatenated with the string. . Q23 listOfWords List and wordsWithCommas method . For a list, don&#39;t subtract one from the size. . Q29 Olympics concat . Didn&#39;t know that the word &quot;true&quot; doesn&#39;t need quotes around it. String literals will be concatenated. . Q32 print values from ArrayList data . Not sure why I got this one wrong. Makes sense now. . Q33 Print values in 2D int array . Row and column length was flipped on the answer I picked. . Q35 print values while traversing ArrayList numbers . It&#39;s printing the index! Not the value! . Q40 Remove names from a List . II does not work; it would miss the last element. . Q45 strArrMethod - last day of the school year . Updates for &quot;day&quot;, &quot;of&quot;, &quot;of&quot;, &quot;year&quot;, respectfully. I just counted the iterations. . Q49 sum some 2D array elements . Didn&#39;t notice that the last column wasn&#39;t added. .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2023/01/30/PracticeMC2.html",
            "relUrl": "/cb/2023/01/30/PracticeMC2.html",
            "date": " • Jan 30, 2023"
        }
        
    
  
    
        ,"post7": {
            "title": "66 Question Practice MC",
            "content": "Final Score . I scored a 58/66. . Corrections . Q8: Compare A and B to not A and not B . This question asked to explain the relationship between A &amp;&amp; B and !A &amp;&amp; !B. These expressions would have the same value if A and B are different values, since both expressions would always be false. I didn&#39;t think this through. . Q24 Error in findZero Method . I got this wrong because I got confused on what &lt;= vs &lt; did. In arrays, it should ALWAYS be &lt; arr.length to avoid out of bounds error. &lt;= arr.length -1 also works. In this case, if an array did not have 0, then it would try to index at arr.length which results in error. . Q36 GridWorld getDirection and getMoveLocation calls . What even is this? Not sure what it&#39;s referencing. . Q40 maxHelper with int array instance variable fix . Base case should be called before another recursive call. . Q50 . Didn&#39;t understand the question. First number is how many times loop is called. Second number is what it has to be divisible by. For 0 and 10, only way is for us to be looking for even number also divisible by 5, and have enough iterations to get to 10. So we take 20 and 5. . Q54 . Should be in descending order, not ascending. . Q59 . Key word is which case ALWAYS results in an error. I did not think in this way. . Q63 . Didn&#39;t get this one because the right answer leaves an extra curly brace. .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2023/01/22/PracticeMC1.html",
            "relUrl": "/cb/2023/01/22/PracticeMC1.html",
            "date": " • Jan 22, 2023"
        }
        
    
  
    
        ,"post8": {
            "title": "Localpages",
            "content": "{ “cells”: [ { “attachments”: {}, “cell_type”: “markdown”, “metadata”: {}, “source”: [ “Do not use ruby 3.2.0. n”, “ n”, “Install 2.7.7 with n”, “ n”, “ruby-install 2.7.7 n”, “ n”, “Then update zshrc version n”, “ n”, “then change version with n”, “ n”, “chruby 2.7.7 n”, “ n”, “now do n”, “ n”, “bundle install n”, “bundle exec jekyll serve” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [] } ], “metadata”: { “language_info”: { “name”: “python” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://ad1616.github.io/ADfastpages/2023/01/04/localpages.ipynb",
            "relUrl": "/2023/01/04/localpages.ipynb",
            "date": " • Jan 4, 2023"
        }
        
    
  
    
        ,"post9": {
            "title": "Unit 10 Work",
            "content": "Recursion . Method that calls itself. Must have two parts: a base case and a recursive call. . Binary Search . Requires data to be in sorted order to use. . The actual algorithm coninuously halvea data until the value is found . More efficient than linear search. In terms of Big O Notation, it is O(log2n) vs O(n). .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/12/14/Unit10.html",
            "relUrl": "/cb/2022/12/14/Unit10.html",
            "date": " • Dec 14, 2022"
        }
        
    
  
    
        ,"post10": {
            "title": "Lightsfrontend",
            "content": "{ “cells”: [ { “cell_type”: “code”, “execution_count”: null, “metadata”: {}, “outputs”: [], “source”: [] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.10.5 (v3.10.5:f377153967, Jun 6 2022, 12:36:10) [Clang 13.0.0 (clang-1300.0.29.30)]” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://ad1616.github.io/ADfastpages/2022/12/11/LightsFrontend.html",
            "relUrl": "/2022/12/11/LightsFrontend.html",
            "date": " • Dec 11, 2022"
        }
        
    
  
    
        ,"post11": {
            "title": "Unit 9 - Inheritance",
            "content": "Setup . One of the main goals of learning inheritance is to teach you how to structure your code. So, we&#39;re going to leave a lot of the hacks up to your creativity, and you can make anything you want as long as it follows the structure of inheritance. . Open up a new notebook in your personal fastpages (you can do this in pairs or groups). The hacks in this lesson will be performed from scratch in this notebook. . What is Inheritance, and why is it useful? . Imagine you wanted to create a racing game. You would need a bunch of different cars-bugattis, lamborghinis, rolls royce. Each of these cars would have different features; they would have different fuel types, tires, and engines. A car like an Aston Martin would have a spoiler inside the car for aerodynamics. Lambos have cools doors for when you pull up to a race. But all of these cars would also have a lot in common; all cars have gear shifts, gas, breaks, and steering. . We could model each car with its own class, with attributes and methods specific to each car. But we would find that we&#39;re repeating a lot of the same code over and over - it doesn&#39;t really make sense to redefine the methods for gas and breaks for every single car, when it will do the same thing. . This is a great use case for inheritance. We can define a base &quot;Car Class&quot; that has the methods and attributes common to every car - steering methods, gas and break methods, and attributes like speed and miles per gallon. . Each car will &quot;extend&quot; from this base class. This means that it &quot;inherits&quot; the methods and attributes in the base Car Class (this is why it&#39;s called Inheritance). But each of the new car classes, for example a Bugatti Class, will have its own special methods and attributes. . SuperClasses and Subclasses with Cars . Let&#39;s first look at the base &quot;Car Class&quot; we talked about, with the generic methods all cars would have. This is called the Super Class. . Some vocab: . protected is an access modifier so that the attribute isn&#39;t affected by outside modifiers. . public class Car { protected String brandName; protected double range; protected double doorNumber; protected double maxSpeed; // Constructor for the attributes present in the superclass public Car(String brandName, double range, double doorNumber, double maxSpeed) { this.brandName = brandName; this.range = range; this.doorNumber = doorNumber; this.maxSpeed = maxSpeed; } public void gas () { System.out.println(&quot;Go!&quot;); } public void brake () { System.out.println(&quot;Stop!&quot;); } public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } public void horn () { System.out.print(&quot;honking... &quot;); } } . public class TeslaModelS extends Car { // Additional attribute not present in the superclass protected String hornSound; // Constructor for Subclass public TeslaModelS(String brandName, double range, double doorNumber, double maxSpeed, String hornSound) { // We use the Superclass constructor for the shared attributes through the keyword &quot;super&quot; super(brandName, range, doorNumber, maxSpeed); // hornSound is not in the Superclass, so we add it separately in the constructor this.hornSound = hornSound; } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } // Here, we don&#39;t fully change the functionality of the existing horn method in the superclass // Instead, we take all of the functionality of the superclass method, and then add on to it public void horn () { super.horn(); System.out.println(hornSound); } public static void main(String[] args) { // 5 argument constructor TeslaModelS modelS = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;eugh&quot;); // Example of late binding Car car = new TeslaModelS(&quot;Tesla&quot;, 396, 4, 200, &quot;brrr&quot;); // We can still use the methods from the child class, even though we didn&#39;t mention them in the subclass! modelS.gas(); // Using the overridden method modelS.gearShift(); modelS.steer(); // Using the method we added on to modelS.horn(); car.horn(); } } TeslaModelS.main(null); . Go! Use the gear selector next to the wheel turning right... honking... eugh honking... brrr . Writing Constructors for Subclasses . In the previous example, the TeslaModelS class was a subclass. Recall that a constructor is what initializes the values of the attributes of a class when a new object of the class is created. How do we write constructors for subclasses? . Well, if the attributes of the subclass are exactly the same as the attributes of the superclass, then we can just use the constructor of the superclass. Take a look at the superclass, the Car class. We have defined a constructor within that class already. . To use the constructor of the superclass in our subclass, we need to use some specific syntax. Namely, we need to make use of the super keyword. This allows us to use constructors that we define in the superclass. . Look again at the constructor in the TeslaModelS class. We have passed in 4 attributes to the super constructor, meaning that we are making use of the 4 argument constructor in the superclass. . But our subclass also has an additional attribute: hornSound. We don&#39;t include this in the superclass since this isn&#39;t customizable for most cars. This attribute needs to be included in the constructor for our subclass, but it doesn&#39;t make sense to make a completely new constructor for all 5 attributes when 4 of the attributes are shared with the superclass. . So, what we do is call the superclass constructor with 4 attributes, but then simply add an additional assignment for the 5th, unique, attribute. . Hack 1 . In your own notebook, make any class with 2 attributes and 0 methods. Create a 2 argument constructor for that class. This will be your superclass. Now, create a subclass that extends from the superclass you made. Create 1 additional attribute in your subclass that was not present in the superclass. . Then, create a constructor for the subclass that uses the superclass constructor with the super keyword, and then adds an additional assignment for the third attribute. . Overriding Methods . Overriding allows a subclass or child class to provide a specific implementation of a method that has already been provided by a super-classes or parent classes. When a method in a subclass has the same name, same parameters or signature, and same return type (or sub-type) as a method in its super-class, then the method in the subclass will override the method in the super-class. . . // the existing method in the superclass public void gearShift () { System.out.println(&quot;Use the stick&quot;); } public void steer () { System.out.println(&quot;turning left...&quot;); } // We use override to change the functionality in the subclass of an existing method in the superclass @Override public void gearShift () { System.out.println(&quot;Use the gear selector next to the wheel&quot;); } public void steer () { System.out.println(&quot;turning right...&quot;); } . Hack 2 . Add a method to the superclass you created before. This method should be very general; it should only have functionality that you know for sure will be needed in almost every single subclass. In your subclass, override this method. Remember that overriding the method will give your subclass the specific functionality it needs from that method. . Super Keyword . The two main uses of the super keyword are to use constructors in the superclass and methods in the superclass in a child class. . In this example child class TeslaModelS, the super keyword can be found in the constructor and the method horn. When it says, super(brandName, range, doorNumber, maxSpeed) in the constructor, the super keyword is used to utilize the super class constructor inside the child class. Next, in the horn() method, super.horn() is called. This line utilizes the super keyword to call the method horn() from the parent class Car. . Creating References Using Inheritance Hierarchies . Type Diagram . It is similar to looking at it like a family tree. A is the superclass, or the head of the family. The descendants are the subclasses. . So . public class A public class B extends A public class C extends B . A Reference refers to an object of the class, or the object of an inherited class. So an Inheritance Hierarchy can create references . . Polymorphism . public class ToyotaCamry extends Car { public ToyotaCamry (String brandName, double range, double doorNumber, double maxSpeed) { super(brandName, range, doorNumber, maxSpeed); } @Override public void gearShift () { System.out.println(&quot;Manual shift!&quot;); } public void turbo (int a) { System.out.println(&quot;Engaging turbo &quot; + a); } public void turbo (int a, int b) { System.out.println(&quot;Engaging turbo &quot; + a + &quot; and nitro &quot; + b); } public static void main(String[] args) { // 4 superclass argument constructor ToyotaCamry camry = new ToyotaCamry(&quot;Toyota&quot;, 348, 4, 145); // Using the overridden method camry.gearShift(); // Using the overloaded method camry.turbo(1); camry.turbo(1, 1); } } ToyotaCamry.main(null); . Manual shift! Engaging turbo 1 Engaging turbo 1 and nitro 1 . Polymorphism means &quot;many forms&quot;. It means that we do one thing in many ways through inheritance. . For example, the gearShift method defined in the superclass simply says to use the stick. But in manual cars and a Tesla, you need to do different things. So, we show the method to shift gears being used in two different ways in two different classes. We can have two different implementations through overriding methods. . Look at the different outputs for the method in the ToyotaCamry and TeslaModelS class. . This method of polymorphism is called Runtime Polymorphism. It is also called Dynamic Binding or Dynamic Method Dispatch. When you hear any of these things, think of method overriding. . Imagine if you want to do a single method in a single class, but in different ways. For example, in the ToyotaCamry class, we need to either engage a turbo by itself, or a turbo with a nitro. So, we have two methods called turbo. When the method is called, the actual functionality is resolved at compile-time. . When we call camry.turbo(1), then the single argument turbo method is called. When we call camry.turbo(1, 1), the two argument turbo method is called. . Having two methods with the same name but different arguments and functionalities is called method overloading. . This is another form of polymorphism called Compile Time Polymorphism or Static Polymorphism. When you see these terms, think of method overloading. . Early binding has to do with when the compiler decides the method to be called. Relate this to Static Polymorphism or method overloading. Late binding has to do with when the method is decided at runtime. Relate this to Runtime Polymorphism or method overriding. . Hack 3 . Create another subclass from your original superclass. Now, implement method overloading in this subclass. Remember that this means having two methods with the same name, but with different arguments. The method you are using for method overloading doesn&#39;t have to exist in the superclass. This will implement Static Polymorphism. . Next, override the method in your superclass in your new subclass. Make sure it has different functionality than your method in the other subclass. This will implement Runtime Polymorphism. . Object Superclass . Important Things to Know . Object class is the superclass of all other classes in Java | Object is part of the java.lang package (know for imports) | Important Object class methods include: boolean equals(Object x) &amp; String toString() | Object class&#39; subclasses override the equals and toString methods | . toString Method . Prints out the attributes of an object | Converts string object into a string | . equals Method . Compares two strings | Returns a boolean value of true if equal, otherwise returns false | . // Demonstration of toString method // Utilized toString methods in all FRQs so far, here&#39;s an example from FRQ1 public String dayOfWeekToString() { return (&quot;{ &quot;month &quot;: &quot; + this.month + &quot;, &quot; + &quot; &quot;day &quot;: &quot; + this.day + &quot;, &quot; + &quot; &quot;year &quot;: &quot; + this.year + &quot;, &quot; + &quot; &quot;dayOfWeek &quot;: &quot; + this.dayOfWeek + &quot; }&quot;); } public String toString() { return dayOfWeekToString(); } . // Demonstration of equals method // Outputs boolean value of true or false // If one object equals another public class Student { private String name; public Student(String name) { this.name = name; } public static void main(String[] args) { Student student1 = new Student(&quot;Bob&quot;); Student student2 = new Student(&quot;Jeff&quot;); Student student3 = student1; Student student4 = new Student(&quot;A&quot;); Student student5 = student4; System.out.println(student1.equals(student2)); System.out.println(student2.equals(student3)); System.out.println(student1.equals(student3)); System.out.println(student3.equals(student4)); System.out.println(student3.equals(student4)); System.out.println(student5.equals(student4)); } } Student.main(null); . false false true false false true . Final Homework . Polish up all of the hacks from this lesson. Completed hacks will earn you 0.9/1. . For 1/1, submit a complete blog. This means highlighting all key vocabulary, and including original comments in your code to show understanding. This will also help you for Mr. Mort&#39;s live review on Thursday. . Grades . Team Grade Reason . 1: Lily Wu, William Wu, Vidhi Kulkarni, Riya Patil, Saathvika Ajith | 1/1 | Hacks are performed correctly with interesting use case of Cats. Really good blog with vocab definitions and some code comments. | . 2: Serafina | 1/1 | Vocabulary is included along with candy inheritance example. All hacks done correctly | . 3: Sanjay, Karthik, Evan, Pranav, Jay | 0.95/1 | Good work completing all hacks using countries for inheritance example. No vocabulary is highlighted, but code comments are included. | . 4: Avinh | 0.95/1 | Good work implementing inheritance with chess pieces. Also included vocabulary. Only thing that is missing is implementation of Runtime Polymorphism by overriding in 2 separate subclasses. | . 5: Kinish Sathish, Ritvik Keerthi, Samuel Wang, Everitt Cheng | 1/1 | Hacks are all done with inheritance use case of animals. Good work on adding comments in code that show understanding, as well as complete blog with vocab. | . 7: Shraddha, Bria, Calissa, Evan | 1/1 | Hacks are performed correctly with candy inheritance example. Also included notes on key terms. | . 8: Bailey Say, Andrew Meng, Nicholas Mounier, Rohan Juneja, Aarav Arora | 0.95/1 | Good work on identifying a use case for inheritance and creating a detailed blog with vocabulary. The only thing missing is finishing Hack 3, which would require two subclasses to implement Runtime Polymorphism. | . 9: Hetvi Trivedi, Brian Tang, Iris Yang, and Ellen Xu | 1/1 | Hacks are performed correctly with interesting use case of Iphones. Covered all of the important vocabulary in blog as well. | .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/12/08/InheritanceLesson.html",
            "relUrl": "/cb/2022/12/08/InheritanceLesson.html",
            "date": " • Dec 8, 2022"
        }
        
    
  
    
        ,"post12": {
            "title": "Unit 8 - 2D Arrays",
            "content": "Learning Objective! . Represent collections of related primitive and object reference data using two dimensional array objects. . 2D Array Vocab: . Array = a data structure used to implement a collection (list) of primitive or object reference data | Element = a single value in the array | Index = the position of the element in the array (starts from 0) | Array Length = the number of elements in the array Is public, so can be accessed in any class | Is also final, so can’t change it after array has been created | . | . The Basics: . A 2D array is an array of arrays, and can be a better way to store data | Declaring a 2D array: DataType[][] nameOf2DArray | . | Initializing a 2D array DataType[][] nameOf2DArray = new DataType[r][c]; r = # of rows The # of arrays in the array | r = list.length c = # of columns | . | The # of elements in the inner arrays | c = list[0].length | . | . | . | . Initializing a Sample Array: . public class Test { public static void main(String[] args) { int[][] arr = { { 1, 2, 3 }, { 4, 5, 6 }, { 7, 8, 9 } }; System.out.println(&quot;arr[0][0] = &quot; + arr[0][0]); System.out.println(&quot;arr[1][2] = &quot; + arr[1][2]); System.out.println(&quot;arr[2][1] = &quot; + arr[2][1]); } } Test.main(null); . arr[0][0] = 1 arr[2][0] = 6 arr[2][1] = 8 . Accessing and Updating Elements of a 2D Array: . nameOf2DArray[r][c] | . Hack 1: Access the last element of the 2D Array list: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot; } }; System.out.println(arr[2][2]); } } Test.main(null); . i . a quick tip for the future: list[list.length - 1][list[0].length - 1] | Updating an element: list[r][c] = value; | . | . Hack 2: Changing a Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Change Austin to Athens and print! System.out.println(&quot;Change Austin to Athens and print!&quot;); arr[2][0] = &quot;Athens&quot;; System.out.println(arr[2][0]); } } Test.main(null); . Change Austin to Athens and print! Athens . Nested Loops, Our Beloved: . You can use Nested Loops to traverse 2D Arrays for example: to print out an entire array in order, you need to use these | . | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;a&quot;, &quot;f&quot;, &quot;g&quot;, &quot;l&quot; }, { &quot;b&quot;, &quot;e&quot;, &quot;h&quot;, &quot;k&quot; }, { &quot;c&quot;, &quot;d&quot;, &quot;i&quot;, &quot;j&quot; } }; for (int row = 0; row &lt; 3; row++) { for (int col = 0; col &lt; 4; col++) { System.out.print(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . a f g l b e h k c d i j . Make sure your columns for loop is always inside your rows for loop! Unless you want it printed the other way of course | . | Print spaces and lines in between to make a neater matrix | . Hack 3: Unknown Dimensions: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; // Print out the array without using numerical values! for(int row =0; row &lt; arr.length; row++) { for(int col=0; col &lt; arr[row].length; col++) { System.out.println(arr[row][col] + &quot; &quot;); } System.out.println(&quot; &quot;); } } } Test.main(null); . Atlanta Baltimore Chicago Australia Boston Cincinnati Austin Beaumont Columbus . Searching for a Value in a 2D Array: . Here&#39;s a quick example to illustrate: | . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String match = &quot;&quot;; String name = &quot;Boston&quot;; for (String[] row : arr) { for (String item : row) { if (item.equals(name)) { match = name; } } } if (match.length() == 0) { System.out.println(&quot;No Match!&quot;); } else { System.out.println(name); } } } Test.main(null); . Boston . Note: in the code, you see the use of : which essentially means within. | . Hack 4: Finding the Min/Max Value: . public class Test { public static void main(String[] args) { String[][] arr = { { &quot;Atlanta&quot;, &quot;Baltimore&quot;, &quot;Chicago&quot; }, { &quot;Australia&quot;, &quot;Boston&quot;, &quot;Cincinnati&quot; }, { &quot;Austin&quot;, &quot;Beaumont&quot;, &quot;Columbus&quot; } }; String longest = arr[0][0]; String shortest = arr[0][0]; // Use nested for loops to find the longest or shortest string! System.out.println(&quot;Use nested for loops to find the longest or shortest string!&quot;); for(int row =0; row &lt; arr.length; row++) { for(int col=0; col &lt; arr[row].length; col++) { if (arr[row][col].length() &gt; longest.length()) { longest = arr[row][col]; } } } System.out.println(&quot;Longest String: &quot; + longest); for(int row =0; row &lt; arr.length; row++) { for(int col=0; col &lt; arr[row].length; col++) { if (arr[row][col].length() &lt; shortest.length()) { shortest = arr[row][col]; } } } System.out.println(&quot;Shortest String: &quot; + shortest); } } Test.main(null); . Use nested for loops to find the longest or shortest string! Longest String: Cincinnati Shortest String: Boston . Extra Credit: Christmas Tree . int height = 10; String[][] arr = new String[height][height]; for (int col=0; col&lt;=height; col+=2) { System.out.println(&quot; &quot;.repeat(height - col/2) +&quot;*&quot;.repeat(col)); } System.out.println(&quot; &quot;.repeat(height - 1) + &quot;*&quot;.repeat(2)); System.out.println(&quot; &quot;.repeat(height - 1) + &quot;*&quot;.repeat(2)); . ** **** ****** ******** ********** ** ** . HW! . Please submit screenshots of your 4 hacks up and running to our Google Form, which also has a few 2D array related multiple choice questions. . Additionally, Complete and send a screenshot of your code for 2017 FRQ Q4: Successor Array in that same google form. . Please submit as a pair or group. .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/12/06/2DArray.html",
            "relUrl": "/cb/2022/12/06/2DArray.html",
            "date": " • Dec 6, 2022"
        }
        
    
  
    
        ,"post13": {
            "title": "Unit 7 Work",
            "content": "Hack 1 . // HACK!!!! // Create an arrayList and use one of the cool methods for it import java.util.ArrayList; import java.lang.Math; public class hack1 { public static void main (String[] args) { ArrayList&lt;Integer&gt; arr = new ArrayList&lt;Integer&gt;(); arr.add(5); arr.add(4); arr.add(3); int min = 0; int max = arr.size(); int range = max - min; for (int i = 0; i &lt; 5; i++) { int rand = (int)(Math.random() * range) + min; System.out.println(arr.get(rand)); } } } hack1.main(null); . 5 5 4 5 3 . Key Learning on Wrapper Classes . An ArrayList cannot directly represent primitive datatypes. In the above example, I wanted an ArrayList of integers. The datatype that I provide is not int - it is instead Integer. . At a lower level, wrapper classes are classes that encapsulate data types, so that you can create objects of those datatypes. You can only have an ArrayList of objects, so this is one good use case for wrapper classes. . Hack 2 . import java.util.ArrayList; public class main { public static void main(String[] args) { ArrayList&lt;String&gt; color = new ArrayList&lt;String&gt;(); color.add(&quot;red apple&quot;); color.add(&quot;green box&quot;); color.add(&quot;blue water&quot;); color.add(&quot;red panda&quot;); for (int i = 0; i &lt; color.size(); i++) { if(color.get(i).contains(&quot;red&quot;)) { color.remove(i); } } System.out.println(color); } } /*/ using if(color.get(i).contains(&quot;red&quot;)) iterate through the arraylist and remove all elements that contain the word red in them /*/ main.main(null); . [green box, blue water] . Hack 3 . // find the sum of the elements in the arraylist ArrayList&lt;Integer&gt; num = new ArrayList&lt;Integer&gt;(); num.add(5); num.add(1); num.add(3); public int sum = 0; for (int i = 0; i&lt;num.size(); i++) { sum = sum + num.get(i); } System.out.println(sum); . 9 .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/11/30/Unit7.html",
            "relUrl": "/cb/2022/11/30/Unit7.html",
            "date": " • Nov 30, 2022"
        }
        
    
  
    
        ,"post14": {
            "title": "Unit 1 Video Hacks",
            "content": "Hack 1.1 . public class Printing { public static void main (String[] args) { System.out.println(&quot;Sahil&quot;); System.out.println(&quot;Nathan&quot;); System.out.println(&quot;Kurtis&quot;); System.out.println(&quot;Rohit&quot;); } } Printing.main(null); . Sahil Nathan Kurtis Rohit . Hack 1.2 . public class Biodata { public static void main(String[] args) { String name = &quot;Sahil&quot;; int age = 17; boolean underclassmen = false; float height = 6; System.out.println(name); System.out.println(age); System.out.println(underclassmen); System.out.println(height); } } Biodata.main(null); . Sahil 17 false 6.0 . Hack 1.3 . public class Num { public static void main(String[] args) { double num = (6 * 1234124 / 11345 - 890809 + 90800) % 980098; num = num / 100; System.out.println(num); } } Num.main(null); . -7993.57 . Hack 1.4 . public class Operators { public static void main(String[] args) { int x = 0; x += 5; x -= 4; x *= 20; x /= 5; x /= 2; x %= 2; x ++; x --; System.out.println(x); } } Operators.main(null); . 0 . Hack 1.5 . public class CastActivity { public static void main(String[] args) { int num1 = (int) 123456.123456; System.out.println(num1); int num2 = (int) 678901234567890; System.out.println(num2); } } CastActivity.main(null); . | int num2 = (int) 678901234567890; integer number too large .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/11/26/unit1Hacks.html",
            "relUrl": "/cb/2022/11/26/unit1Hacks.html",
            "date": " • Nov 26, 2022"
        }
        
    
  
    
        ,"post15": {
            "title": "2014 Practice Exam MCQ",
            "content": "Final Score . I scored a 39/40. My only mistake was due to a gap in knowledge of data types. . Corrections . Question 4: What is printed as a result of executing the code segment? . int x = 7; int y = 3; if ((x &lt; 10) &amp;&amp; (y &lt; 0)) System.out.println(&quot;Value is: &quot; + x * y); else System.out.println(&quot;Value is: &quot; + x / y); . Value is: 2 . The answer that I put was 2.3333333... . Since 7/3&#39;s true value is that. However, since 7 and 3 are both integers, floating point divison does not occur. Instead, integer division occurs, which means that the number is rounded to 2. The output in the above cell confirms this. . Thus, the output is not . Value is: 2.3333333 . But is instead: . Value is: 2 . Casting, for Truncating/Rounding . Alternative lesson in casting for this. Here, we will start x and y as floats, and expect division to yield another float. Then we will cast to int to round to nearest whole number. . float x = 7; float y = 3; if ((x &lt; 10) &amp;&amp; (y &lt; 0)) System.out.println(&quot;Value is: &quot; + x * y); else System.out.println(&quot;Value is: &quot; + x / y); . Value is: 2.3333333 . float x = 7; float y = 3; if ((x &lt; 10) &amp;&amp; (y &lt; 0)) System.out.println(&quot;Value is: &quot; + x * y); else System.out.println(&quot;Value is: &quot; + (int) (x / y)) ; . Value is: 2 .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/11/06/2014MC.html",
            "relUrl": "/cb/2022/11/06/2014MC.html",
            "date": " • Nov 6, 2022"
        }
        
    
  
    
        ,"post16": {
            "title": "Unit 6 Work",
            "content": "Key Learnings . Arrays have a fixed size, while Arraylists do not. . Can make arrays pre-initialized or with constructors. . ArrayIndexOutOfBoundsException thrown can happen when using loops to access array elements . Hack 1 . int[] arrayOne = {1, 3, 5, 7, 9}; for (int num : arrayOne) { if (num % 2 == 0) { System.out.println(num); } } . Hack 2 . // B . Hack 3 . import java.util.Arrays; public class arraySorter { public static void main(int[] a) { Arrays.sort(a); for (int i : a) { System.out.println(i); } } } int[] myNumbers = new int[] {5, 3, 4, 1, 2}; arraySorter.main(myNumbers); . 1 2 3 4 5 . Hack 4 . // B . Hack 5 . public class ForEachDemo { public static void main(String[] args) { int[] highScores = { 10, 9, 8, 8}; String[] names = {&quot;Jamal&quot;, &quot;Emily&quot;, &quot;Destiny&quot;, &quot;Mateo&quot;}; // for each loop with an int array for (int value : highScores) { System.out.println( value ); } // for each loop with a String array for (String value : names) { System.out.println(value); // this time it&#39;s a name! } } } . Hack 6 . // D . Hack 7 . public class leftShifted { public static int[] main(int[] a) { int first = a[0]; for (int i=1; i&lt;a.length; i++) { a[i-1] = a[i]; } a[a.length-1] = first; return a; } } int[] array = {7,9,4}; int[] array_out = leftShifted.main(array); Arrays.toString(array_out) . [9, 4, 7] . Hack 8 . public class findDuplicate { public static int main(int[] a, int b) { int d=0; for (int number : a) { if (number==b) { d++; } } return d; } } int[] array = {7,7,9,4}; findDuplicate.main(array, 7); . 2 . Hack 9 . public class reverseString { public static char[] main(char[] s) { char[] reverse = new char[s.length]; for (int i=s.length-1; i&gt;=0; i--) { reverse[s.length-i-1] = s[i]; } return reverse; } } String s = &quot;hello&quot;; char[] c = s.toCharArray(); char[] reverse = reverseString.main(c); // Arrays.toString(reverse) String reversed = new String(reverse); System.out.println(reversed); . olleh . FRQ Part A . public void addMembers(String[] names, int gradYear) { for (String name : names) { MemberInfo member = new MemberInfo(name, gradYear, true); memberList.add(member); } } .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/11/01/unit6.html",
            "relUrl": "/cb/2022/11/01/unit6.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post17": {
            "title": "Unit 5 Work",
            "content": "Key Learnings . Object&#39;s state: Attributes of an object and their values at a given time. . Static variables and methods belong to a class, not to a specific object. . 2019 FRQ Q2 . public class StepTracker { private int lowerBound; private int steps; private int totalDays; private int activeDays; public StepTracker(int minSteps) { lowerBound = minSteps; steps = 0; totalDays = 0; activeDays = 0; } public void addDailySteps(int newSteps) { steps += newSteps; totalDays += 1; if (newSteps &gt;= lowerBound) { activeDays += 1; } } public int activeDays(){ return activeDays; } public double averageSteps() { if (totalDays == 0) { return (double) totalDays; } else { return (double) steps / totalDays; } } public static void main(String[] args){ StepTracker tr = new StepTracker(10000); System.out.println(tr.activeDays()); System.out.println(tr.averageSteps()); tr.addDailySteps(9000); System.out.println(tr.averageSteps()); tr.addDailySteps(23000); System.out.println(tr.activeDays()); } } StepTracker.main(null); . 0 0.0 9000.0 1 .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/10/25/unit5.html",
            "relUrl": "/cb/2022/10/25/unit5.html",
            "date": " • Oct 25, 2022"
        }
        
    
  
    
        ,"post18": {
            "title": "Unit 3 Work",
            "content": "Key Learnings from Presentation . Short-circuited evaluation: The result of a compound Boolean expression can be determined just by looking at a few expressions. . De Morgan&#39;s laws: Help simplify Boolean expressions . !(a&amp;&amp;b) = (!a || !b) . !(a || b) = (!a &amp;&amp; !b) . FRQ . Part A . Write the static method numberOfLeapYears, which returns the number of leap years between year1 and year2, inclusive. In order to calculate this value, a helper method is provided for you. • isLeapYear(year) returns true if year is a leap year and false otherwise. Complete method numberOfLeapYears below. You must use isLeapYear appropriately to receive full credit. . public static int numberOfLeapYears(int year1, int year2){ int numLeapYears = 0; for(int i = year1; i &lt;= year2; i++){ if(isLeapYear(i)){ numLeapYears++; } } return numLeapYears; } . Part B . Write the static method dayOfWeek, which returns the integer value representing the day of the week for the given date (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, 2019 began on a Tuesday, and January 5 is the fifth day of 2019. As a result, January 5, 2019, fell on a Saturday, and the method call dayOfWeek(1, 5, 2019) returns 6. As another example, January 10 is the tenth day of 2019. As a result, January 10, 2019, fell on a Thursday, and the method call dayOfWeek(1, 10, 2019) returns 4. In order to calculate this value, two helper methods are provided for you. • firstDayOfYear(year) returns the integer value representing the day of the week for the first day of year, where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. For example, since 2019 began on a Tuesday, firstDayOfYear(2019) returns 2. • dayOfYear(month, day, year) returns n, where month, day, and year specify the nth day of the year. For the first day of the year, January 1 (month = 1, day = 1), the value 1 is returned. This method accounts for whether year is a leap year. For example, dayOfYear(3, 1, 2017) returns 60, since 2017 is not a leap year, while dayOfYear(3, 1, 2016) returns 61, since 2016 is a leap year. Complete method dayOfWeek below. You must use firstDayOfYear and dayOfYear appropriately to receive full credit. . public static int daysOfWeek(int month, int day, int year){ int firstDay = firstDayOfYear(year); int nth = dayOfYear(month, day, year); int returnDay = ((firstDay + nth) -1) % 7; return returnDay; } . Completed Code . public class APCalendar{ /** Returns true if year is a leap year and false otherwise. */ private static boolean isLeapYear(int year) { /* implementation not shown */ } /** Returns the number of leap years between year1 and year2, inclusive. * Precondition: 0 &lt;= year1 &lt;= year2 */ public static int numberOfLeapYears(int year1, int year2){ int numLeapYears = 0; for(int i = year1; i &lt;= year2; i++){ if(isLeapYear(i)){ numLeapYears++; } } return numLeapYears; } /** Returns the value representing the day of the week for the first day of year, * where 0 denotes Sunday, 1 denotes Monday, ..., and 6 denotes Saturday. */ private static int firstDayOfYear(int year) { /* implementation not shown */ } /** Returns n, where month, day, and year specify the nth day of the year. * Returns 1 for January 1 (month = 1, day = 1) of any year. * Precondition: The date represented by month, day, year is a valid date. */ private static int dayOfYear(int month, int day, int year) { /* implementation not shown */ } /** Returns the value representing the day of the week for the given date * (month, day, year), where 0 denotes Sunday, 1 denotes Monday, ..., * and 6 denotes Saturday. * Precondition: The date represented by month, day, year is a valid date. */ public static int daysOfWeek(int month, int day, int year){ int firstDay = firstDayOfYear(year); int nth = dayOfYear(month, day, year); int returnDay = ((firstDay + nth) -1) % 7; return returnDay; } // There may be instance variables, constructors, and other methods not shown. } . Conditionals Exercises . 2 . import java.util.Scanner; public class Exercise2 { public static void main(String[] Strings) { Scanner input = new Scanner(System.in); System.out.print(&quot;Input a: &quot;); double a = input.nextDouble(); System.out.print(&quot;Input b: &quot;); double b = input.nextDouble(); System.out.print(&quot;Input c: &quot;); double c = input.nextDouble(); double result = b * b - 4.0 * a * c; if (result &gt; 0.0) { double r1 = (-b + Math.pow(result, 0.5)) / (2.0 * a); double r2 = (-b - Math.pow(result, 0.5)) / (2.0 * a); System.out.println(&quot;The roots are &quot; + r1 + &quot; and &quot; + r2); } else if (result == 0.0) { double r1 = -b / (2.0 * a); System.out.println(&quot;The root is &quot; + r1); } else { System.out.println(&quot;The equation has no real roots.&quot;); } } } Exercise2.main(null); . Input a: Input b: Input c: The roots are -0.4384471871911697 and -4.561552812808831 . 4 . import java.util.Scanner; public class Exercise4 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input value: &quot;); double input = in.nextDouble(); if (input &gt; 0) { if (input &lt; 1) { System.out.println(&quot;Positive small number&quot;); } else if (input &gt; 1000000) { System.out.println(&quot;Positive large number&quot;); } else { System.out.println(&quot;Positive number&quot;); } } else if (input &lt; 0) { if (Math.abs(input) &lt; 1) { System.out.println(&quot;Negative small number&quot;); } else if (Math.abs(input) &gt; 1000000) { System.out.println(&quot;Negative large number&quot;); } else { System.out.println(&quot;Negative number&quot;); } } else { System.out.println(&quot;Zero&quot;); } } } Exercise4.main(null); . Input value: Positive number . 6 . import java.util.Scanner; public class Exercise6 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input floating-point number: &quot;); double x = in.nextDouble(); System.out.print(&quot;Input floating-point another number: &quot;); double y = in.nextDouble(); x = Math.round(x * 1000); x = x / 1000; y = Math.round(y * 1000); y = y / 1000; if (x == y) { System.out.println(&quot;They are the same up to three decimal places&quot;); } else { System.out.println(&quot;They are different&quot;); } } } Exercise6.main(null); . Input floating-point number: Input floating-point another number: They are different . 8 . import java.util.Scanner; public class Exercise8 { public static void main(String[] args) { Scanner in = new Scanner(System.in); System.out.print(&quot;Input an alphabet: &quot;); String input = in.next().toLowerCase(); boolean uppercase = input.charAt(0) &gt;= 65 &amp;&amp; input.charAt(0) &lt;= 90; boolean lowercase = input.charAt(0) &gt;= 97 &amp;&amp; input.charAt(0) &lt;= 122; boolean vowels = input.equals(&quot;a&quot;) || input.equals(&quot;e&quot;) || input.equals(&quot;i&quot;) || input.equals(&quot;o&quot;) || input.equals(&quot;u&quot;); if (input.length() &gt; 1) { System.out.println(&quot;Error. Not a single character.&quot;); } else if (!(uppercase || lowercase)) { System.out.println(&quot;Error. Not a letter. Enter uppercase or lowercase letter.&quot;); } else if (vowels) { System.out.println(&quot;Input letter is Vowel&quot;); } else { System.out.println(&quot;Input letter is Consonant&quot;); } } } Exercise8.main(null); . Input an alphabet: Input letter is Vowel . 10 . public class Exercise10 { public static void main(String[] args) { int i; System.out.println (&quot;The first 10 natural numbers are: n&quot;); for (i=1;i&lt;=10;i++) { System.out.println (i); } System.out.println (&quot; n&quot;); } } Exercise10.main(null); . The first 10 natural numbers are: 1 2 3 4 5 6 7 8 9 10 . 12 . import java.util.Scanner; public class Exercise12 { public static void main(String[] args) { int i,n=0,s=0; double avg; { System.out.println(&quot;Input the 5 numbers : &quot;); } for (i=0;i&lt;5;i++) { Scanner in = new Scanner(System.in); n = in.nextInt(); s +=n; } avg=s/5; System.out.println(&quot;The sum of 5 no is : &quot; +s+&quot; nThe Average is : &quot; +avg); } } Exercise12.main(null); . Input the 5 numbers : The sum of 5 no is : 15 The Average is : 3.0 . 14 . import java.util.Scanner; public class Exercise14 { public static void main(String[] args) { int j,n; System.out.print(&quot;Input the number(Table to be calculated): &quot;); { System.out.print(&quot;Input number of terms : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); System.out.println (&quot; n&quot;); for(j=0;j&lt;=n;j++) System.out.println(n+&quot; X &quot;+j+&quot; = &quot; +n*j); } } } Exercise14.main(null); . Input the number(Table to be calculated): Input number of terms : 6 X 0 = 0 6 X 1 = 6 6 X 2 = 12 6 X 3 = 18 6 X 4 = 24 6 X 5 = 30 6 X 6 = 36 . 16 . import java.util.Scanner; public class Exercise16 { public static void main(String[] args) { int i,j,n; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(j); System.out.println(&quot;&quot;); } } } Exercise16.main(null); . Input number of rows : 1 12 123 1234 12345 . 18 . import java.util.Scanner; public class Exercise18 { public static void main(String[] args) { int i,j,n,k=1; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); n = in.nextInt(); for(i=1;i&lt;=n;i++) { for(j=1;j&lt;=i;j++) System.out.print(k++); System.out.println(&quot;&quot;); } } } Exercise18.main(null); . Input number of rows : 1 23 456 78910 . 20 . import java.util.Scanner; public class Exercise20 { public static void main(String[] args) { int numberOfRows; System.out.print(&quot;Input number of rows : &quot;); Scanner in = new Scanner(System.in); numberOfRows = in.nextInt(); int number = 1; for (int row = 1; row &lt;= numberOfRows; row++) { for (int column = 1; column &lt;= row; column++) { System.out.print(number + &quot; &quot;); number++; } System.out.println(); } } } Exercise20.main(null); . Input number of rows : 1 2 3 4 5 6 7 8 9 10 .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/10/24/Unit3.html",
            "relUrl": "/cb/2022/10/24/Unit3.html",
            "date": " • Oct 24, 2022"
        }
        
    
  
    
        ,"post19": {
            "title": "Unit 4 Work",
            "content": "Key Learnings . Can loop through strings, since they can be thought of as arrays of chars. . for-each loop iterates through arrays with specified datatypes. Sometimes called enhanced for loops. . Related info: Do While Loop . A Do While loop is similar to a while loop. However, a while loop checks the condition before executing for the first time. A Do While loop checks the condition after each execution, meaning that it is guaranteed to execute at least one time. Both loops continue to execute until the condition is fulfilled. . // Example of for-each loop public class ForEach { public static void main(String[] args) { String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; for (String letter: letters) { System.out.print(&quot; &quot; + letter); } } } ForEach.main(null); . a b c d e f g h i j k l m n o p q r s t u v w x y z . Hack 1 . public class WhileLoops { public double money = 0; public double profit = 5450000; public double goal = 30000000; public double years = 0; public void Calc() { while (this.money &lt; this.goal) { this.money = this.money + this.profit; this.profit = this.profit * 1.05; this.years = this.years + 1; } System.out.println(this.years); } public static void main(String[] args) { WhileLoops obj = new WhileLoops(); obj.Calc(); } } WhileLoops.main(null); . 5.0 . Hack 2 . public class ForLoops { public double temp = 0; public void Calc() { System.out.println(&quot;Numbers 10-15&quot;); for (int x = 10; x &lt;= 15; x++) { System.out.println(x); } System.out.println(&quot;Convert temperature&quot;); for (int x = 0; x&lt;=100; x+=10) { temp = 0; temp = x + 273.15; System.out.println(x + &quot;c -&gt; &quot; + temp + &quot;k&quot;); } } public static void main(String[] args) { ForLoops obj = new ForLoops(); obj.Calc(); } } ForLoops.main(null); . Numbers 10-15 10 11 12 13 14 15 Convert temperature 0c -&gt; 273.15k 10c -&gt; 283.15k 20c -&gt; 293.15k 30c -&gt; 303.15k 40c -&gt; 313.15k 50c -&gt; 323.15k 60c -&gt; 333.15k 70c -&gt; 343.15k 80c -&gt; 353.15k 90c -&gt; 363.15k 100c -&gt; 373.15k . Caesar Cipher Homework . public class CaesarCipher { public String[] letters = {&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;, &quot;f&quot;, &quot;g&quot;, &quot;h&quot;, &quot;i&quot;, &quot;j&quot;, &quot;k&quot;, &quot;l&quot;, &quot;m&quot;, &quot;n&quot;, &quot;o&quot;, &quot;p&quot;, &quot;q&quot;, &quot;r&quot;, &quot;s&quot;, &quot;t&quot;, &quot;u&quot;, &quot;v&quot;, &quot;w&quot;, &quot;x&quot;, &quot;y&quot;, &quot;z&quot;}; public String temp; // Method which takes a string and swaps a character static char[] swap(String str, int i, char j) { char ch[] = str.toCharArray(); ch[i] = j; return ch; } public String Calc(String message) { temp = message; // Looping through each character in the message for (int i=0; i&lt;temp.length(); i++) { // Cast the character to ascii to make substitutions much more efficient int ascii = (int) temp.charAt(i); // Letters at the end of the alphabet behave differently, so we create two separate conditionals if (ascii &gt; 64 &amp;&amp; ascii &lt; 88 || (ascii &gt; 96 &amp;&amp; ascii &lt; 120)) { ascii = ascii + 3; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } // This is for the last three letters of the alphabet else if (ascii &gt; 87 &amp;&amp; ascii &lt; 91 || ascii &gt; 119 &amp;&amp; ascii &lt; 123) { ascii = ascii - 23; String tempSwap = new String(swap(temp, i, (char) ascii)); temp = tempSwap; } } return temp; } public static void main(String[] args) { CaesarCipher cipherCalc = new CaesarCipher(); String message1 = &quot;Kfzb gly!&quot;; String message2 = &quot;zlab zlab zlab&quot;; String message3 = &quot;prmbozxifcoxdfifpqfzbumfxifalzflrp&quot;; System.out.println(cipherCalc.Calc(message1)); System.out.println(cipherCalc.Calc(message2)); System.out.println(cipherCalc.Calc(message3)); } } CaesarCipher.main(null); . Nice job! code code code supercalifragilisticexpialidocious .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/10/21/unit4.html",
            "relUrl": "/cb/2022/10/21/unit4.html",
            "date": " • Oct 21, 2022"
        }
        
    
  
    
        ,"post20": {
            "title": "Unit 2 Work",
            "content": "Quiz . I learned that Static Initialization Blocks are mainly used to initialize static fields of a class. . Methods of an object class include equals(), hashCode(), and notify(). . FRQ . 1a . public int scoreGuess(String guess) { int count = 0; for (int i = 0; i &lt;= secret.length() - guess.length(); i++) { if (secret.substring(i, i + guess.length()).equals(guess)) { count++; } } return count * guess.length(); } . 1b . public String findBetterGuess(String guess1, String guess2) { if (scoreGuess(guess1) &gt; scoreGuess(guess2)) { return guess1; } if (scoreGuess(guess2) &gt; scoreGuess(guess1)) { return guess2; } if (guess1.compareTo(guess2) &gt; 0) { return guess1; } return guess2; } . Key Learning on Concatenation . In Java, Strings can be concatenated with mixed types. Examples shown below. . public class Strings { public static void main(String[] args) { String str1 = &quot;Hello World &quot;; int int1 = 1; String str2 = &quot;. Introducing... World &quot;; double double1 = 2.0; // We now concatenate using the &quot;+&quot; operator for strings. // Because Strings are immutable, this creates a new String object. String strConcat = str1 + int1 + str2 + double1; System.out.println(strConcat); } } Strings.main(null); . Hello World 1. Introducing... World 2.0 .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/10/17/unit2work.html",
            "relUrl": "/cb/2022/10/17/unit2work.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post21": {
            "title": "Unit 1 Work",
            "content": "import java.util.*; public class gradecalc { public static void main(String[] args) { Scanner sc = new Scanner(System.in); System.out.println(&quot;Final is part of the test category? true or false&quot;); boolean finalIsTest = sc.nextBoolean(); if (finalIsTest) { System.out.println(&quot;Current grade:&quot;); double grade = sc.nextDouble(); System.out.println(&quot;What percent of your grade is the tests category?&quot;); int testsPercent = sc.nextInt(); System.out.println(&quot;Your current grade (in tests category)?&quot;); double testsGrade = sc.nextDouble(); System.out.println(&quot;Total points in tests category currently?&quot;); int testsPoints = sc.nextInt(); System.out.println(&quot;Amount of points:&quot;); int finalPoints = sc.nextInt(); System.out.println(&quot;The grade you want:&quot;); double finalgrade = sc.nextDouble(); double percentReq = finalgrade - (grade - testsGrade * testsPercent/100.0); double testPointsNeeded = (percentReq/testsPercent) * (testsPoints + finalPoints); double finalPointsNeeded = testPointsNeeded - testsPoints; System.out.println(&quot;You need a &quot; + finalPointsNeeded + &quot; on the final.&quot;); } else { System.out.println(&quot;What is your current grade?&quot;); double grade = sc.nextDouble(); System.out.println(&quot;How much percent of your grade is the final?&quot;); int finalPercent = sc.nextInt(); System.out.println(&quot;What is your desired grade?&quot;); double target = sc.nextDouble(); double percentReq = target - (grade/100.0)*(100.0-finalPercent); double gradeNeeded = 100.0 * (percentReq/finalPercent); System.out.println(&quot;You need a &quot; + gradeNeeded + &quot; on the test.&quot;); } } } gradecalc.main(null); . Final is part of the test category? true or false Current grade: What percent of your grade is the tests category? Your current grade (in tests category)? Total points in tests category currently? Amount of points: The grade you want: You need a 40.0 on the final. .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/10/17/unit1work.html",
            "relUrl": "/cb/2022/10/17/unit1work.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post22": {
            "title": "Unit 1 and Unit 2 Notes",
            "content": "Unit 1 Primitive Types . String literal - an exact sequence of characters enclosed between two quotation marks | Different Errors Syntax/compiler error: program won&#39;t compile due to typos | Exception | Logic error: actual output differs from anticipated output ### Data Types | . | Determine what type of value is stored ### Variables | variable: name for memory location holding a certain type of value no spaces | can&#39;t start with # | no special characters (anything besides letters/digits) | no Java reserved keywords | use camelCase conventions #### Declaring | assignment operator (=) is used to initialize variable or change its associated value ### Primitive | . | Examples: boolean (1 bit) | int (32 bits) if the integer result of an expression is beyond the range there will be an overflow error | . | double (64 bits) ### Reference ### Arthmetic Operators | . | INCLUDES: +, -, *, /, % | operations with only int ==&gt; output int | operations with only double ==&gt; output double | operations with both int and double ==&gt; * output double | division by zero ==&gt; ArithmeticException ### Compound Assignment Operators and Incrememt/Decrement Operators | +=, -=, *=, /=, %= | Using these will change the value of the variable to the result of the operation | Increment/Decrement: ++: adds 1 | --: subtracts 1 | . | . Unit 2 Using Objects . Constructors . Used to initialize attributes for an object | . // Syntax example public Turtle{ public Turtle(String nm, int ag, boolean it){ // signature with formal parameters this.name = nm; this.age = ag; this.isTortoise = it; } public String name; public int age; public boolean isTortoise; } // call by value: pass actual parameters to constructor Turtle Shellbert = new Turtle(&quot;Shellbert&quot;, 4, true); // creating an object with &quot;new&quot; keyword calls constructor . Vocab . signature: constructor name and parameter list | parameter list: lists type of values passed and their variable names (formal parameters) parameter: value passed into a constructor (actual parameters), must match types specified in parameter list | call by value: initializes formal parameters with copies of the actual parameters | . | overloaded constructors: there are multiple constructors with same name, differing signatures | no argument constructor: constructor with no parameters, sets attributes (instance variables) of object to default values String: null | boolean: false | . | null: variable reference doesn&#39;t actually contain an object | .",
            "url": "https://ad1616.github.io/ADfastpages/cb/2022/10/17/unit1+2notes.html",
            "relUrl": "/cb/2022/10/17/unit1+2notes.html",
            "date": " • Oct 17, 2022"
        }
        
    
  
    
        ,"post23": {
            "title": "POJO with no Annotations",
            "content": "POJO with Annotations . import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import javax.persistence.*; @Data // Annotations to simplify writing code (ie constructors, setters) @NoArgsConstructor @AllArgsConstructor @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // Store joke likes private int dislike; // Store joke jeers } . POJO without Lombok . import javax.persistence.*; @Entity // Annotation to simplify creating an entity, which is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each entity instance corresponds to a row in that table. public class CarBrands { public CarBrands() { this.id = null; this.brand = &quot;&quot;; this.like = 0; this.dislike = 0; } public CarBrands(Long ID, String Brand, int Like, int Dislike) { this.id = null; this.brand = Brand; this.like = Like; this.dislike = Dislike; } @Id @GeneratedValue(strategy = GenerationType.AUTO) private Long id; // Unique identifier @Column(unique=true) private String brand; // The Joke private int like; // Store joke likes private int dislike; // Store joke jeers // Only have a getter for ID // Don&#39;t need to set since it auto generates public Long getID() { return this.id; } public String getBrand() { return this.brand; } public void setBrand(String Brand) { this.brand = Brand; } public int getLike() { return this.like; } public void setLike(int Like) { this.like = Like; } public int getDislike() { return this.dislike; } public void setDislike(int Dislike) { this.dislike = Dislike; } } .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/10/09/POJOnoAnnotations.html",
            "relUrl": "/java/2022/10/09/POJOnoAnnotations.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post24": {
            "title": "ArrayList",
            "content": "import java.util.*; public class ArrayListDocumentation { // Main driver method public static void main(String[] args) { // Implementing the list interface as an arraylist // Note: You can&#39;t instantiate an object of the List class. // The List interface describes a collection and supports things like iteration, or adding/deleting // ArrayList implements the List List&lt;String&gt; brands = new ArrayList&lt;String&gt;(); // Adding elements to ArrayList brands.add(&quot;Honda&quot;); brands.add(&quot;Toyota&quot;); brands.add(&quot;Tesla&quot;); System.out.println(&quot;Using the .add method 3 times.&quot;); System.out.println(brands); System.out.println(); // Using addAll method to add multiple elements to the ArrayList at once List&lt;String&gt; newBrands = new ArrayList&lt;String&gt;(); newBrands.add(&quot;BMW&quot;); newBrands.add(&quot;Porsche&quot;); newBrands.add(&quot;Nissan&quot;); brands.addAll(newBrands); System.out.println(&quot;Using the .addAll method to add 3 brands.&quot;); System.out.println(brands); } } ArrayListDocumentation.main(null); . Using the .add method 3 times. [Honda, Toyota, Tesla] Using the .addAll method to add 3 brands. [Honda, Toyota, Tesla, BMW, Porsche, Nissan] .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/10/09/ArrayList.html",
            "relUrl": "/java/2022/10/09/ArrayList.html",
            "date": " • Oct 9, 2022"
        }
        
    
  
    
        ,"post25": {
            "title": "Frontend for Like/Dislike Cars",
            "content": "Car Brand Like Dislike .",
            "url": "https://ad1616.github.io/ADfastpages/carAPI/review",
            "relUrl": "/carAPI/review",
            "date": " • Oct 6, 2022"
        }
        
    
  
    
        ,"post26": {
            "title": "Car API JS",
            "content": ". ID Car Brand Name .",
            "url": "https://ad1616.github.io/ADfastpages/carAPI",
            "relUrl": "/carAPI",
            "date": " • Oct 3, 2022"
        }
        
    
  
    
        ,"post27": {
            "title": "Images",
            "content": "import javax.imageio.ImageIO; import java.io.File; import java.io.IOException; import java.awt.image.BufferedImage; public class ImageIOTest { public static void main( String[] args ){ BufferedImage img = null; // buffer type try { // Name of file and directories String name = &quot;lambo&quot;; String in = &quot;images/&quot;; String out = &quot;images/tmp/&quot;; // Either use URL or File for reading image using ImageIO File imageFile = new File(in + name + &quot;.png&quot;); img = ImageIO.read(imageFile); // set buffer of image data // ImageIO Image write to gif in Java // Documentation https://docs.oracle.com/javase/tutorial/2d/images/index.html ImageIO.write(img, &quot;gif&quot;, new File(out + name + &quot;.gif&quot;) ); // write buffer to gif } catch (IOException e) { e.printStackTrace(); } System.out.println(&quot;Success&quot;); } } ImageIOTest.main(null); . Success . import java.awt.Color; import java.awt.image.BufferedImage; import java.awt.Image; import java.awt.Graphics2D; import java.io.File; import java.io.FileWriter; import java.io.IOException; import java.io.PrintWriter; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths; import javax.imageio.stream.ImageOutputStream; import javax.imageio.stream.ImageInputStream; import javax.imageio.metadata.IIOMetadata; import javax.imageio.IIOImage; import javax.imageio.ImageIO; import javax.imageio.ImageWriteParam; import javax.imageio.ImageWriter; import javax.imageio.ImageReader; import javax.imageio.ImageTypeSpecifier; public class Pics { private final String inDir = &quot;images/&quot;; // location of images private final String outDir = &quot;images/tmp/&quot;; // location of created files private String inFile; private String resizedFile; private String asciiFile; private String grayScaledFile; private String ext; // extension of file private long bytes; private int width; private int height; // Constructor obtains attributes of picture public Pics(String name, String ext) { this.ext = ext; this.inFile = this.inDir + name + &quot;.&quot; + ext; this.resizedFile = this.outDir + name + &quot;.&quot; + ext; this.asciiFile = this.outDir + name + &quot;.txt&quot;; this.setStats(); } // An image contains metadata, namely size, width, and height public void setStats() { BufferedImage img; try { Path path = Paths.get(this.inFile); this.bytes = Files.size(path); img = ImageIO.read(new File(this.inFile)); this.width = img.getWidth(); this.height = img.getHeight(); } catch (IOException e) { } } // Console print of data public void printStats(String msg) { System.out.println(msg + &quot;: &quot; + this.bytes + &quot; &quot; + this.width + &quot;x&quot; + this.height + &quot; &quot; + this.inFile); } // Convert scaled image into buffered image public static BufferedImage convertToBufferedImage(Image img) { // Create a buffered image with transparency BufferedImage bi = new BufferedImage( img.getWidth(null), img.getHeight(null), BufferedImage.TYPE_INT_ARGB); // magic? Graphics2D graphics2D = bi.createGraphics(); graphics2D.drawImage(img, 0, 0, null); graphics2D.dispose(); return bi; } // Scale or reduce to &quot;scale&quot; percentage provided public void resize(int scale) { BufferedImage img = null; Image resizedImg = null; int width = (int) (this.width * (scale/100.0) + 0.5); int height = (int) (this.height * (scale/100.0) + 0.5); try { // read an image to BufferedImage for processing img = ImageIO.read(new File(this.inFile)); // set buffer of image data // create a new BufferedImage for drawing resizedImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH); } catch (IOException e) { return; } try { ImageIO.write(convertToBufferedImage(resizedImg), this.ext, new File(resizedFile)); } catch (IOException e) { return; } this.inFile = this.resizedFile; // use scaled file vs original file in Class this.setStats(); } // convert every pixel to an ascii character (ratio does not seem correct) public void convertToAscii() { BufferedImage img = null; PrintWriter asciiPrt = null; FileWriter asciiWrt = null; try { File file = new File(this.asciiFile); Files.deleteIfExists(file.toPath()); } catch (IOException e) { System.out.println(&quot;Delete File error: &quot; + e); } try { asciiPrt = new PrintWriter(asciiWrt = new FileWriter(this.asciiFile, true)); } catch (IOException e) { System.out.println(&quot;ASCII out file create error: &quot; + e); } try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } double pixVal = 0; // Changing to go by blocks 2 times as tall as wide // Height is in outer loop, so for each height the entire width is covered // To get 2 times as tall as wide blocks, we can use 1 width x 2 height // This is done by accounting for each pixel and the one below it in the inner for loop, then averaging // To account for this in the outer for loop, we simply increment i by 2 to not overcount // Also change the upper limit so that there is no error (since we will acount for i+1 within the code block) for (int i = 0; i &lt; img.getHeight() - 1; i+=2) { for (int j = 0; j &lt; img.getWidth(); j++) { int pixel = img.getRGB(j, i); Color col = new Color(pixel, true); int pixel2 = img.getRGB(j, i+1); Color col2 = new Color(pixel2, true); pixVal = (col.getRed() + col2.getRed() + col.getBlue() + col2.getBlue() + col.getGreen() + col2.getGreen())/6; try { asciiPrt.print(asciiChar(pixVal)); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } try { asciiPrt.println(&quot;&quot;); asciiPrt.flush(); asciiWrt.flush(); } catch (Exception ex) { } } } // Gray scale method public void GrayScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Averaging R, G, and B int avg = (red+green+blue)/3; // Creating a new color object which has R=G=B=average // This is because the average will be a shade of gray Color colorGray = new Color(avg, avg, avg); // Setting the pixel&#39;s actual RGB content in the image to be the grayscaled version. img.setRGB(j, i, colorGray.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;grayLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // Red scale method public void RedScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Getting an average red color int redAvg = red/3; // Creating a new color object which has G and B as average // Red is scaled so that it accounts for variations in intensity // Essentially making it gray and then adding red Color colorRed = new Color(red, redAvg, redAvg); // Setting the pixel&#39;s actual RGB content in the image to be the redscaled version. img.setRGB(j, i, colorRed.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;redLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // Green scale method public void GreenScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Getting an average green color int greenAvg = green/3; // Creating a new color object which has R and B as average // Green is scaled so that it accounts for variations in intensity // Essentially making it gray and then adding green Color colorGreen = new Color(greenAvg, green, greenAvg); // Setting the pixel&#39;s actual RGB content in the image to be the greenscaled version. img.setRGB(j, i, colorGreen.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;greenLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // Blue scale method public void BlueScale() { BufferedImage img = null; // Reading file try { img = ImageIO.read(new File(this.inFile)); } catch (IOException e) { } // Iterating through all pixels for (int i = 0; i&lt;this.height; i++) { for (int j = 0; j&lt;this.width; j++) { // For each pixel, getting RGB contents int pixel = img.getRGB(j, i); // Creating color object out of RGB contents for easy extraction Color color = new Color(pixel, true); // Using color object&#39;s methods to get the R, G, and B values for the pixel int red = color.getRed(); int green = color.getGreen(); int blue = color.getBlue(); // Getting an average Blue color int blueAvg = blue/3; // Creating a new color object which has R and G as average // Blue is scaled so that it accounts for variations in intensity // Essentially making it gray and then adding blue Color colorBlue = new Color(blueAvg, blueAvg, blue); // Setting the pixel&#39;s actual RGB content in the image to be the bluescaled version. img.setRGB(j, i, colorBlue.getRGB()); } } // Writing the image out try{ ImageIO.write(img, &quot;png&quot;, new File(&quot;images/tmp/&quot; + &quot;blueLambo&quot; + &quot;.png&quot;) ); }catch(IOException e){ System.out.println(e); } } // conversion table, there may be better out there ie https://www.billmongan.com/Ursinus-CS173-Fall2020/Labs/ASCIIArt public String asciiChar(double g) { String str = &quot; &quot;; if (g &gt;= 240) { str = &quot; &quot;; } else if (g &gt;= 210) { str = &quot;.&quot;; } else if (g &gt;= 190) { str = &quot;*&quot;; } else if (g &gt;= 170) { str = &quot;+&quot;; } else if (g &gt;= 120) { str = &quot;^&quot;; } else if (g &gt;= 110) { str = &quot;&amp;&quot;; } else if (g &gt;= 80) { str = &quot;8&quot;; } else if (g &gt;= 60) { str = &quot;#&quot;; } else { str = &quot;@&quot;; } return str; } // tester/driver public static void main(String[] args) throws IOException { Pics lambo = new Pics(&quot;lambo&quot;, &quot;png&quot;); Pics amog = new Pics(&quot;amongus&quot;, &quot;png&quot;); amog.resize(33); amog.convertToAscii(); lambo.GrayScale(); lambo.RedScale(); lambo.GreenScale(); lambo.BlueScale(); lambo.printStats(&quot;Original&quot;); lambo.resize(33); lambo.printStats(&quot;Scaled&quot;); lambo.convertToAscii(); } } Pics.main(null); . Original: 7768 352x143 images/lambo.png Scaled: 11941 116x47 images/tmp/lambo.png .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/10/02/images.html",
            "relUrl": "/java/2022/10/02/images.html",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post28": {
            "title": "NHTSA Car API",
            "content": "Make ID Make .",
            "url": "https://ad1616.github.io/ADfastpages/NHTSAapi",
            "relUrl": "/NHTSAapi",
            "date": " • Oct 2, 2022"
        }
        
    
  
    
        ,"post29": {
            "title": "Fibonacci Algorithms",
            "content": "Base class for displaying sequence, contains Stream Algorithm . /* * Creator: Nighthawk Coding Society * Mini Lab Name: Fibonacci sequence, featuring a Stream Algorithm * */ import java.util.ArrayList; import java.util.HashMap; import java.util.stream.Stream; /* Objective will require changing to abstract class with one or more abstract methods below */ abstract class Fibo { String name; // name or title of method int size; // nth sequence int hashID; // counter for hashIDs in hash map ArrayList&lt;Long&gt; list; // captures current Fibonacci sequence HashMap&lt;Integer, Object&gt; hash; // captures each sequence leading to final result /* Zero parameter constructor uses Telescoping technique to allow setting of the required value nth @param: none */ public Fibo() { this(20); // telescope to avoid code duplication, using default as 20 } /* Construct the nth fibonacci number @param: nth number, the value is constrained to 92 because of overflow in a long */ public Fibo(int nth) { this.size = nth; this.list = new ArrayList&lt;&gt;(); this.hashID = 0; this.hash = new HashMap&lt;&gt;(); //initialize fibonacci and time mvc this.init(); } /* This Method should be &quot;abstract&quot; Leave method as protected, as it is only authorized to extender of the class Make new class that extends and defines init() Inside references within this class would change from this to super Repeat process using for, while, recursion */ protected abstract void init(); // this.name = &quot;Stream&quot;; // Stream.iterate(new long[]{0, 1}, f -&gt; new long[]{f[1], f[0] + f[1]}) // .limit(this.size) // .forEach(f -&gt; this.setData(f[0]) ); /* Number is added to fibonacci sequence, current state of &quot;list&quot; is added to hash for hashID &quot;num&quot; */ public void setData(long num) { list.add(num); hash.put(this.hashID++, list.clone()); } /* Custom Getter to return last element in fibonacci sequence */ public long getNth() { return list.get(this.size - 1); } /* Custom Getter to return last fibonacci sequence in HashMap */ public Object getNthSeq(int i) { return hash.get(i); } /* Console/Terminal supported print method */ public void print() { System.out.println(&quot;Init method = &quot; + this.name); System.out.println(&quot;fibonacci Number &quot; + this.size + &quot; = &quot; + this.getNth()); System.out.println(&quot;fibonacci List = &quot; + this.list); System.out.println(&quot;fibonacci Hashmap = &quot; + this.hash); for (int i=0 ; i&lt;this.size; i++ ) { System.out.println(&quot;fibonacci Sequence &quot; + (i+1) + &quot; = &quot; + this.getNthSeq(i)); } } /* Tester class method. If this becomes abstract you will not be able to test it directly ... Change this method to call &quot;main&quot; class of each of the extended classes */ // static public void main(String[] args) { // Fibo fib = new Fibo(); // fib.print(); // FiboFor fibofor = new FiboFor(); // fibofor.print(); // FiboWhile fibowhile = new FiboWhile(); // fibowhile.print(); // FiboRecur fiborecur = new FiboRecur(); // fiborecur.print(); // } } . Class with for loop . public class FiboFor extends Fibo{ // Overriding the init method so that a different method can be used // The printing and storing of data is preserved @Override public void init() { this.name = &quot;For Loop&quot;; // Hardcoding first two numbers, and initializing them in the sequence int first = 1; int second = 1; this.setData(0); this.setData(first); this.setData(second); int loopSize = this.size - 2; // Using a for loop to update the next term to be the sum of the previous two terms. // Also need to update the second to last term to become what used to be the last term. for(int i = 0;i&lt;loopSize;i++) { int temp = second; second = second + first; first = temp; this.setData(second); } } static public void main(String[] args) { FiboFor fib = new FiboFor(); fib.print(); } } FiboFor.main(null); . Init method = For Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Class with while loop . public class FiboWhile extends Fibo{ // Overriding the init method so that a different method can be used // The printing and storing of data is preserved @Override public void init() { this.name = &quot;While Loop&quot;; // Hardcoding first two numbers, and initializing them in the sequence int first = 1; int second = 1; this.setData(0); this.setData(first); this.setData(second); int loopSize = this.size - 2; // Using a while loop to update the next term to be the sum of the previous two terms. // Also need to update the second to last term to become what used to be the last term. int i = 0; while(i &lt; loopSize) { int temp = second; second = second + first; first = temp; this.setData(second); i++; } } static public void main(String[] args) { FiboWhile fib = new FiboWhile(); fib.print(); } } FiboWhile.main(null); . Init method = While Loop fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181], 20=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181, 6765]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . Class with recursion . public class FiboRecur extends Fibo{ // Overriding the init method so that a different method can be used // The printing and storing of data is preserved @Override public void init() { this.name = &quot;Recursion&quot;; // Iterating to show the entire sequence for (int i=0; i&lt;this.size; i++){ this.setData(Recur(i)); } } // Recursion method public int Recur(int size) { // Each term is the sum of the two terms before it if (size &gt; 2) { // Each of these function calls again will start back at the if statement // It only has actual numbers to return once the else if statements are reached // EX, when it reaches size = 3, Recur(size-1) + Recur(size-2) = 1+1 = 2 return (Recur(size-1) + Recur(size-2)); } else if (size == 2) { return 1; } else if (size == 1) { return 1; } else { return 0; } } static public void main(String[] args) { FiboRecur fib = new FiboRecur(); fib.print(); } } FiboRecur.main(null); . Init method = Recursion fibonacci Number 20 = 4181 fibonacci List = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] fibonacci Hashmap = {0=[0], 1=[0, 1], 2=[0, 1, 1], 3=[0, 1, 1, 2], 4=[0, 1, 1, 2, 3], 5=[0, 1, 1, 2, 3, 5], 6=[0, 1, 1, 2, 3, 5, 8], 7=[0, 1, 1, 2, 3, 5, 8, 13], 8=[0, 1, 1, 2, 3, 5, 8, 13, 21], 9=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34], 10=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55], 11=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89], 12=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144], 13=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233], 14=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377], 15=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610], 16=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987], 17=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597], 18=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584], 19=[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]} fibonacci Sequence 1 = [0] fibonacci Sequence 2 = [0, 1] fibonacci Sequence 3 = [0, 1, 1] fibonacci Sequence 4 = [0, 1, 1, 2] fibonacci Sequence 5 = [0, 1, 1, 2, 3] fibonacci Sequence 6 = [0, 1, 1, 2, 3, 5] fibonacci Sequence 7 = [0, 1, 1, 2, 3, 5, 8] fibonacci Sequence 8 = [0, 1, 1, 2, 3, 5, 8, 13] fibonacci Sequence 9 = [0, 1, 1, 2, 3, 5, 8, 13, 21] fibonacci Sequence 10 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34] fibonacci Sequence 11 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55] fibonacci Sequence 12 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89] fibonacci Sequence 13 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144] fibonacci Sequence 14 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233] fibonacci Sequence 15 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377] fibonacci Sequence 16 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610] fibonacci Sequence 17 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987] fibonacci Sequence 18 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597] fibonacci Sequence 19 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584] fibonacci Sequence 20 = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181] . CB Standards . 1.B . Determined how to implement a while loop, for loop, and recursive function to accomplish fibonacci. . 4.C . Determined if all 3 algorithms returned the same result through the printed output being the same. . 5.A . For and while loops run in O(n) time since they run through the input size once and do a constant amount of operations for each loop. The recursive algorithm takes exponential time, however, since for each term of the sequence, the algorithm needs to recalculate all of the other terms as well due to the nature of recursion. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/23/Fibonacci.html",
            "relUrl": "/java/2022/09/23/Fibonacci.html",
            "date": " • Sep 23, 2022"
        }
        
    
  
    
        ,"post30": {
            "title": "Turtles",
            "content": "The below code makes use of a 2D Array and prints turtles horizontally. It is later refactored to be a One Dimensional Array of objects. . class TurtleLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] turtles; /** * Constructor initializes a 2D array of Turtles */ public TurtleLoop() { //Storing Data in 2D arrays turtles = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Turtle 0 { &quot; _____&quot;, //[0][0] &quot; oo/&gt;&lt;&gt;&lt;&gt; &quot;, //[0][1] &quot;( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;, //[0][2] &quot; L|_|L|_|` &quot; //[0][3] }, //Turtle 1 { &quot; _____&quot;, //[1][0] &quot; ^^/xxxxx &quot;, //[1][1] &quot;( O)xxxxxxx&quot;, //[1][2] &quot; L|_|L|_|` &quot; //[1][3] }, //Turtle 2 { &quot; _____&quot;, //[2][0] &quot; uu/wwwww &quot;, //[2][1] &quot;( U)wwwwwww&quot;, //[2][2] &quot; L|_|L|_|` &quot; //[2][3] }, //Turtle 3 { &quot; _____&quot;, //[3][0] &quot; rr/nnnnn &quot;, //[3][1] &quot;( W)nnnnnnn&quot;, //[3][2] &quot; L|_|L|_|` &quot; //[3][3] }, //Turtle 4 { &quot; _____&quot;, //[4][0] &quot; cc/ooooo &quot;, //[4][1] &quot;( Y)ooooooo&quot;, //[4][2] &quot; L|_|L|_|` &quot; //[4][3] }, }; } /** * Loop and print turtles in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;The Tragedy of the turtle squad&quot;); // turtles (non-primitive) defined in constructor knows its length int turtleCount = turtles.length; for (int i = turtleCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Turtles // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; turtle squad members left&quot;); //how many separate parts are there in a turtle turtle? for (int row = 0; row &lt; turtles[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each turtle part by part, will eventually print entire column*/ for (int col = 0; col &lt; turtleCount; col++) { // prints specific part of the turtle from the column System.out.print(turtles[col][row] + &quot; &quot;); } //this new line gives separation between each turtle System.out.println(); } //countdown for poem, decrementing turtleCount variable by 1 turtleCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;That was the tragedy of the turtle squad :(&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new TurtleLoop().printPoem(); //a new monkey list and output in one step } } TurtleLoop.main(null); . The Tragedy of the turtle squad 5 turtle squad members left _____ _____ _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww rr/nnnnn cc/ooooo ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww ( W)nnnnnnn ( Y)ooooooo L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` 4 turtle squad members left _____ _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww rr/nnnnn ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww ( W)nnnnnnn L|_|L|_|` L|_|L|_|` L|_|L|_|` L|_|L|_|` 3 turtle squad members left _____ _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx uu/wwwww ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx ( U)wwwwwww L|_|L|_|` L|_|L|_|` L|_|L|_|` 2 turtle squad members left _____ _____ oo/&gt;&lt;&gt;&lt;&gt; ^^/xxxxx ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; ( O)xxxxxxx L|_|L|_|` L|_|L|_|` 1 turtle squad members left _____ oo/&gt;&lt;&gt;&lt;&gt; ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; L|_|L|_|` That was the tragedy of the turtle squad :( 0000000000000000000000000000000000 . Using Objects to represent turtles . class Turtle{ public Turtle(String turtleName, String[] turtleDraw){ this.name = turtleName; this.draw = turtleDraw; } String name; String[] draw; public void draw(){ for(int row = 0; row &lt; draw.length; row++){ System.out.println(draw[row]); } System.out.println(); } public static void main(String[] args){ String[] neutral = { &quot; _____&quot;, //[0][0] &quot; oo/&gt;&lt;&gt;&lt;&gt; &quot;, //[0][1] &quot;( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt;&quot;, //[0][2] &quot; L|_|L|_|` &quot; //[0][3] }; String[] surprised = { &quot; _____&quot;, //[1][0] &quot; ^^/xxxxx &quot;, //[1][1] &quot;( O)xxxxxxx&quot;, //[1][2] &quot; L|_|L|_|` &quot; //[1][3] }; String[] happy = { &quot; _____&quot;, //[2][0] &quot; uu/wwwww &quot;, //[2][1] &quot;( U)wwwwwww&quot;, //[2][2] &quot; L|_|L|_|` &quot; //[2][3] }; String[] excited = { &quot; _____&quot;, //[3][0] &quot; rr/nnnnn &quot;, //[3][1] &quot;( W)nnnnnnn&quot;, //[3][2] &quot; L|_|L|_|` &quot; //[3][3] }; Turtle bob = new Turtle(&quot;bob&quot;, neutral); Turtle rick = new Turtle(&quot;rick&quot;, surprised); Turtle ted = new Turtle(&quot;ted&quot;, happy); Turtle john = new Turtle(&quot;john&quot;, excited); Turtle[] turtles = {bob, rick, ted, john}; for(int i = 0; i &lt; turtles.length; i++){ System.out.println(&quot;This is &quot; + turtles[i].name + &quot;: &quot;); turtles[i].draw(); } } } Turtle.main(null); . This is bob: _____ oo/&gt;&lt;&gt;&lt;&gt; ( -)&gt;&lt;&gt;&lt;&gt;&lt;&gt; L|_|L|_|` This is rick: _____ ^^/xxxxx ( O)xxxxxxx L|_|L|_|` This is ted: _____ uu/wwwww ( U)wwwwwww L|_|L|_|` This is john: _____ rr/nnnnn ( W)nnnnnnn L|_|L|_|` .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/21/turtles.html",
            "relUrl": "/java/2022/09/21/turtles.html",
            "date": " • Sep 21, 2022"
        }
        
    
  
    
        ,"post31": {
            "title": "Javascript Demo",
            "content": "console.log(&quot;hello world&quot;); . hello world . var msg = &quot;hello&quot;; console.log(msg); . hello . function add(x1, x2) { var sum = x1 + x2; console.log(sum); } add(5, 6); . 11 . add(19, 37); . 56 . function logItType(output) { console.log(typeof output, &quot;;&quot;, output); } logItType(&quot;hello&quot;); logItType(2020); logItType([1, 2, 3]); . string ; hello number ; 2020 object ; [ 1, 2, 3 ] . var testHTML = &quot;Hello World&quot;; $$.html(testHTML); . Hello World // define a function to hold data for a Person function Person(name, ghID) { this.name = name; this.ghID = ghID; this.group = &quot;&quot;; } // define a setter for role in Person data Person.prototype.setGroup = function(group) { this.group = group; } // define a JSON conversion &quot;method&quot; associated with Person Person.prototype.toJSON = function() { const obj = {name: this.name, ghID: this.ghID, group: this.group}; const json = JSON.stringify(obj); // json/string is useful when passing data on internet return json; } var me = new Person(&quot;Sahil&quot;, &quot;AD1616&quot;); me.setGroup(&quot;Bread&quot;); logItType(me); logItType(me.toJSON()); . object ; Person { name: &#39;Sahil&#39;, ghID: &#39;AD1616&#39;, group: &#39;Bread&#39; } string ; {&#34;name&#34;:&#34;Sahil&#34;,&#34;ghID&#34;:&#34;AD1616&#34;,&#34;group&#34;:&#34;Bread&#34;} . var group1 = [ new Person(&quot;Sahil&quot;, &quot;AD1616&quot;), new Person(&quot;Nathan&quot;, &quot;NathanShih04&quot;), new Person(&quot;Rohit&quot;, &quot;rohitd3&quot;), new Person(&quot;Kurtis&quot;, &quot;kkwan0&quot;) ]; function Group(members, groupName) { this.group = []; this.members = members; this.members.forEach(member =&gt; {member.setGroup(groupName); this.group.push(member); }); this.json = []; this.group.forEach(person =&gt; this.json.push(person.toJSON())); } bread = new Group(group1, &quot;Bread&quot;); logItType(bread.group); . object ; [ Person { name: &#39;Sahil&#39;, ghID: &#39;AD1616&#39;, group: &#39;Bread&#39; }, Person { name: &#39;Nathan&#39;, ghID: &#39;NathanShih04&#39;, group: &#39;Bread&#39; }, Person { name: &#39;Rohit&#39;, ghID: &#39;rohitd3&#39;, group: &#39;Bread&#39; }, Person { name: &#39;Kurtis&#39;, ghID: &#39;kkwan0&#39;, group: &#39;Bread&#39; } ] . // define an HTML conversion &quot;method&quot; associated with Classroom Group.prototype._toHtml = function() { // HTML Style is build using inline structure var style = ( &quot;display:inline-block;&quot; + &quot;border: 2px solid grey;&quot; + &quot;box-shadow: 0.8em 0.4em 0.4em grey;&quot; ); // HTML Body of Table is build as a series of concatenations (+=) var body = &quot;&quot;; // Heading for Array Columns body += &quot;&lt;tr&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Name&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;GitHub ID&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;th&gt;&lt;mark&gt;&quot; + &quot;Group&quot; + &quot;&lt;/mark&gt;&lt;/th&gt;&quot;; body += &quot;&lt;/tr&gt;&quot;; // Data of Array, iterate through each row of compsci.classroom for (var row in bread.group) { // tr for each row, a new line body += &quot;&lt;tr&gt;&quot;; // td for each column of data body += &quot;&lt;td&gt;&quot; + bread.group[row].name + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + bread.group[row].ghID + &quot;&lt;/td&gt;&quot;; body += &quot;&lt;td&gt;&quot; + bread.group[row].group + &quot;&lt;/td&gt;&quot;; // tr to end line body += &quot;&lt;tr&gt;&quot;; } // Build and HTML fragment of div, table, table body return ( &quot;&lt;div style=&#39;&quot; + style + &quot;&#39;&gt;&quot; + &quot;&lt;table&gt;&quot; + body + &quot;&lt;/table&gt;&quot; + &quot;&lt;/div&gt;&quot; ); }; // IJavaScript HTML processor receive parameter of defined HTML fragment $$.html(bread._toHtml()); . NameGitHub IDGroup . Sahil | AD1616 | Bread | Nathan | NathanShih04 | Bread | Rohit | rohitd3 | Bread | Kurtis | kkwan0 | Bread | &lt;/table&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; . .",
            "url": "https://ad1616.github.io/ADfastpages/javascript/2022/09/20/javascriptDemo.html",
            "relUrl": "/javascript/2022/09/20/javascriptDemo.html",
            "date": " • Sep 20, 2022"
        }
        
    
  
    
        ,"post32": {
            "title": "2018 FRQ1",
            "content": "This question involves reasoning about a simulation of a frog hopping in a straight line. The frog attempts to hop to a goal within a specified number of hops. The simulation is encapsulated in the following FrogSimulation class. You will write two of the methods in this class. . Part A . Write the simulate method, which simulates the frog attempting to hop in a straight line to a goal from the frog&#39;s starting position of 0 within a maximum number of hops. The method returns true if the frog successfully reached the goal within the maximum number of hops; otherwise, the method returns false. . The FrogSimulation class provides a method called hopDistance that returns an integer representing the distance (positive or negative) to be moved when the frog hops. A positive distance represents a move toward the goal. A negative distance represents a move away from the goal. The returned distance may vary from call to call. Each time the frog hops, its position is adjusted by the value returned by a call to the hopDistance method. . The frog hops until one of the following conditions becomes true: . • The frog has reached or passed the goal. . • The frog has reached a negative position. . • The frog has taken the maximum number of hops without reaching the goal. . // Code Segment for Part A /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ int distanceCovered = 0; for (int i=0; i&lt;maxHops; i++) { int temp = this.hopDistance(); distanceCovered += temp; if (distanceCovered &gt;= goalDistance) { return true; } else if (distanceCovered &lt; 0) { return false; } } return false; } . Part B . Write the runSimulations method, which performs a given number of simulations and returns the proportion of simulations in which the frog successfully reached or passed the goal. For example, if the parameter passed to runSimulations is 400, and 100 of the 400 simulate method calls returned true, then the runSimulations method should return 0.25. . // Code Segment for Part B /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ double total = 0; for (int i = 0; i&lt;num; i++) { boolean currentSimulation = this.simulate(); if (currentSimulation) { total += 1; } } double proportion = total / num; return proportion; } . Completed Code . public class FrogSimulation { /** Distance, in inches, from the starting position to the goal. */ private int goalDistance; /** Maximum number of hops allowed to reach the goal. */ private int maxHops; /** Constructs a FrogSimulation where dist is the distance, in inches, from the starting * position to the goal, and numHops is the maximum number of hops allowed to reach the goal. * Precondition: dist &gt; 0; numHops &gt; 0 */ public FrogSimulation(int dist, int numHops){ goalDistance = dist; maxHops = numHops; } /** Returns an integer representing the distance, in inches, to be moved when the frog hops. */ private int hopDistance() { /* implementation not shown */ // Place Holder so the code can run return 0; } /** Simulates a frog attempting to reach the goal as described in part (a). * Returns true if the frog successfully reached or passed the goal during the simulation; * false otherwise. */ public boolean simulate() { /* to be implemented in part (a) */ int distanceCovered = 0; for (int i=0; i&lt;maxHops; i++) { int temp = this.hopDistance(); distanceCovered += temp; if (distanceCovered &gt;= goalDistance) { return true; } else if (distanceCovered &lt; 0) { return false; } } return false; } /** Runs num simulations and returns the proportion of simulations in which the frog * successfully reached or passed the goal. * Precondition: num &gt; 0 */ public double runSimulations(int num) { /* to be implemented in part (b) */ double total = 0; for (int i = 0; i&lt;num; i++) { boolean currentSimulation = this.simulate(); if (currentSimulation) { total += 1; } } double proportion = total / num; return proportion; } } .",
            "url": "https://ad1616.github.io/ADfastpages/frq/2022/09/18/2018FRQ1.html",
            "relUrl": "/frq/2022/09/18/2018FRQ1.html",
            "date": " • Sep 18, 2022"
        }
        
    
  
    
        ,"post33": {
            "title": "Monkeys",
            "content": "The below code makes use of a 2D Array and prints monkeys horizontally. It is refactored to be a One Dimensional Array of objects. . We iterate through 2D arrays using nested for loops. Visually, this means you go to the first row, and then across every column, then do the same for every row until you have traversed the entire 2D array. . class MonkeyLoop { //The area between class definition and the 1st method is where we keep data for object in Java String [][] monkeys; //2D Array: AP CSA Unit 8: 2D array of strings //2D array is like a grid [x][y] // or like a spreadsheet [row][column] /** * Constructor initializes a 2D array of Monkeys */ public MonkeyLoop() { //Storing Data in 2D arrays monkeys = new String[][]{ //2D array above is just a name, &quot;new&quot; makes a container (&quot;object&quot;) //Monkey 0 { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, //[0][0] eyes &quot; _⏄_/ &quot;, //[0][1] chin &quot; --0-- &quot;, //[0][2] body &quot; ⎛ ⎞ &quot; //[0][3] legs }, //Monkey 1 { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, //[1][0] &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }, //Monkey 2 { &quot; ʕ(▀ ⍡ ▀)ʔ&quot;, //[2][0] &quot; _⎐_/&quot;, &quot; &lt;-2-&gt; &quot;, &quot; 〈 〉 &quot; }, //Monkey 3 { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, //[3][0] &quot; _⍾_/&quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }, //Monkey 4 { &quot; (◕‿◕✿) &quot;, //[4][0] &quot; _⍾_/ &quot;, //[4][1] &quot; ==4== &quot;, //[4][2] &quot; _/ _ &quot; //[4][3] }, }; } /** * Loop and print monkeys in array * ... repeat until you reach zero ... */ public void printPoem() { //begin the poem System.out.println(); System.out.println(&quot;Monkey Jumpers Poem in Java Loopy&quot;); // monkeys (non-primitive) defined in constructor knows its length int monkeyCount = monkeys.length; for (int i = monkeyCount; i &gt;= 1; i--) //loops through 2D array length backwards { //this print statement shows current count of Monkeys // concatenation (+) of the loop variable and string to form a countdown message System.out.println(i + &quot; little monkeys jumping on the bed...&quot;); //how many separate parts are there in a monkey monkey? for (int row = 0; row &lt; monkeys[row].length; row++) { //cycles through &quot;cells&quot; of 2d array /*cycles through columns to print each monkey part by part, will eventually print entire column*/ for (int col = 0; col &lt; monkeyCount; col++) { // prints specific part of the monkey from the column System.out.print(monkeys[col][row] + &quot; &quot;); } //this new line gives separation between stanza of poem System.out.println(); } //countdown for poem, decrementing monkeyCount variable by 1 monkeyCount -= 1; } //out of all the loops, prints finishing messages System.out.println(&quot;No more monkeys jumping on the bed&quot;); System.out.println(&quot;0000000000000000000000000000000000&quot;); System.out.println(&quot; THE END &quot;); } /** * A Java Driver/Test method that is the entry point for execution */ public static void main(String[] args) { new MonkeyLoop().printPoem(); //a new monkey list and output in one step } } MonkeyLoop.main(null); . Monkey Jumpers Poem in Java Loopy 5 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ (◕‿◕✿) _⏄_/ _⎏_/ _⎐_/ _⍾_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ==4== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ _/ _ 4 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ ʕ ͡° ͜ʖ ° ͡ʔ _⏄_/ _⎏_/ _⎐_/ _⍾_/ --0-- ++1++ &lt;-2-&gt; ==3== ⎛ ⎞ ⌋ ⌊ 〈 〉 _/ _ 3 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ ʕ(▀ ⍡ ▀)ʔ _⏄_/ _⎏_/ _⎐_/ --0-- ++1++ &lt;-2-&gt; ⎛ ⎞ ⌋ ⌊ 〈 〉 2 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ ʕ༼ ◕_◕ ༽ʔ _⏄_/ _⎏_/ --0-- ++1++ ⎛ ⎞ ⌋ ⌊ 1 little monkeys jumping on the bed... ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ No more monkeys jumping on the bed 0000000000000000000000000000000000 THE END . Refactored Code . class Monkey { public Monkey(String monkeyName, String[] monkeyArt) { this.name = monkeyName; this.art = monkeyArt; } String name; String[] art; public void print() { for (int row = 0; row&lt;art.length; row++) { System.out.println(art[row]); } System.out.println(); } public static void main(String[] args) { String[] kurtisArt = { &quot;ʕง ͠° ͟ل͜ ͡°)ʔ&quot;, &quot; _⏄_/ &quot;, &quot; --0-- &quot;, &quot; ⎛ ⎞ &quot; }; String[] nathanArt = { &quot;ʕ༼ ◕_◕ ༽ʔ&quot;, &quot; _⎏_/ &quot;, &quot; ++1++ &quot;, &quot; ⌋ ⌊ &quot; }; String[] rohitArt = { &quot; ʕ ͡° ͜ʖ ° ͡ʔ&quot;, &quot; _⍾_/&quot;, &quot; ==3== &quot;, &quot; _/ _ &quot; }; Monkey kurtis = new Monkey(&quot;Kurtis&quot;, kurtisArt); Monkey nathan = new Monkey(&quot;Nathan&quot;, nathanArt); Monkey rohit = new Monkey(&quot;Rohit&quot;, rohitArt); Monkey[] monkeys = {kurtis, nathan, rohit}; for (int i = 0; i&lt;monkeys.length; i++) { System.out.println(monkeys[i].name + &quot;: &quot;); monkeys[i].print(); } } } Monkey.main(null); . Kurtis: ʕง ͠° ͟ل͜ ͡°)ʔ _⏄_/ --0-- ⎛ ⎞ Nathan: ʕ༼ ◕_◕ ༽ʔ _⎏_/ ++1++ ⌋ ⌊ Rohit: ʕ ͡° ͜ʖ ° ͡ʔ _⍾_/ ==3== _/ _ . The first version of the code was an Imperative programming style. The second version was object oriented so I could have properties like monkey name along with the art. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/16/monkeys.html",
            "relUrl": "/java/2022/09/16/monkeys.html",
            "date": " • Sep 16, 2022"
        }
        
    
  
    
        ,"post34": {
            "title": "Vector Fields",
            "content": "Purpose . In other notebooks, I explore the use of 2D arrays. It was discussed that a 2D array could sometimes be replaced with a 1D array of objects. This is a use case where a 2D array is necessary, since I use a 2D array where each entry is an object. . Description . The 2D array here represents the cartesian coordinate system. Going across a column is like the x axis and going down a row is like the y axis. At each point, we have an object which represents a vector. The name for a configuration where each point in the plane is assigned a vector is called a vector field. . import java.lang.Math; // Defining the vector class. // Each entry of the 2D array is associated with an object of this class. public class VC { // Constructor for the 3 components of the vector public VC (float x, float y, float z) { this.i = x; this.j = y; this.k = z; } // Constructor if only 2 components are provided public VC (float x, float y) { this.i = x; this.j = y; this.k = 0f; } // floats representing each component of the vector public float i; public float j; public float k; // method which returns the magnitude of the vector public double Magnitude() { return Math.sqrt(Math.pow(this.i, 2) + Math.pow(this.j, 2) + Math.pow(this.k, 2)); } // method to print the components of the vector public void print() { System.out.println(&quot;Vector Components: &quot;); System.out.print(this.i + &quot; &quot;); System.out.print(this.j + &quot; &quot;); System.out.print(this.k + &quot; &quot;); } } . public class VectorField { // defining a 2D array // the type of the array is the VC class defined above VC[][] Cartesian2D; public static void main(String[] args) { // Calling the print method on the field created by the CreateField method VectorField field1 = new VectorField(); field1.print(field1.CreateField()); } // Tester method to create a vector field public VC[][] CreateField() { // Outside dimension is columns, or x. // Inside dimension is rows, or y return Cartesian2D = new VC[][] { {new VC(0,0), new VC(0,1), new VC(0,2)}, {new VC(1,0), new VC(1,1), new VC(1,2)}, {new VC(2,0), new VC(2,1), new VC(2,2)} }; } // method to print data in 2D array public void print(VC[][] field) { // Iterating through all the rows and columns for (int row = 0; row &lt; field.length; row ++) { for (int col = 0; col &lt; field[row].length; col++) { // Displaying the location, magnitude, and components of each vector. System.out.println(&quot;The Magnitude of the vector at &quot; + &quot;(&quot; + row + &quot;, &quot; + col + &quot;) is: &quot; + field[row][col].Magnitude()); field[row][col].print(); System.out.println(); System.out.println(); } } } } VectorField.main(null); . The Magnitude of the vector at (0, 0) is: 0.0 Vector Components: 0.0 0.0 0.0 The Magnitude of the vector at (0, 1) is: 1.0 Vector Components: 0.0 1.0 0.0 The Magnitude of the vector at (0, 2) is: 2.0 Vector Components: 0.0 2.0 0.0 The Magnitude of the vector at (1, 0) is: 1.0 Vector Components: 1.0 0.0 0.0 The Magnitude of the vector at (1, 1) is: 1.4142135623730951 Vector Components: 1.0 1.0 0.0 The Magnitude of the vector at (1, 2) is: 2.23606797749979 Vector Components: 1.0 2.0 0.0 The Magnitude of the vector at (2, 0) is: 2.0 Vector Components: 2.0 0.0 0.0 The Magnitude of the vector at (2, 1) is: 2.23606797749979 Vector Components: 2.0 1.0 0.0 The Magnitude of the vector at (2, 2) is: 2.8284271247461903 Vector Components: 2.0 2.0 0.0 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/14/VectorFields.html",
            "relUrl": "/java/2022/09/14/VectorFields.html",
            "date": " • Sep 14, 2022"
        }
        
    
  
    
        ,"post35": {
            "title": "A Reflection on Computer Science",
            "content": "Sahil: Starting Out . Hey, I&#39;m Sahil Samar. I&#39;m currently a senior at Del Norte, in the graduating class of 2023. . My computer science journey started out in around 8th grade when I got interested in game development. But game development was a super hard thing to start with! Unity uses a language called C#, and I didn&#39;t have any idea how to use it. I didn&#39;t really understand the architecture of Unity or C# at first; I just kind of dove in and started making projects. I would look up what I didn&#39;t know, and just copy paste in code to get things working. Even this was hard, because when something went wrong I had no idea how to fix it. But with way too many hours, I was able to make some projects. It isn&#39;t easy to get started getting into coding! By the time I got to AP CSP, I still had a lot to learn about the coding mindset. . My very first game, 3D Pong . Sahil: AP CSP . When I got to AP CSP, I still didn&#39;t really have an idea of how coding worked. I just knew how to find code and paste it into my project. But slowly, I began moving away from this. I met Anthony Vo, who you just read a little bit about, in my first trimester. Whenever I didn&#39;t understand something, he would always help me out. He wouldn&#39;t give me code to copy paste though. He would actually explain the code to me, so I could do it myself. This was huge for me, since I actually began to think about my code and be able to develop things on my own. Mr. Mortensen guided me through countless problems, but everytime I asked him for help I walked away with some new understanding of how to debug my code. At the start of the trimester, I would go up to Mr. Mortensen or Anthony as soon as I had a problem. But by the end of the year, I only used them as a last resort, after I had truly tried everything. At that point, I just needed a pair of fresh eyes, and not someone to guide me through the whole process. Moral of the story: you aren&#39;t expected to come in an expert at coding! But, if you use your resources properly, you can use this year to grow. You can develop the mindset of a programmer and learn how to create cool projects and debug your issues when things don&#39;t work out. . Sahil: After AP CSP . AP CSP shaped me to be the coder I am today; but you only get out of it what you put into it. If you work hard, then it can completely change your mindset (if you are a new coder), and teach you plenty of skills. After AP CSP, I was able to land a summer internship working in CS at the San Diego Supercomputer Center. During this internship, I worked with huge supercomputers and began to understand what servers really were and how they worked. Our project was called ICICLE. If you want to learn more about it, you could watch this short video: https://www.youtube.com/watch?v=gNFk5tDTtoU. I developed sophisticated authentication methods, and did a lot of &quot;firsts&quot; in the project. I went from having to be guided through basic code in CSP to creating things that had never been done before. It&#39;s possible! After doing a lot of stuff behind the scenes, we got to test our system on massive knowledge graphs and run some machine learning algorithms. . Picture of one of the computers I worked with, called Expanse: . Knowledge Graph of Asteroids, classified using a neural network on being hazarous or not: . I also never gave up on making games! But now, I don&#39;t really need to follow tutorials anymore. I can architect a solution on my own, and when I do need to look something up I learn from it and implement it rather than just copying it. When something goes wrong, I&#39;m not stuck; I know what to do, and I have confidence because I know that every problem has a solution. Here&#39;s a peek at one of the games I&#39;m working on now: .",
            "url": "https://ad1616.github.io/ADfastpages/markdown/2022/09/11/CSreflecions.html",
            "relUrl": "/markdown/2022/09/11/CSreflecions.html",
            "date": " • Sep 11, 2022"
        }
        
    
  
    
        ,"post36": {
            "title": "Control Structures",
            "content": "What are control structures? . Control Structures control the flow of a program. They determine what and when segments of code are executed. . There are two types of control structures: conditionals and iteratatives. Conditionals consist of if/else statements, which execute a code segment based on if a condition has been met. In iteration, we mainly use for loops and while loops, which repeat the code segment inside of the loop until a certain condition has been met. . All control structures make heavy use of booleans and boolean expressions. . Using If, Else if, and Else with Boolean Expressions . An if statement will execute if a certain condition is true. If the condition is false, then the else if statement is executed. The point of an else if statement is to test out if a new condition is true, if the previous condition was false. An else statement is executed if all of the above the conditions were false. . import java.util.Scanner; public class GuessingGame { // Constructor for the class, assigining the target number to a value. public GuessingGame(int chosenTarget) { this.target = chosenTarget; } public int target; public static void main(String[] args) { // Creating a new game, where the target is 15. GuessingGame game = new GuessingGame(15); // 5 is too low. So when we guess 5, we expect the else if segment to be executed. game.guess(5); // 20 is too high. So when we guess 20, we expect the if segment to be executed. game.guess(20); // 15 is the right number. So, this should execute the else segment. game.guess(15); } // Method is called to perform a guess. public boolean guess(int guessedNumber) { // The statement inside of the parenthesis is called a boolean expression. // guessNumber &gt; target returns true if guessedNumber is bigger than the target, and false otherwise. if (guessedNumber &gt; target) { System.out.println(&quot;Your number is too high. &quot;); return false; } // If guessedNumber &gt; target was false, then the second condition is executed. // If guessedNumber is smaller than the target, the else if condition will be true, and the code segment will run. else if (guessedNumber &lt; target) { System.out.println(&quot;Your number is too low. &quot;); return false; } // If both of the above conditions were false, then that means that the guessedNumber and the target are the same. // We execute the below segment if that happens. else { System.out.println(&quot;Good job! You guessed the number. &quot;); return true; } } } GuessingGame.main(null); . Your number is too low. Your number is too high. Good job! You guessed the number. . Using Many Conditions and the Switch Case . Sometimes, there can be a long string of if/elseif/else statements. In general, these can often be simplified, but sometimes they are needed. One way to make that kind of code more readable is to use a switch case, which selects a code segment to be executed based on a certain input of case. This is useful when you have predefined cases, rather than boolean expressions. . public class HomeworkCategory { public int statsAssignments = 0; public int civicsAssignments = 0; public int linalgAssignments = 0; public int csaAssignments = 0; public int enmAssignments = 0; public void AddAssignment(int assignment) { // Based on an arbitary choice, each assignment corresponds to a number. // Based on the chosen number, an assignment is added. // Note that this could be much better represented with a dictionary, list, or hash map. // Use case would be in a Database, linking assignment category to ID. // For instructional purposes, this is largely hardcoded. The goal is to show how if statements work with multiple conditions. if (assignment == 0) { System.out.println(&quot;Added stats assignment. &quot;); statsAssignments += 1; } else if (assignment == 1) { System.out.println(&quot;Added civics assignment. &quot;); civicsAssignments += 1; } else if (assignment == 2) { System.out.println(&quot;Added linalg assignment. &quot;); linalgAssignments += 1; } else if (assignment == 3) { System.out.println(&quot;Added csa assignment. &quot;); csaAssignments += 1; } else { System.out.println(&quot;Added enm assignment. &quot;); enmAssignments += 1; } } public static void main(String[] args) { HomeworkCategory sahilHw = new HomeworkCategory(); // Adding assignments for different assignment ID&#39;s. sahilHw.AddAssignment(0); sahilHw.AddAssignment(0); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(3); sahilHw.AddAssignment(3); sahilHw.AddAssignment(4); // Displaying the assignments that I have. System.out.println(&quot;Final assignments tally: &quot;); System.out.println(&quot;Stats Assignments: &quot; + sahilHw.statsAssignments); System.out.println(&quot;Civics Assignments: &quot; + sahilHw.civicsAssignments); System.out.println(&quot;Linear Algebra Assignments: &quot; + sahilHw.linalgAssignments); System.out.println(&quot;CSA Assignments: &quot; + sahilHw.csaAssignments); System.out.println(&quot;ENM Assignments: &quot; + sahilHw.enmAssignments); } } HomeworkCategory.main(null); . Added stats assignment. Added stats assignment. Added linalg assignment. Added linalg assignment. Added linalg assignment. Added csa assignment. Added csa assignment. Added enm assignment. Final assignments tally: Stats Assignments: 2 Civics Assignments: 0 Linear Algebra Assignments: 3 CSA Assignments: 2 ENM Assignments: 1 . The above code definitely looks like it could use a better organizational pattern than a string of if/elseif/else. Below, I demonstrate how this can be refactored into a switch case. . Another note is that the switch-case has more value when the cases need to have completely different functionality associated with them. In my example, the switch-case makes the code more readable, but does not take advantage of this key tenet. However, to make the understanding of switch case as understandable as possible, a very simple example is used to show how it works. . public class HomeworkCategorySwitch { public int statsAssignments = 0; public int civicsAssignments = 0; public int linalgAssignments = 0; public int csaAssignments = 0; public int enmAssignments = 0; public void AddAssignment(int assignment) { // The switch statement takes an argument of what case to use. // Here, we pass in the integer assignment, so the cases will be different integers. switch(assignment) { // Based on the values of the integer assignment, different code segments are executed. case 0: // For the case the assignment is 0, this code segment is executed. System.out.println(&quot;Added stats assignment. &quot;); statsAssignments += 1; break; case 1: System.out.println(&quot;Added stats assignment. &quot;); statsAssignments += 1; break; case 2: System.out.println(&quot;Added linalg assignment. &quot;); linalgAssignments += 1; break; case 3: System.out.println(&quot;Added csa assignment. &quot;); csaAssignments += 1; break; case 4: System.out.println(&quot;Added enm assignment. &quot;); enmAssignments += 1; break; default: System.out.println(&quot;Not a valid assignment number.&quot;); break; } } public static void main(String[] args) { // Note that the output is exactly the same as the code when used without switch cases. HomeworkCategorySwitch sahilHw = new HomeworkCategorySwitch(); // Adding assignments for different assignment ID&#39;s. sahilHw.AddAssignment(0); sahilHw.AddAssignment(0); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(2); sahilHw.AddAssignment(3); sahilHw.AddAssignment(3); sahilHw.AddAssignment(4); sahilHw.AddAssignment(10); // Displaying the assignments that I have. System.out.println(&quot;Final assignments tally: &quot;); System.out.println(&quot;Stats Assignments: &quot; + sahilHw.statsAssignments); System.out.println(&quot;Civics Assignments: &quot; + sahilHw.civicsAssignments); System.out.println(&quot;Linear Algebra Assignments: &quot; + sahilHw.linalgAssignments); System.out.println(&quot;CSA Assignments: &quot; + sahilHw.csaAssignments); System.out.println(&quot;ENM Assignments: &quot; + sahilHw.enmAssignments); } } HomeworkCategorySwitch.main(null); . Added stats assignment. Added stats assignment. Added linalg assignment. Added linalg assignment. Added linalg assignment. Added csa assignment. Added csa assignment. Added enm assignment. Not a valid assignment number. Final assignments tally: Stats Assignments: 2 Civics Assignments: 0 Linear Algebra Assignments: 3 CSA Assignments: 2 ENM Assignments: 1 . De Morgan&#39;s Law/Compound Boolean Expressions . De Morgan&#39;s Law deals with expressions in boolean algebra. This basically means using a bunch of boolean operators together. This can usually be simplified, and is only truely useful in very complex scenarios that depend on various boolean parameters. . public class DeMorganGeneric { public DeMorganGeneric (boolean bool1, boolean bool2, boolean bool3, boolean bool4) { this.firstParam = bool1; this.secondParam = bool2; this.thirdParam = bool3; this.fourthParam = bool4; } public boolean firstParam; public boolean secondParam; public boolean thirdParam; public boolean fourthParam; public void DeMorgan(DeMorganGeneric test) { // Example of De Morgan&#39;s Law. // Logic needs all of the following conditions to be true: // First and Second must both be different (ie false and true or true and false) // One of Third and Fourth must be true. // First must be true. if (!(test.firstParam &amp;&amp; test.secondParam) &amp;&amp; (test.thirdParam || test.fourthParam) &amp;&amp; test.firstParam == true) { System.out.println(&quot;Executed.&quot;); } else { System.out.println(&quot;Not executed. &quot;); } } public static void main(String[] args) { DeMorganGeneric testExecSuccess = new DeMorganGeneric(true, false, false, true); testExecSuccess.DeMorgan(testExecSuccess); // This breaks the first condition, as First and Second are both true. DeMorganGeneric testExecFail = new DeMorganGeneric(true, true, false, true); testExecFail.DeMorgan(testExecFail); } } DeMorganGeneric.main(null); . Executed. Not executed. . Truth Tables . Truth tables are mainly a learning tool to visualize the outputs of different boolean operators. In general, you have a column for each variable, and then columns for the outputs of operators like XOR, OR, AND. A key fact is that the number of rows is the number of possible combinations of 1&#39;s and 0&#39;s: this is just 2 raised to the power of the number of variables. . .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/07/ControlStructures.html",
            "relUrl": "/java/2022/09/07/ControlStructures.html",
            "date": " • Sep 7, 2022"
        }
        
    
  
    
        ,"post37": {
            "title": "Java Vectors",
            "content": "import java.util.ArrayList; public class Vectors { public Vectors() { } ArrayList&lt;Integer&gt; vector1 = new ArrayList&lt;Integer&gt;(); ArrayList&lt;Integer&gt; vector2 = new ArrayList&lt;Integer&gt;(); public ArrayList default1() { vector1.add(1); vector1.add(2); vector1.add(3); return vector1; } public ArrayList default2() { vector2.add(4); vector2.add(5); vector2.add(6); return vector2; } public void printVectorContent(ArrayList&lt;Integer&gt; v1) { for (int i : v1) { System.out.println(i); } } public int dot(ArrayList&lt;Integer&gt; v1, ArrayList&lt;Integer&gt; v2) { int product = 0; for (int i = 0; i &lt; v1.size(); i++) { product += v1.get(i) * v2.get(i); } return product; } public static void main(String[] args) { Vectors test = new Vectors(); System.out.println(&quot;Vector 1: &quot;); test.printVectorContent(test.default1()); System.out.println(&quot;Vector 2: &quot;); test.printVectorContent(test.default2()); System.out.println(&quot;Dot Product: &quot;); System.out.println(test.dot(test.vector1, test.vector2)); } } Vectors.main(null); . Vector 1: 1 2 3 Vector 2: 4 5 6 Dot Product: 32 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/05/Vectors.html",
            "relUrl": "/java/2022/09/05/Vectors.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post38": {
            "title": "Java Menu",
            "content": "Introduction . This is a java console menu containing a variety of applications. Some applications have dependencies upon other classes, which means that you should run the cell containing the class before running the menu. . import java.util.Scanner; //library for user input import java.lang.Math; //library for random numbers public class Menu { // Constructor on this Object takes control of menu events and actions public Menu() { this.print(); // print Menu Scanner sc = new Scanner(System.in); // using Java Scanner Object boolean quit = false; while (!quit) { try { // scan for Input int choice = sc.nextInt(); // using method from Java Scanner Object System.out.print(&quot;&quot; + choice + &quot;: &quot;); quit = this.action(choice); // take action } catch (Exception e) { sc.nextLine(); // error: clear buffer System.out.println(e + &quot;: Not a number, try again.&quot;); } } sc.close(); } // Print the menu options to Terminal private void print() { //System.out.println commands below is used to present a Menu to the user. System.out.println(&quot;- n&quot;); System.out.println(&quot;Choose from these choices&quot;); System.out.println(&quot;- n&quot;); System.out.println(&quot;1 - Say Hello&quot;); System.out.println(&quot;2 - Coulomb Calculator&quot;); System.out.println(&quot;3 - Vectors Demo&quot;); System.out.println(&quot;0 - Quit&quot;); System.out.println(&quot;- n&quot;); } // Private method to perform action and return true if action is to quit/exit private boolean action(int selection) { boolean quit = false; switch (selection) { // Switch or Switch/Case is Control Flow statement and is used to evaluate the user selection case 0: System.out.print(&quot;Goodbye, World!&quot;); quit = true; break; case 1: System.out.print(&quot;Hello, World!&quot;); break; case 2: System.out.println(&quot;Welcome to the Coulomb Calculator&quot;); Coulomb calc = new Coulomb(); break; case 3: Vectors vectorObject = new Vectors(); vectorObject.demo(vectorObject); break; default: //Prints error message from console System.out.print(&quot;Unexpected choice, try again.&quot;); } System.out.println(&quot;&quot;); return quit; } static public void main(String[] args) { new Menu(); } } Menu.main(null); . - Choose from these choices - 1 - Say Hello 2 - Coulomb Calculator 3 - Vectors Demo 0 - Quit - 2 2: Welcome to the Coulomb Calculator Enter the first charge: 10 Enter the second charge: 8 Enter the distance between the charges: 7 The force between the two charges, by Coulomb&#39;s Law, is 1.4693877551020409E10 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. Yes Enter the first charge: 1 Enter the second charge: 9 Enter the distance between the charges: 2 The force between the two charges, by Coulomb&#39;s Law, is 2.025E10 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. No 3 3: Vector Class Demo: Vector 1: 1 2 3 Vector 2: 4 5 6 Dot Product: 32 0 0: Goodbye, World! . import java.util.ArrayList; public class Vectors { public Vectors() { } ArrayList&lt;Integer&gt; vector1 = new ArrayList&lt;Integer&gt;(); ArrayList&lt;Integer&gt; vector2 = new ArrayList&lt;Integer&gt;(); public ArrayList default1() { vector1.add(1); vector1.add(2); vector1.add(3); return vector1; } public ArrayList default2() { vector2.add(4); vector2.add(5); vector2.add(6); return vector2; } public void printVectorContent(ArrayList&lt;Integer&gt; v1) { for (int i : v1) { System.out.println(i); } } public int dot(ArrayList&lt;Integer&gt; v1, ArrayList&lt;Integer&gt; v2) { int product = 0; for (int i = 0; i &lt; v1.size(); i++) { product += v1.get(i) * v2.get(i); } return product; } public void demo(Vectors test) { System.out.println(&quot;Vector Class Demo: &quot;); System.out.println(&quot;Vector 1: &quot;); test.printVectorContent(test.default1()); System.out.println(&quot;Vector 2: &quot;); test.printVectorContent(test.default2()); System.out.println(&quot;Dot Product: &quot;); System.out.println(test.dot(test.vector1, test.vector2)); } public static void main(String[] args) { Vectors test = new Vectors(); test.demo(test); } } . import java.util.Scanner; import java.lang.Math; public class Coulomb { // Constructor with the enterValues method. public Coulomb () { this.enterValues(); } // Generally, charge values can be integers, since charge is quantized. // The distance can be a float, since it is often a decimal. // The force is a double due to the size of k. private double force; private int q1; private int q2; private float r; private static double k = 9 * Math.pow(10, 9); public static void main(String[] args) { } private void enterValues() { Scanner input; // 3 while loops with try-catch statements to make sure the correct datatype is inputted. while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the first charge: &quot;); try { q1 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } System.out.println(&quot;&quot;); while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the second charge: &quot;); try { q2 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } System.out.println(&quot;&quot;); while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the distance between the charges: &quot;); try { r = input.nextFloat(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not a float&quot; + e); } input.close(); } CalculateCoulomb(); System.out.println(&quot;The force between the two charges, by Coulomb&#39;s Law, is &quot; + force + &quot; Coulombs&quot;); // If the user wishes to continue, they can enter new values. If not, the program exits. if (moreCalc()) { enterValues(); } else { return; } } // The actual calculator. A simple formula called Coulomb&#39;s Law is employed. // The method itself is of type double, and outputs the force which is of double datatype. public double CalculateCoulomb() { force = (k * q1 * q2 / (Math.pow(r, 2))); return force; } // This method checks if the user wishes to do a new calculation. // The method is of type boolean, and outputs true if the user wants to enter new values, and false otherwise. public boolean moreCalc() { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Do you wish to continue? Type Yes to continue, or anything else to exit. &quot;); String chosen = input.nextLine(); // String is a class. Therefore, the object of the String class, chosen, has methods. // The .equals method is used to check if two strings are equivalent. if (chosen.equals(&quot;Yes&quot;)) { return true; } else { return false; } } } .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/05/JavaMenu.html",
            "relUrl": "/java/2022/09/05/JavaMenu.html",
            "date": " • Sep 5, 2022"
        }
        
    
  
    
        ,"post39": {
            "title": "Java Objects and Inheritance",
            "content": "Introduction . This notebook goes over Objects and Inheritance. . The Superclass . Also called the parent class, this is the base class that child classes inherit properties from. The superclass in this example is a Person class. It has the properties of name and age. It has two methods, which are both getters, and one template method which is a CustomNumber method. . public class Person { public String name; public int age; public Person (String name, int age) { this.name = name; this.age = age; } public Person () { this.name = &quot;-1&quot;; this.age = -1; } public String GetName () { return this.name; } public int GetAge() { return this.age; } public int CustomNumber() { return 0; } } . The child class . Now we have a student class. A student is also a person, and therefore the student &quot;inherits&quot; from the person class. This concept is called inheritance, and is implemented in java through the &quot;extends&quot; keyword. What this means is that the student class, by default, will have the same properties as the Person class and the same methods. . But the student will have some more properties than a default person. So, we can add the proerties of grade and id. We can also give the template method, CustomNumber, functionality now. We do this by using the &quot;@Override&quot; keyword. This means that we can essentially redefine this method to do something different. Here, we return the id with this method. . As shown, all of the methods and properties of the Person class are still present. But there&#39;s now more methods and properties! . public class Student extends Person { public int grade; public int id; public Student (String name, int age, int grade, int id) { this.name = name; this.age = age; this.grade = grade; this.id = id; } public Student () { this.name = &quot;-1&quot;; this.age = -1; this.grade = -1; this.id = 0; } public int GetGrade() { return this.grade; } // Overriding the template method, CustomNumber @Override public int CustomNumber () { return this.id; } public static void main(String[] args) { // Creating an object of the Student class and assigning it properties. Student student1 = new Student(&quot;Sahil&quot;, 16, 12, 1234567); // Printing out values to show that all properties and methods are preserved from base class, and new ones are there from child class. System.out.println(student1.GetName()); System.out.println(student1.GetAge()); System.out.println(student1.GetGrade()); System.out.println(student1.CustomNumber()); } } Student.main(null); . Sahil 16 12 1234567 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/04/Objects+Inheritance.html",
            "relUrl": "/java/2022/09/04/Objects+Inheritance.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post40": {
            "title": "Java API",
            "content": "KPOP . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://k-pop.p.rapidapi.com/idols?q=Jungkook&amp;by=Stage%20Name&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;df17610e35msh51d75ac58fb44f9p14c5f0jsn7d95a150e08b&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;k-pop.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;status&#34;:&#34;success&#34;,&#34;message&#34;:&#34;Data fetched successfully&#34;,&#34;data&#34;:[{&#34;Profile&#34;:&#34;https://dbkpop.com/idol/jungkook-bts/&#34;,&#34;Stage Name&#34;:&#34;Jungkook&#34;,&#34;Full Name&#34;:&#34;Jeon Jungkook&#34;,&#34;Korean Name&#34;:&#34;전정국&#34;,&#34;K. Stage Name&#34;:&#34;정국&#34;,&#34;Date of Birth&#34;:&#34;1997-09-01&#34;,&#34;Group&#34;:&#34;BTS&#34;,&#34;Country&#34;:&#34;South Korea&#34;,&#34;Second Country&#34;:null,&#34;Height&#34;:&#34;178&#34;,&#34;Weight&#34;:&#34;66&#34;,&#34;Birthplace&#34;:&#34;Busan&#34;,&#34;Other Group&#34;:null,&#34;Former Group&#34;:null,&#34;Gender&#34;:&#34;M&#34;,&#34;Position&#34;:null,&#34;Instagram&#34;:null,&#34;Twitter&#34;:null}],&#34;count&#34;:1} . Cars . import java.net.URI; import java.net.http.HttpClient; import java.net.http.HttpRequest; import java.net.http.HttpResponse; HttpRequest request = HttpRequest.newBuilder() .uri(URI.create(&quot;https://car-api2.p.rapidapi.com/api/models?sort=id&amp;direction=asc&quot;)) .header(&quot;X-RapidAPI-Key&quot;, &quot;df17610e35msh51d75ac58fb44f9p14c5f0jsn7d95a150e08b&quot;) .header(&quot;X-RapidAPI-Host&quot;, &quot;car-api2.p.rapidapi.com&quot;) .method(&quot;GET&quot;, HttpRequest.BodyPublishers.noBody()) .build(); HttpResponse&lt;String&gt; response = HttpClient.newHttpClient().send(request, HttpResponse.BodyHandlers.ofString()); System.out.println(response.body()); . {&#34;collection&#34;:{&#34;url&#34;:&#34; /api /models?sort=id u0026direction=asc&#34;,&#34;count&#34;:20,&#34;total&#34;:1158,&#34;pages&#34;:58,&#34;next&#34;:&#34; /api /models?page=2 u0026amp;sort=id u0026amp;direction=asc&#34;,&#34;prev&#34;:&#34;&#34;,&#34;first&#34;:&#34; /api /models?sort=id u0026direction=asc&#34;,&#34;last&#34;:&#34; /api /models?page=58 u0026amp;sort=id u0026amp;direction=asc&#34;},&#34;data&#34;:[{&#34;id&#34;:1,&#34;make_id&#34;:1,&#34;name&#34;:&#34;******* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:2,&#34;make_id&#34;:1,&#34;name&#34;:&#34;*** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:3,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:4,&#34;make_id&#34;:2,&#34;name&#34;:&#34;****** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:5,&#34;make_id&#34;:2,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:6,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:7,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:8,&#34;make_id&#34;:2,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:9,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:10,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:11,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******************* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:12,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:13,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******************* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:14,&#34;make_id&#34;:3,&#34;name&#34;:&#34;******************** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:15,&#34;make_id&#34;:3,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:16,&#34;make_id&#34;:3,&#34;name&#34;:&#34;** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:17,&#34;make_id&#34;:4,&#34;name&#34;:&#34;******* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:18,&#34;make_id&#34;:4,&#34;name&#34;:&#34;********* (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:19,&#34;make_id&#34;:4,&#34;name&#34;:&#34;******** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;},{&#34;id&#34;:20,&#34;make_id&#34;:5,&#34;name&#34;:&#34;*** (hidden)&#34;,&#34;__message&#34;:&#34;NOTE: Data is limited to `2020` for non-paying users. Search for 2020 vehicles or subscribe to unlock this data.&#34;}]} . Purpose of API . An API allows for a website to make use of the data already out there on the internet. This can enrich a website without having to put together all of the data from scratch. . Backend Implementation . To be able to smoothly integrate an API with a nice frontend display of data, a backend is needed to interpret the JSON. . Additionally, many APIs, especially on sources like RAPIDAPI, limit the number of calls. A backend allows for a workaround of this, so data can be stored and refreshed once per day (instead of once per page load). .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/04/JavaAPI.html",
            "relUrl": "/java/2022/09/04/JavaAPI.html",
            "date": " • Sep 4, 2022"
        }
        
    
  
    
        ,"post41": {
            "title": "Java Game",
            "content": "This blog shows up how to set up a basic game in Java! . Tools . Here we only use the built in Java libraries AWT and Swing. . Overview . We create 4 classes. One class contains the game loop, and manages the game. A game loop essentially runs every couple of miliseconds to update the game state. Another class contains the player controller, which is how you can move around and jump. One class draws the ground, and the other class is for the obstacle. . Setup . Create a new directory for all of the java files, so that they can be part of the same package. The reason that this isn&#39;t done in a Notebook is because the classes depend on each other, so individual cells containing classes won&#39;t be able to run. . Playing/Testing . Run the Game.java file. . The Game Class . // My package is called JavaCode package JavaCode; // Necessary imports import java.awt.Graphics; import java.awt.Graphics2D; import java.awt.RenderingHints; import java.awt.event.KeyEvent; import java.awt.event.KeyListener; import javax.swing.JFrame; import javax.swing.JPanel; import javax.swing.JOptionPane; // Inheriting from JPanel using extends JPanel // This way we can override the paint method. This is important so that the screen is cleared before it is repainted. Otherwise, we can&#39;t see movement! public class Game extends JPanel { // Instantiating the player (ball) Controller controller = new Controller(this); // Instantiating the ground Ground ground = new Ground(this); public Game() { // Adding key listener to constructor. // This allows for user input. addKeyListener(new KeyListener() { @Override public void keyTyped(KeyEvent e) { } @Override public void keyReleased(KeyEvent e) { controller.keyReleased(e); } @Override public void keyPressed(KeyEvent e) { controller.keyPressed(e); } }); setFocusable(true); } // Game loop, simply calling the method for the player to move. private void move() { controller.move(); } // Overriding the paint method. // Super.paint is needed since we repaint every 10 miliseconds. @Override public void paint(Graphics g) { super.paint(g); Graphics2D g2d = (Graphics2D) g; g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); // Painting the ground and the player. controller.paint(g2d); ground.paint(g2d); } // Simple Game Over screen public void gameOver() { JOptionPane.showMessageDialog(this, &quot;Game Over&quot;, &quot;Game Over&quot;, JOptionPane.YES_NO_OPTION); System.exit(ABORT); } // Creating the JFrame public static void main(String[] args) throws InterruptedException { JFrame frame = new JFrame(&quot;ADfastpages Game&quot;); // New Game Object Game game = new Game(); frame.add(game); frame.setSize(300, 400); frame.setVisible(true); frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // The game loop. Causes the progression of things in the game. while (true) { game.move(); game.repaint(); // Things aren&#39;t updated every frame. They are updated every 10 ms. Thread.sleep(10); } } } . The Controller Class . package JavaCode; import java.awt.Graphics2D; import java.awt.event.KeyEvent; import java.awt.Rectangle; public class Controller { // x and y are used to locate the player in 2D space int x = 0; int y = 300; // vx and vy are used to move the player around in certain increments. int vx = 0; int vy = 1; // The dimensions of the player. These remain constant. // We need this for a hitbox. private static final int WIDTH = 30; private static final int HEIGHT = 30; private Game game; // Creating an obstacle object here. // We do it in this class since obstacles should spawn relative to the player. Obstacle obstacle = new Obstacle(game); public Controller(Game game) { // This object is instantiated in the game class, so that the controller can contain a reference to the game state. this.game= game; } // Method to move the player public void move() { // Making sure we move within the boundaries. if (x + vx &gt; 0 &amp;&amp; x + vx &lt; game.getWidth()-60) x = x + vx; if (y + vy &gt; 0 &amp;&amp; x + vy &lt; game.getHeight()-60) y = y + vy; // Detecting collision so that the game can end. // References the Game Over method contained in the game class. if (collisionObstacle()) { game.gameOver(); } // Implementing realistic ground. if (y &lt; game.getHeight() / 2) { if (collisionGround()) { vy = -1; } } else { // Stopping player if it hits the ground. if (collisionGround()) { vy = 0; } else { vy = 1; } } } // The paint method needs to paint both the player, as well as call the obstacle paint method to paint the obstacle. public void paint(Graphics2D g) { g.fillOval(x, y, WIDTH, HEIGHT); obstacle.paint(g, 100); } // Creating a hitbox for the player. public Rectangle getBounds() { return new Rectangle(x, y, WIDTH, HEIGHT); } // Making sure the player doesn&#39;t move without key being pressed. public void keyReleased(KeyEvent e) { vx = 0; } // Input movement public void keyPressed(KeyEvent e) { // A and D move the player side to side. if (e.getKeyCode() == KeyEvent.VK_A) vx = -2; if (e.getKeyCode() == KeyEvent.VK_D) vx = 2; // Jump functionality. if (vy == 0) { if (e.getKeyCode() == KeyEvent.VK_SPACE) do { y = y - 1; } while (y &gt; 250); vy = -1; } } // Method to detect collision with the ground. private boolean collisionGround() { return game.ground.getBounds().intersects(getBounds()); } // Separate method to detect collision with an obstacle. // Needed since collision with different things should cause different results. private boolean collisionObstacle() { return this.obstacle.getBounds().intersects(getBounds()); } } . The Obstacle Class . package JavaCode; import java.awt.Graphics2D; import java.awt.Rectangle; public class Obstacle { // Rererence to the game object. private Game game; // Dimensions for obstacle hitbox. private static final int WIDTH = 20; private static final int HEIGHT = 20; // Updating x position to spawn at. private int localx = 60; public Obstacle(Game game) { this.game= game; } // Paint method used to displat the ground. // Needs an input for the x position as well, since the obstacle shouldn&#39;t always spawn in the same place. public void paint(Graphics2D g, int x) { localx = x; g.fillRect(localx, 325, WIDTH, HEIGHT); } // Setting up a collider to detect collision. public Rectangle getBounds() { return new Rectangle(localx, 325, WIDTH, HEIGHT); } } . The Ground Class . package JavaCode; import java.awt.Graphics2D; import java.awt.Rectangle; public class Ground { // Rererence to the game object. private Game game; private static final int HEIGHT = 30; public Ground(Game game) { this.game= game; } // Paint method used to displat the ground. public void paint(Graphics2D g) { g.fillRect(0, game.getHeight() - 30, game.getWidth(), 30); } // Setting up a collider to detect collision. public Rectangle getBounds() { return new Rectangle(0, game.getHeight() - 30, game.getWidth(), HEIGHT); } } .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/09/03/JavaGame.html",
            "relUrl": "/java/2022/09/03/JavaGame.html",
            "date": " • Sep 3, 2022"
        }
        
    
  
    
        ,"post42": {
            "title": "Python Verify Environment",
            "content": "Introduction . In a bash jupyter kernel, you cannot take in input from the user. So, to verify installation of user inputted packages, this notebook utilizes os.system. . import os . package = input(&quot;Enter conda package: &quot;) command = &quot;conda list &quot; + str(package) os.system(command) . Enter conda package: jupyter # packages in environment at /Users/sahilsamar/opt/anaconda3/envs/myenv: # # Name Version Build Channel jupyter 1.0.0 py310hca03da5_8 jupyter_client 7.2.2 py310hca03da5_0 jupyter_console 6.4.3 pyhd3eb1b0_0 jupyter_core 4.10.0 py310hca03da5_0 jupyter_server 1.18.1 py310hca03da5_0 jupyterlab 3.4.4 py310hca03da5_0 jupyterlab_pygments 0.1.2 py_0 jupyterlab_server 2.12.0 py310hca03da5_0 jupyterlab_widgets 1.0.0 pyhd3eb1b0_1 neo4jupyter 0.2.0 pypi_0 pypi . 0 .",
            "url": "https://ad1616.github.io/ADfastpages/python/2022/08/25/pyVerifyEnvironment.html",
            "relUrl": "/python/2022/08/25/pyVerifyEnvironment.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post43": {
            "title": "Verify Environment",
            "content": "Introduction . This is a simple bash notebook to verify installations and versions of proper tools for development. . Taking in user input does not work in a bash notebook. As a result, the last cell of this notebook was replaced by another notebook that instead used python magic to verify installation of a user inputted conda package. . jupyter kernelspec list . Available kernels: bash /Users/sahilsamar/Library/Jupyter/kernels/bash java /Users/sahilsamar/Library/Jupyter/kernels/java javascript /Users/sahilsamar/Library/Jupyter/kernels/javascript python3 /Users/sahilsamar/opt/anaconda3/envs/myenv/share/jupyter/kernels/python3 . python --version python2 --version java --version conda --version . Python 3.10.5 Python 2.7.18 java 18.0.2 2022-07-19 Java(TM) SE Runtime Environment (build 18.0.2+9-61) Java HotSpot(TM) 64-Bit Server VM (build 18.0.2+9-61, mixed mode, sharing) conda 4.13.0 . # cd ~/GithubRepositories/ADfastpages # bash searchConda.sh .",
            "url": "https://ad1616.github.io/ADfastpages/bash/2022/08/25/VerifyEnvironment.html",
            "relUrl": "/bash/2022/08/25/VerifyEnvironment.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post44": {
            "title": "Coulomb Calculator",
            "content": "Introduction . I used this notebook to make a Coulomb Law calculator using Java. The main goal of this was to gain an understanding of primitives. . I used integers, doubles, floats, and booleans, all of which were primitive data types. I also used strings, which are not primitive data types, and used one of the methods to demonstrate that the string was an object of the nonprimitive String class. . import java.util.Scanner; import java.lang.Math; System.out.println(&quot;Import Successful&quot;); . Import Successful . public class Coulomb { // Constructor with the enterValues method. public Coulomb () { this.enterValues(); } // Generally, charge values can be integers, since charge is quantized. // The distance can be a float, since it is often a decimal. // The force is a double due to the size of k. private double force; private int q1; private int q2; private float r; private static double k = 9 * Math.pow(10, 9); public static void main(String[] args) { // Creating an object of the Coulomb class. The constructor calls the enterValues method. Coulomb calc = new Coulomb(); } private void enterValues() { Scanner input; // 3 while loops with try-catch statements to make sure the correct datatype is inputted. while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the first charge: &quot;); try { q1 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the second charge: &quot;); try { q2 = input.nextInt(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not an int&quot; + e); } input.close(); } while (true) { input = new Scanner(System.in); System.out.print(&quot;Enter the distance between the charges: &quot;); try { r = input.nextFloat(); break; } catch (Exception e) { // if not a number System.out.println(&quot;Not a float&quot; + e); } input.close(); } CalculateCoulomb(); System.out.println(&quot;The force between the two charges, by Coulomb&#39;s Law, is &quot; + force + &quot; Coulombs&quot;); // If the user wishes to continue, they can enter new values. If not, the program exits. if (moreCalc()) { enterValues(); } else { System.out.println(&quot;Exited.&quot;); return; } } // The actual calculator. A simple formula called Coulomb&#39;s Law is employed. // The method itself is of type double, and outputs the force which is of double datatype. public double CalculateCoulomb() { force = (k * q1 * q2 / (Math.pow(r, 2))); return force; } // This method checks if the user wishes to do a new calculation. // The method is of type boolean, and outputs true if the user wants to enter new values, and false otherwise. public boolean moreCalc() { Scanner input; input = new Scanner(System.in); System.out.print(&quot;Do you wish to continue? Type Yes to continue, or anything else to exit. &quot;); String chosen = input.nextLine(); // String is a class. Therefore, the object of the String class, chosen, has methods. // The .equals method is used to check if two strings are equivalent. if (chosen.equals(&quot;Yes&quot;)) { return true; } else { return false; } } } Coulomb.main(null); . Enter the first charge: 5 Enter the second charge: 10 Enter the distance between the charges: 15 The force between the two charges, by Coulomb&#39;s Law, is 2.0E9 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. Yes Enter the first charge: 20 Enter the second charge: 25 Enter the distance between the charges: 30 The force between the two charges, by Coulomb&#39;s Law, is 5.0E9 Coulombs Do you wish to continue? Type Yes to continue, or anything else to exit. no Exited. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/24/CoulombLaw.html",
            "relUrl": "/java/2022/08/24/CoulombLaw.html",
            "date": " • Aug 24, 2022"
        }
        
    
  
    
        ,"post45": {
            "title": "Java House",
            "content": "Description . This notebook contains a class which describes houses. . // Definition of class public class house { private int bedrooms; private int bathrooms; private int sqft; private float age; private String location; // Constructor called with no parameters. Different from class definition because it&#39;s missing the &quot;class&quot; keyword. public house() { // Constructor uses a non static setter method to assign the variable values of the class. this.setHouse(0, 0, 0, 0, &quot;-1&quot;); } // Constructor called when parameters are given in creation of the object. public house(int bedrooms, int bathrooms, int sqft, float age, String location) { this.setHouse(bedrooms, bathrooms, sqft, age, location); } // Non static setter method sets the values of the variables in the object. public void setHouse(int bedrooms, int bathrooms, int sqft, float age, String location) { this.bedrooms = bedrooms; this.bathrooms = bathrooms; this.sqft = sqft; this.age = age; this.location = location; } // Non static getter method returns the number of bedrooms in the house object. public int getter() { return this.bedrooms; } public static void main(String[] args) { // Creating two instances of the house class. house house1 = new house(); house house2 = new house(4, 4, 3000, 5, &quot;Zimbabwe&quot;); System.out.println(&quot;House 1 bedrooms: &quot; + house1.getter()); System.out.println(&quot;House 2 bedrooms: &quot; + house2.getter()); } } house.main(null); . House 1 bedrooms: 0 House 2 bedrooms: 4 .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/21/JavaHouse.html",
            "relUrl": "/java/2022/08/21/JavaHouse.html",
            "date": " • Aug 21, 2022"
        }
        
    
  
    
        ,"post46": {
            "title": "Hello Bash Jupyter Kernel",
            "content": "ls . 2020-02-20-test.ipynb 2022-08-24-CoulombLaw.ipynb 2022-07-21-neo4j_intro.ipynb 2022-08-25-VerifyEnvironment.ipynb 2022-07-28-java_test.ipynb README.md 2022-08-19-JavaAnatomy.ipynb ghtop_images 2022-08-19-bash_test.ipynb my_icons 2022-08-21-JavaHouse.ipynb . cd ~ . ls . Applications JupyterNotebooks UnityProjects CustomApps Library miniforge3 Desktop Movies opt Documents Music tensorflow-env Downloads Pictures GithubRepositories Public .",
            "url": "https://ad1616.github.io/ADfastpages/bash/2022/08/19/bash_test.html",
            "relUrl": "/bash/2022/08/19/bash_test.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post47": {
            "title": "Java Anatomy",
            "content": "How does it work? . First, you need to create a class. The name of the class is sometimes called the definition or the header. The keyword at the start determines its access level. Inside of the class, you can create methods, which are like functions. A static method ensures that there is only one of them. The public keyword determines the access level of the method. Void just means that the method doesn&#39;t return anything. . We can then call this method without first instantiating the object, because the method was static. . // Define Static Method within a Class public class HelloStatic { // Java standard runtime entry point public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } // A method call allows us to execute code that is wrapped in Class HelloStatic.main(null); // Class prefix allows reference of Static Method . Hello World! . Constructors . A class can have a constructor. This is basically created with the syntax of excluding the &quot;class&quot; keyword. Inside the constructor, you can define and assign variables. Make sure that the variable is defined with an access level and a datatype before it is included in the constructor. . A getter is basically so that you can access variables with the private keyword from outside of the class. It is simply a public method that returns the value of a particular private variable. Note that this is not static, so an object of the class must be created to call this method. . Constructors do not return anything because a constuctor is called by the memory allocation and object initialization code in the runtime. The runtime returns the instance of the object. . // Define Class with Constructor returning Object public class HelloObject { private String hello; // instance attribute or variable public HelloObject() { // constructor hello = &quot;Hello, World!&quot;; } public String getHello() { // getter, returns value from inside the object return this.hello; // return String from object } public static void main(String[] args) { HelloObject ho = new HelloObject(); // Instance of Class (ho) is an Object via &quot;new HelloObject()&quot; System.out.println(ho.getHello()); // Object allows reference to public methods and data } } // IJava activation HelloObject.main(null); . Hello, World! . Multiple Objects and Constructors . The below class has two constructors. When a class object is created with no parameters, the first constructor is called. When a class object is created with a parameter, the second constructor is called. This allows for a user to access different functionalities of the program based not only on what the values are of the parameters they type but also on what parameters they actually choose to type. . This method also has a getter and a setter for the private hello string. . // Define Class public class HelloDynamic { // name the first letter of class as capitalized, note camel case // instance variable have access modifier (private is most common), data type, and name private String hello; // constructor signature 1, public and zero arguments, constructors do not have return type public HelloDynamic() { // 0 argument constructor this.setHello(&quot;Hello, World!&quot;); // using setter with static string } // constructor signature, public and one argument public HelloDynamic(String hello) { // 1 argument constructor this.setHello(hello); // using setter with local variable passed into constructor } // setter/mutator, setter have void return type and a parameter public void setHello(String hello) { // setter this.hello = hello; // instance variable on the left, local variable on the right } // getter/accessor, getter used to return private instance variable (encapsulated), return type is String public String getHello() { // getter return this.hello; } // public static void main(String[] args) is signature for main/drivers/tester method // a driver/tester method is singular or called a class method, it is never part of an object public static void main(String[] args) { HelloDynamic hd1 = new HelloDynamic(); // no argument constructor HelloDynamic hd2 = new HelloDynamic(&quot;Hello, Nighthawk Coding Society!&quot;); // one argument constructor System.out.println(hd1.getHello()); // accessing getter System.out.println(hd2.getHello()); } } // IJava activation HelloDynamic.main(null); . Hello, World! Hello, Nighthawk Coding Society! . Class Naming Conventions . The first letter of each word in the class name should be capitalized. .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/08/19/JavaAnatomy.html",
            "relUrl": "/java/2022/08/19/JavaAnatomy.html",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post48": {
            "title": "Hello Java Jupyter Kernel",
            "content": "public class HelloWorld { public static void main(String[] args) { System.out.println(&quot;Hello World!&quot;); } } HelloWorld.main(null); . Hello World! . System.out.println(&quot;hello&quot;) . hello .",
            "url": "https://ad1616.github.io/ADfastpages/java/2022/07/28/java_test.html",
            "relUrl": "/java/2022/07/28/java_test.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post49": {
            "title": "First Post to ADfastpages",
            "content": "Welcome to this website! There will be many more posts in the future. . What is this? . This is a website that makes use of a tool called fastpages. This tool allows for easy creation of a website through the use of jupyter notebooks and markdown files. Everything is hosted using github pages. . There are two main things I will be using this website for: . Notebooks Posts . Code Snippets with descriptions | Simple markdown/html blogging | .",
            "url": "https://ad1616.github.io/ADfastpages/markdown/2022/07/28/first-post.html",
            "relUrl": "/markdown/2022/07/28/first-post.html",
            "date": " • Jul 28, 2022"
        }
        
    
  
    
        ,"post50": {
            "title": "Neo4J Graph Database Introduction",
            "content": "Introduction . CS-Students is a sample knowledge graph that can be used to model any classroom that is relation based (a classroom that has lots of different people, pairs, groups, periods; things like that). This notebook is meant to demonstrate how to query this knowledge graph based on the preset things that are currently in the sample data. . Data . Currently, the data consists of the following categories (which are labels in Neo4J): . Period (most teachers would find it useful to have their data divided into class periods) . Scrum Team (basically, the largest overarching groups of students, under period) . Pairs (pairs of students within scrum teams) . Person (object that represents each student) . The data also has the following relationships . IN_PERIOD (to relate teams to the period they are in) . CROSSOVER (a relationship that exists to connect pairs of teams which work together) . PAIR_SHARE (relationship defining students who are paired together) . IN_GROUP (to relate people to the group they are in) . Setup in Anaconda . 1: Install Anaconda . 2: On windows, open the Anaconda command prompt. On mac, open the normal terminal. . 3: Run the following commands: . conda install jupyter . conda install py2neo . conda install pandas . conda install neo4jupyter . 4: If you haven&#39;t already, then clone this repository to a location that you can navigate to easily in your files. . 5: The commands above have configured your conda environment. Now, simply run the command . jupyter notebook . 6: This should open up something in the browser. You will see all of your files. Navigate to the directory which has the github repository clone. . 7: Then, navigate to this notebook. You should be able to run this notebook and experience all of its features now! . Setup in an IDE like VSCode . 1: In the IDE terminal, run the following commands: . pip install jupyter . pip install py2neo . pip install pandas . pip install neo4jupyter . 2: You&#39;re all set to run the notebook! . import pandas as pd import getpass from py2neo import Graph, Node, Relationship from py2neo import GraphService import neo4jupyter neo4jupyter.init_notebook_mode() . # The password is made private. password = getpass.getpass(prompt=&#39;Password: &#39;, stream=None) graph = Graph(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) # database gs = GraphService(&quot;neo4j+ssc://f9708be2.databases.neo4j.io&quot;, auth=(&quot;neo4j&quot;, password)) . neo4jupyter.draw(graph, {&quot;PERSON&quot;: &quot;name&quot;}) . query = &quot;MATCH(n:SCRUM_TEAM) RETURN n.name AS TeamName, n.runtimelink AS RuntimeLink&quot; graph.run(query).to_data_frame() . TeamName RuntimeLink . 0 Team 1 | www.team1.com | . 1 Team 2 | www.team2.com | . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 1 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . Person Job . 0 Doug | Deployment Manager | . 1 Carl | Technical Officer | . 2 Bob | Design Manager | . 3 Alice | Scrum Master | . query = &quot;MATCH(n1:PERSON)-[rel:IN_GROUP]-&gt;(n2:SCRUM_TEAM {name: &quot;Team 2 &quot;}) RETURN n1.name AS Person, rel.Job AS Job&quot; graph.run(query).to_data_frame() . Person Job . 0 Henry | Design Manager | . 1 George | Technical Officer | . 2 Ferb | Deployment Manager | . 3 Eve | Scrum Master | . The following cells show how to do CRUD operations . You can do more than just query! To see your changes in effect, rerun the visualization in the third cell. . def CreatePerson(personName): tx = graph.begin() createdPerson = Node(&quot;PERSON&quot;, name = personName) tx.create(createdPerson) graph.commit(tx) def CreatePersonTester(): n = input(&quot;Enter a person name: &quot;) CreatePerson(n) # Run the CreatePersonTester function to try creating a node. You should be able to find your new node! CreatePersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. # In a real application, you need to have a way to query by unique ID def UpdateAPerson(personName, newName): graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; SET n.name= &quot;&quot; + str(newName) + &quot; &quot;&quot;) def UpdateAPersonTester(): o = str(input(&quot;Enter the name you want to change: &quot;)) n = str(input(&quot;Enter the new name: &quot;)) UpdateAPerson(o, n) # Try updating the node that you created in the last code block! UpdateAPersonTester() . # Note that this breaks with duplicate names. This is simply for demonstration purposes. def DeleteAPerson(personName): node = graph.evaluate(&quot;MATCH (n:PERSON) WHERE n.name = &quot;&quot; + str(personName) + &quot; &quot; RETURN n&quot;) try: graph.delete(node) except: return def DeleteAPersonTester(): x = str(input(&quot;Enter a person name: &quot;)) DeleteAPerson(x) # You can try deleting the node that you created by simply entering the person name DeleteAPersonTester() .",
            "url": "https://ad1616.github.io/ADfastpages/python/2022/07/21/neo4j_intro.html",
            "relUrl": "/python/2022/07/21/neo4j_intro.html",
            "date": " • Jul 21, 2022"
        }
        
    
  
    
        ,"post51": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ad1616.github.io/ADfastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Helpful CB Things",
          "content": "Unit 1: Primitive Types . Example Notebook with implementation of primitives . Unit 2: Using Objects . Linked below are notebooks demonstrating use of and explaining objects in Java. . Basic anatomy of java . Using objects through Coulomb Calculator code example . Many examples of objects in this basic Game example using Swing and AWT . Explaining objects and inheritance with basic code example . Unit 3: Boolean Expressions and if statements . Control structures lesson with boolean expressions . Unit 4: Iteration . Iteration across a 2D array example . Another example of iteration across a 2D array . Unit 5: Writing Classes . Lesson explaining objects and inheritance in relation to classes . More discussion classes and objects . Java class that describes a house . Writing a class with methods for a physics calculator . Defining vector class for vector field . Inheritance and abstract classes with fibonacci . Unit 6: Array . 2D array with vector fields . 2D array with images . Unit 7: Arraylist . Array and Arraylist basic . More features with arraylist . Unit 8: 2D Array . 2D array with vector fields . 2D array with images . Unit 9: Inheritance . Lesson explaining objects and inheritance in relation to classes . Inheritance and abstract classes with fibonacci . Unit 10: Recursion . Fibonacci with Recursion .",
          "url": "https://ad1616.github.io/ADfastpages/cb/",
          "relUrl": "/cb/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "At the time of creating this site, I’m a senior at Del Norte High School. . What’s this for? . This site is part of my Computer Science A curriculum. But I might use it for something like a personal blog. .",
          "url": "https://ad1616.github.io/ADfastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Focus and Habits",
          "content": "Reducing Stress . I believe that stress can be reduced by thinking about the goal of learning. By not worrying about points, automatically almost all of the stress is gone. Instead, I like to focus on what I take away from a class, rather than the points I earn in it. This way I am more motivated to learn, but I am less stressed. . Recounting things I’m grateful for . I’m grateful to be able to have the resources to learn CS. This includes a computer, a great teacher, a fun group, and opportunities to pursue CS outside of school. . My goals . My goal in Computer Science is just to build something that is useful to the world. Something that ends up being important to people, and helps people. That’s long term though. In the short term, I want to take as many opportunities as I can to advance my CS knowledge and to create cool things! . Collaboration . My group is a great example of collaboration, IMO. We work hard and have fun! .",
          "url": "https://ad1616.github.io/ADfastpages/focus/",
          "relUrl": "/focus/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "",
          "content": "Sahil’s (AD1616) Fastpages Site . . Hey, this is Sahil. Welcome to my website! . . Posts .",
          "url": "https://ad1616.github.io/ADfastpages/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sahil’s (AD1616) Fastpages Site . . Hey, this is Sahil. Welcome to my website! . . Posts .",
          "url": "https://ad1616.github.io/ADfastpages/page2/",
          "relUrl": "/page2/",
          "date": ""
      }
      
  

  
      ,"page13": {
          "title": "",
          "content": "Sahil’s (AD1616) Fastpages Site . . Hey, this is Sahil. Welcome to my website! . . Posts .",
          "url": "https://ad1616.github.io/ADfastpages/page3/",
          "relUrl": "/page3/",
          "date": ""
      }
      
  

  
      ,"page14": {
          "title": "",
          "content": "Sahil’s (AD1616) Fastpages Site . . Hey, this is Sahil. Welcome to my website! . . Posts .",
          "url": "https://ad1616.github.io/ADfastpages/page4/",
          "relUrl": "/page4/",
          "date": ""
      }
      
  

  
  

  
      ,"page16": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ad1616.github.io/ADfastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}